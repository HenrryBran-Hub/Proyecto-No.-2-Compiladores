2023-10-07 13:52:30:797 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACT (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NULO (BLOCK (ALT 'nil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGO (BLOCK (ALT '...'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNCION (BLOCK (ALT 'func'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE CADENA (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (RULE ID_VALIDO (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CHARACTER (BLOCK (ALT '\'' (BLOCK (ALT ESCAPE) (ALT (~ (SET ['\\\r\n])))) '\''))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [\\'tnr]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IG (BLOCK (ALT '='))) (RULE DOS_PUNTOS (BLOCK (ALT ':'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE CIERRE_INTE (BLOCK (ALT '?'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE SUMA (BLOCK (ALT '+='))) (RULE RESTA (BLOCK (ALT '-='))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE RETORNO (BLOCK (ALT '->'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DIRME (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-10-07 13:52:30:811 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACT (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NULO (BLOCK (ALT 'nil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGO (BLOCK (ALT '...'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNCION (BLOCK (ALT 'func'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE CADENA (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (RULE ID_VALIDO (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CHARACTER (BLOCK (ALT '\'' (BLOCK (ALT ESCAPE) (ALT (~ (SET ['\\\r\n])))) '\''))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [\\'tnr]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IG (BLOCK (ALT '='))) (RULE DOS_PUNTOS (BLOCK (ALT ':'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE CIERRE_INTE (BLOCK (ALT '?'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE SUMA (BLOCK (ALT '+='))) (RULE RESTA (BLOCK (ALT '-='))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE RETORNO (BLOCK (ALT '->'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DIRME (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-10-07 13:52:31:632 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $matrizcontrol.matct}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $matrizcontrol.matct}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr { $decvbl = datosprimitivos.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = datosprimitivos.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = datosprimitivos.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = datosprimitivos.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = datosprimitivos.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = sentencias.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = sentencias.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = sentencias.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = sentencias.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = sentencias.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = sentencias.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = sentencias.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = sentencias.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = sentencias.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=sentencias.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = sentencias.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR (= op1 ID_VALIDO) IN (= op2 ID_VALIDO) LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForId($FOR.line, $FOR.pos, $op1.text, $op2.text, $blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = sentencias.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = sentencias.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = sentencias.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN (= op expr) {
    $rect = sentencias.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}) (ALT RETURN {
    $rect = sentencias.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = datoscompuestos.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = datoscompuestos.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = datoscompuestos.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = datoscompuestos.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = datoscompuestos.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = datoscompuestos.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = datoscompuestos.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs IG (= op3 expr) { $veadct = datoscompuestos.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER IG (= op3 expr) { $veadct = datoscompuestos.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = datoscompuestos.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = datoscompuestos.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = datoscompuestos.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = datoscompuestos.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = datoscompuestos.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs { $vepposct = datoscompuestos.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER { $vepposct = datoscompuestos.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) }) (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = datoscompuestos.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE matrizcontrol (returns interfaces.Instruction matct) (BLOCK (ALT VAR ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS tipomatriz))) IG defmatriz {
    if ($DOS_PUNTOS != nil) {
        $matct = datoscompuestos.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        fmt.Println("Nada")
        //$matct = datoscompuestos.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }
}))) (RULE tipomatriz (returns interfaces.Expression tipomat) (BLOCK (ALT CORCHIZQ tipomatriz CORCHDER { 
    $tipomat = datoscompuestos.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)
}) (ALT CORCHIZQ tipodato CORCHDER { 
    $tipomat = datoscompuestos.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)
}))) (RULE defmatriz (returns interfaces.Instruction defmat) (BLOCK (ALT listavaloresmat { $defmat = $listavaloresmat.listvlamat}))) (RULE listavaloresmat (returns interfaces.Instruction listvlamat) (BLOCK (ALT CORCHIZQ listavaloresmat2 CORCHDER { $listvlamat = $listavaloresmat2.mylisttmatt}) (ALT simplematriz { $listvlamat = $simplematriz.simmat}))) (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (= op listavaloresmat2) COMA listavaloresmat { $mylisttmatt = datoscompuestos.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}) (ALT listavaloresmat { $mylisttmatt = datoscompuestos.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT listaexpresions { $mylisttmatt = datoscompuestos.NewMatrizListaExpresion($listaexpresions.blkparf)}))) (RULE listaexpresions (returns []interface{} blkparf) (@ init {
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= funpar listaexpresion)))) {
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }
}))) (RULE listaexpresion (returns interfaces.Expression funpar) (BLOCK (ALT COMA expr {
    $funpar = datoscompuestos.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $funpar = datoscompuestos.NewArregloParametro($expr.e)
}))) (RULE simplematriz (returns interfaces.Instruction simmat) (BLOCK (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS (= op simplematriz) COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = datoscompuestos.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}) (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS expr COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = datoscompuestos.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}))) (RULE listamatrizaddsubs (returns []interface{} blklimatas) (@ init {
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= lmas listamatrizaddsub)))) {
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }
}))) (RULE listamatrizaddsub (returns interfaces.Expression lmas) (BLOCK (ALT CORCHIZQ expr CORCHDER {
    $lmas = datoscompuestos.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)
}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listaexpresions PARDER { $prnt = funciones.NewPrint($PRINT.line,$PRINT.pos,$listaexpresions.blkparf)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = funciones.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = instructions.NewFuncionFloatEmbebida($expr.e)})))))
2023-10-07 13:52:31:644 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $matrizcontrol.matct}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $matrizcontrol.matct}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr { $decvbl = datosprimitivos.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = datosprimitivos.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = datosprimitivos.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = datosprimitivos.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = datosprimitivos.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = sentencias.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = sentencias.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = sentencias.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = sentencias.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = sentencias.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = sentencias.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = sentencias.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = sentencias.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = sentencias.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=sentencias.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = sentencias.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR (= op1 ID_VALIDO) IN (= op2 ID_VALIDO) LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForId($FOR.line, $FOR.pos, $op1.text, $op2.text, $blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = sentencias.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = sentencias.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = sentencias.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN (= op expr) {
    $rect = sentencias.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}) (ALT RETURN {
    $rect = sentencias.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = datoscompuestos.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = datoscompuestos.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = datoscompuestos.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = datoscompuestos.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = datoscompuestos.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = datoscompuestos.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = datoscompuestos.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs IG (= op3 expr) { $veadct = datoscompuestos.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER IG (= op3 expr) { $veadct = datoscompuestos.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = datoscompuestos.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = datoscompuestos.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = datoscompuestos.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = datoscompuestos.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = datoscompuestos.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs { $vepposct = datoscompuestos.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER { $vepposct = datoscompuestos.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) }) (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = datoscompuestos.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE matrizcontrol (returns interfaces.Instruction matct) (BLOCK (ALT VAR ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS tipomatriz))) IG defmatriz {
    if ($DOS_PUNTOS != nil) {
        $matct = datoscompuestos.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        fmt.Println("Nada")
        //$matct = datoscompuestos.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }
}))) (RULE tipomatriz (returns interfaces.Expression tipomat) (BLOCK (ALT CORCHIZQ tipomatriz CORCHDER { 
    $tipomat = datoscompuestos.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)
}) (ALT CORCHIZQ tipodato CORCHDER { 
    $tipomat = datoscompuestos.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)
}))) (RULE defmatriz (returns interfaces.Instruction defmat) (BLOCK (ALT listavaloresmat { $defmat = $listavaloresmat.listvlamat}))) (RULE listavaloresmat (returns interfaces.Instruction listvlamat) (BLOCK (ALT CORCHIZQ listavaloresmat2 CORCHDER { $listvlamat = $listavaloresmat2.mylisttmatt}) (ALT simplematriz { $listvlamat = $simplematriz.simmat}))) (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (= op listavaloresmat2) COMA listavaloresmat { $mylisttmatt = datoscompuestos.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}) (ALT listavaloresmat { $mylisttmatt = datoscompuestos.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT listaexpresions { $mylisttmatt = datoscompuestos.NewMatrizListaExpresion($listaexpresions.blkparf)}))) (RULE listaexpresions (returns []interface{} blkparf) (@ init {
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= funpar listaexpresion)))) {
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }
}))) (RULE listaexpresion (returns interfaces.Expression funpar) (BLOCK (ALT COMA expr {
    $funpar = datoscompuestos.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $funpar = datoscompuestos.NewArregloParametro($expr.e)
}))) (RULE simplematriz (returns interfaces.Instruction simmat) (BLOCK (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS (= op simplematriz) COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = datoscompuestos.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}) (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS expr COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = datoscompuestos.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}))) (RULE listamatrizaddsubs (returns []interface{} blklimatas) (@ init {
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= lmas listamatrizaddsub)))) {
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }
}))) (RULE listamatrizaddsub (returns interfaces.Expression lmas) (BLOCK (ALT CORCHIZQ expr CORCHDER {
    $lmas = datoscompuestos.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)
}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listaexpresions PARDER { $prnt = funciones.NewPrint($PRINT.line,$PRINT.pos,$listaexpresions.blkparf)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = funciones.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = instructions.NewFuncionFloatEmbebida($expr.e)})))))
2023-10-07 13:52:31:648 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $matrizcontrol.matct}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $matrizcontrol.matct}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr { $decvbl = datosprimitivos.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = datosprimitivos.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = datosprimitivos.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = datosprimitivos.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = datosprimitivos.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = sentencias.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = sentencias.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = sentencias.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = sentencias.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = sentencias.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = sentencias.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = sentencias.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = sentencias.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = sentencias.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=sentencias.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = sentencias.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR (= op1 ID_VALIDO) IN (= op2 ID_VALIDO) LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForId($FOR.line, $FOR.pos, $op1.text, $op2.text, $blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = sentencias.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = sentencias.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = sentencias.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN (= op expr) {
    $rect = sentencias.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}) (ALT RETURN {
    $rect = sentencias.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = datoscompuestos.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = datoscompuestos.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = datoscompuestos.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = datoscompuestos.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = datoscompuestos.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = datoscompuestos.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = datoscompuestos.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs IG (= op3 expr) { $veadct = datoscompuestos.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER IG (= op3 expr) { $veadct = datoscompuestos.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = datoscompuestos.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = datoscompuestos.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = datoscompuestos.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = datoscompuestos.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = datoscompuestos.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs { $vepposct = datoscompuestos.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER { $vepposct = datoscompuestos.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) }) (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = datoscompuestos.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE matrizcontrol (returns interfaces.Instruction matct) (BLOCK (ALT VAR ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS tipomatriz))) IG defmatriz {
    if ($DOS_PUNTOS != nil) {
        $matct = datoscompuestos.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        fmt.Println("Nada")
        //$matct = datoscompuestos.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }
}))) (RULE tipomatriz (returns interfaces.Expression tipomat) (BLOCK (ALT CORCHIZQ tipomatriz CORCHDER { 
    $tipomat = datoscompuestos.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)
}) (ALT CORCHIZQ tipodato CORCHDER { 
    $tipomat = datoscompuestos.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)
}))) (RULE defmatriz (returns interfaces.Instruction defmat) (BLOCK (ALT listavaloresmat { $defmat = $listavaloresmat.listvlamat}))) (RULE listavaloresmat (returns interfaces.Instruction listvlamat) (BLOCK (ALT CORCHIZQ listavaloresmat2 CORCHDER { $listvlamat = $listavaloresmat2.mylisttmatt}) (ALT simplematriz { $listvlamat = $simplematriz.simmat}))) (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (= op listavaloresmat2) COMA listavaloresmat { $mylisttmatt = datoscompuestos.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}) (ALT listavaloresmat { $mylisttmatt = datoscompuestos.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT listaexpresions { $mylisttmatt = datoscompuestos.NewMatrizListaExpresion($listaexpresions.blkparf)}))) (RULE listaexpresions (returns []interface{} blkparf) (@ init {
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= funpar listaexpresion)))) {
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }
}))) (RULE listaexpresion (returns interfaces.Expression funpar) (BLOCK (ALT COMA expr {
    $funpar = datoscompuestos.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $funpar = datoscompuestos.NewArregloParametro($expr.e)
}))) (RULE simplematriz (returns interfaces.Instruction simmat) (BLOCK (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS (= op simplematriz) COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = datoscompuestos.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}) (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS expr COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = datoscompuestos.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}))) (RULE listamatrizaddsubs (returns []interface{} blklimatas) (@ init {
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= lmas listamatrizaddsub)))) {
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }
}))) (RULE listamatrizaddsub (returns interfaces.Expression lmas) (BLOCK (ALT CORCHIZQ expr CORCHDER {
    $lmas = datoscompuestos.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)
}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listaexpresions PARDER { $prnt = funciones.NewPrint($PRINT.line,$PRINT.pos,$listaexpresions.blkparf)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = funciones.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = instructions.NewFuncionFloatEmbebida($expr.e)})))))
2023-10-07 13:52:31:648 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"
}) RULES)
2023-10-07 13:52:31:679 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op=NOT<tokenIndex=571> right=expr<tokenIndex=575,p=23> { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) } 
        | PARIZQ<tokenIndex=729> expr<tokenIndex=731> PARDER<tokenIndex=733> { $e = $expr.e } 
        | SUB<tokenIndex=739> NUMBER<tokenIndex=741>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    } 
        | NUMBER<tokenIndex=747>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | CADENA<tokenIndex=753>
    {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=759> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=765> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | CHARACTER<tokenIndex=771> 
    { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    } 
        | ID_VALIDO<tokenIndex=776>
    {
        id := $ID_VALIDO.text
        $e = sentencias.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    } 
        | NULO<tokenIndex=781> {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)} 
        | vectorvacio<tokenIndex=787> { $e = $vectorvacio.veemct} 
        | vectorcount<tokenIndex=793> { $e = $vectorcount.vecnct} 
        | vectoraccess<tokenIndex=799> { $e = $vectoraccess.vepposct} 
        | intembebida<tokenIndex=805> { $e = $intembebida.intemb} 
        | floatembebida<tokenIndex=811> { $e = $floatembebida.floemb} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 22)}?<p=22> op=MODULO<tokenIndex=587> right=expr<tokenIndex=591,p=23> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=(MUL<tokenIndex=604>|DIV<tokenIndex=606>) right=expr<tokenIndex=611,p=22> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=(ADD<tokenIndex=624>|SUB<tokenIndex=626>) right=expr<tokenIndex=631,p=21> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MAY_IG<tokenIndex=644>|MAYOR<tokenIndex=646>) right=expr<tokenIndex=651,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(MEN_IG<tokenIndex=664>|MENOR<tokenIndex=666>) right=expr<tokenIndex=671,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(IG_IG<tokenIndex=684>|DIF<tokenIndex=686>) right=expr<tokenIndex=691,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=AND<tokenIndex=703> right=expr<tokenIndex=707,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=OR<tokenIndex=719> right=expr<tokenIndex=723,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-10-07 13:52:31:695 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 571)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 575) (= p 23)))) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 729))) (expr (ELEMENT_OPTIONS (= tokenIndex 731))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 733))) { $e = $expr.e }) (ALT (SUB (ELEMENT_OPTIONS (= tokenIndex 739))) (NUMBER (ELEMENT_OPTIONS (= tokenIndex 741))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 747))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (CADENA (ELEMENT_OPTIONS (= tokenIndex 753))) {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 759))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 765))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (CHARACTER (ELEMENT_OPTIONS (= tokenIndex 771))) { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT (ID_VALIDO (ELEMENT_OPTIONS (= tokenIndex 776))) {
        id := $ID_VALIDO.text
        $e = sentencias.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT (NULO (ELEMENT_OPTIONS (= tokenIndex 781))) {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT (vectorvacio (ELEMENT_OPTIONS (= tokenIndex 787))) { $e = $vectorvacio.veemct}) (ALT (vectorcount (ELEMENT_OPTIONS (= tokenIndex 793))) { $e = $vectorcount.vecnct}) (ALT (vectoraccess (ELEMENT_OPTIONS (= tokenIndex 799))) { $e = $vectoraccess.vepposct}) (ALT (intembebida (ELEMENT_OPTIONS (= tokenIndex 805))) { $e = $intembebida.intemb}) (ALT (floatembebida (ELEMENT_OPTIONS (= tokenIndex 811))) { $e = $floatembebida.floemb})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 22)}? (ELEMENT_OPTIONS (= p 22))) (= op (MODULO (ELEMENT_OPTIONS (= tokenIndex 587)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 591) (= p 23)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 604))) (DIV (ELEMENT_OPTIONS (= tokenIndex 606))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 611) (= p 22)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 624))) (SUB (ELEMENT_OPTIONS (= tokenIndex 626))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 631) (= p 21)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 644))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 646))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 651) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 664))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 666))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 671) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 684))) (DIF (ELEMENT_OPTIONS (= tokenIndex 686))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 691) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 703)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 707) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 719)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 723) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-10-07 13:52:31:696 left-recursion LogManager.java:25 listavaloresmat2 returns [interfaces.Instruction mylisttmatt]
    :   ( {} listavaloresmat<tokenIndex=1656> { $mylisttmatt = datoscompuestos.NewMatrizListaNivel($listavaloresmat.listvlamat)} 
        | listaexpresions<tokenIndex=1662> { $mylisttmatt = datoscompuestos.NewMatrizListaExpresion($listaexpresions.blkparf)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1648> listavaloresmat<tokenIndex=1650> { $mylisttmatt = datoscompuestos.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}
        )*
    ;
2023-10-07 13:52:31:698 grammar LogManager.java:25 added: (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (BLOCK (ALT {} (listavaloresmat (ELEMENT_OPTIONS (= tokenIndex 1656))) { $mylisttmatt = datoscompuestos.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT (listaexpresions (ELEMENT_OPTIONS (= tokenIndex 1662))) { $mylisttmatt = datoscompuestos.NewMatrizListaExpresion($listaexpresions.blkparf)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1648))) (listavaloresmat (ELEMENT_OPTIONS (= tokenIndex 1650))) { $mylisttmatt = datoscompuestos.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}))))))
2023-10-07 13:52:31:714 grammar LogManager.java:25 import INT=1
2023-10-07 13:52:31:714 grammar LogManager.java:25 import FLOAT=2
2023-10-07 13:52:31:715 grammar LogManager.java:25 import STRING=3
2023-10-07 13:52:31:715 grammar LogManager.java:25 import BOOL=4
2023-10-07 13:52:31:715 grammar LogManager.java:25 import CHARACT=5
2023-10-07 13:52:31:715 grammar LogManager.java:25 import TRU=6
2023-10-07 13:52:31:716 grammar LogManager.java:25 import FAL=7
2023-10-07 13:52:31:716 grammar LogManager.java:25 import VAR=8
2023-10-07 13:52:31:716 grammar LogManager.java:25 import LET=9
2023-10-07 13:52:31:716 grammar LogManager.java:25 import NULO=10
2023-10-07 13:52:31:716 grammar LogManager.java:25 import IF=11
2023-10-07 13:52:31:716 grammar LogManager.java:25 import ELSE=12
2023-10-07 13:52:31:716 grammar LogManager.java:25 import SWITCH=13
2023-10-07 13:52:31:716 grammar LogManager.java:25 import CASE=14
2023-10-07 13:52:31:717 grammar LogManager.java:25 import DEFAULT=15
2023-10-07 13:52:31:717 grammar LogManager.java:25 import BREAK=16
2023-10-07 13:52:31:717 grammar LogManager.java:25 import CONTINUE=17
2023-10-07 13:52:31:717 grammar LogManager.java:25 import FOR=18
2023-10-07 13:52:31:717 grammar LogManager.java:25 import IN=19
2023-10-07 13:52:31:718 grammar LogManager.java:25 import RANGO=20
2023-10-07 13:52:31:718 grammar LogManager.java:25 import WHILE=21
2023-10-07 13:52:31:718 grammar LogManager.java:25 import GUARD=22
2023-10-07 13:52:31:719 grammar LogManager.java:25 import RETURN=23
2023-10-07 13:52:31:719 grammar LogManager.java:25 import FUNCION=24
2023-10-07 13:52:31:719 grammar LogManager.java:25 import PRINT=25
2023-10-07 13:52:31:719 grammar LogManager.java:25 import INOUT=26
2023-10-07 13:52:31:719 grammar LogManager.java:25 import APPEND=27
2023-10-07 13:52:31:720 grammar LogManager.java:25 import REMOVE=28
2023-10-07 13:52:31:720 grammar LogManager.java:25 import REMOVELAST=29
2023-10-07 13:52:31:720 grammar LogManager.java:25 import COUNT=30
2023-10-07 13:52:31:720 grammar LogManager.java:25 import ISEMPTY=31
2023-10-07 13:52:31:721 grammar LogManager.java:25 import AT=32
2023-10-07 13:52:31:722 grammar LogManager.java:25 import REPEATING=33
2023-10-07 13:52:31:722 grammar LogManager.java:25 import STRUCT=34
2023-10-07 13:52:31:722 grammar LogManager.java:25 import MUTATING=35
2023-10-07 13:52:31:722 grammar LogManager.java:25 import SELF=36
2023-10-07 13:52:31:722 grammar LogManager.java:25 import NUMBER=37
2023-10-07 13:52:31:722 grammar LogManager.java:25 import CADENA=38
2023-10-07 13:52:31:722 grammar LogManager.java:25 import ID_VALIDO=39
2023-10-07 13:52:31:723 grammar LogManager.java:25 import CHARACTER=40
2023-10-07 13:52:31:723 grammar LogManager.java:25 import WS=41
2023-10-07 13:52:31:723 grammar LogManager.java:25 import IG=42
2023-10-07 13:52:31:723 grammar LogManager.java:25 import DOS_PUNTOS=43
2023-10-07 13:52:31:723 grammar LogManager.java:25 import PUNTOCOMA=44
2023-10-07 13:52:31:724 grammar LogManager.java:25 import CIERRE_INTE=45
2023-10-07 13:52:31:724 grammar LogManager.java:25 import PARIZQ=46
2023-10-07 13:52:31:724 grammar LogManager.java:25 import PARDER=47
2023-10-07 13:52:31:724 grammar LogManager.java:25 import DIF=48
2023-10-07 13:52:31:725 grammar LogManager.java:25 import IG_IG=49
2023-10-07 13:52:31:725 grammar LogManager.java:25 import NOT=50
2023-10-07 13:52:31:725 grammar LogManager.java:25 import OR=51
2023-10-07 13:52:31:725 grammar LogManager.java:25 import AND=52
2023-10-07 13:52:31:725 grammar LogManager.java:25 import MAY_IG=53
2023-10-07 13:52:31:726 grammar LogManager.java:25 import MEN_IG=54
2023-10-07 13:52:31:726 grammar LogManager.java:25 import MAYOR=55
2023-10-07 13:52:31:726 grammar LogManager.java:25 import MENOR=56
2023-10-07 13:52:31:726 grammar LogManager.java:25 import MODULO=57
2023-10-07 13:52:31:726 grammar LogManager.java:25 import MUL=58
2023-10-07 13:52:31:727 grammar LogManager.java:25 import DIV=59
2023-10-07 13:52:31:727 grammar LogManager.java:25 import ADD=60
2023-10-07 13:52:31:727 grammar LogManager.java:25 import SUB=61
2023-10-07 13:52:31:727 grammar LogManager.java:25 import SUMA=62
2023-10-07 13:52:31:727 grammar LogManager.java:25 import RESTA=63
2023-10-07 13:52:31:727 grammar LogManager.java:25 import LLAVEIZQ=64
2023-10-07 13:52:31:727 grammar LogManager.java:25 import LLAVEDER=65
2023-10-07 13:52:31:727 grammar LogManager.java:25 import RETORNO=66
2023-10-07 13:52:31:727 grammar LogManager.java:25 import COMA=67
2023-10-07 13:52:31:727 grammar LogManager.java:25 import PUNTO=68
2023-10-07 13:52:31:727 grammar LogManager.java:25 import GUIONBAJO=69
2023-10-07 13:52:31:727 grammar LogManager.java:25 import CORCHIZQ=70
2023-10-07 13:52:31:728 grammar LogManager.java:25 import CORCHDER=71
2023-10-07 13:52:31:728 grammar LogManager.java:25 import DIRME=72
2023-10-07 13:52:31:728 grammar LogManager.java:25 import WHITESPACE=73
2023-10-07 13:52:31:728 grammar LogManager.java:25 import COMMENT=74
2023-10-07 13:52:31:728 grammar LogManager.java:25 import LINE_COMMENT=75
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'Int'=1
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'Float'=2
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'String'=3
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'Bool'=4
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'Character'=5
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'true'=6
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'false'=7
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'var'=8
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'let'=9
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'nil'=10
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'if'=11
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'else'=12
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'switch'=13
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'case'=14
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'default'=15
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'break'=16
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'continue'=17
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'for'=18
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'in'=19
2023-10-07 13:52:31:728 grammar LogManager.java:25 import '...'=20
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'while'=21
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'guard'=22
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'return'=23
2023-10-07 13:52:31:728 grammar LogManager.java:25 import 'func'=24
2023-10-07 13:52:31:729 grammar LogManager.java:25 import 'print'=25
2023-10-07 13:52:31:729 grammar LogManager.java:25 import 'inout'=26
2023-10-07 13:52:31:729 grammar LogManager.java:25 import 'append'=27
2023-10-07 13:52:31:729 grammar LogManager.java:25 import 'remove'=28
2023-10-07 13:52:31:729 grammar LogManager.java:25 import 'removeLast'=29
2023-10-07 13:52:31:729 grammar LogManager.java:25 import 'count'=30
2023-10-07 13:52:31:729 grammar LogManager.java:25 import 'isEmpty'=31
2023-10-07 13:52:31:729 grammar LogManager.java:25 import 'at'=32
2023-10-07 13:52:31:729 grammar LogManager.java:25 import 'repeating'=33
2023-10-07 13:52:31:729 grammar LogManager.java:25 import 'struct'=34
2023-10-07 13:52:31:729 grammar LogManager.java:25 import 'mutating'=35
2023-10-07 13:52:31:729 grammar LogManager.java:25 import 'self'=36
2023-10-07 13:52:31:729 grammar LogManager.java:25 import '='=42
2023-10-07 13:52:31:729 grammar LogManager.java:25 import ':'=43
2023-10-07 13:52:31:729 grammar LogManager.java:25 import ';'=44
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '?'=45
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '('=46
2023-10-07 13:52:31:730 grammar LogManager.java:25 import ')'=47
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '!='=48
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '=='=49
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '!'=50
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '||'=51
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '&&'=52
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '>='=53
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '<='=54
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '>'=55
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '<'=56
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '%'=57
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '*'=58
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '/'=59
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '+'=60
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '-'=61
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '+='=62
2023-10-07 13:52:31:730 grammar LogManager.java:25 import '-='=63
2023-10-07 13:52:31:731 grammar LogManager.java:25 import '{'=64
2023-10-07 13:52:31:731 grammar LogManager.java:25 import '}'=65
2023-10-07 13:52:31:731 grammar LogManager.java:25 import '->'=66
2023-10-07 13:52:31:731 grammar LogManager.java:25 import ','=67
2023-10-07 13:52:31:731 grammar LogManager.java:25 import '.'=68
2023-10-07 13:52:31:731 grammar LogManager.java:25 import '_'=69
2023-10-07 13:52:31:731 grammar LogManager.java:25 import '['=70
2023-10-07 13:52:31:731 grammar LogManager.java:25 import ']'=71
2023-10-07 13:52:31:731 grammar LogManager.java:25 import '&'=72
2023-10-07 13:52:31:731 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, STRING=3, BOOL=4, CHARACT=5, TRU=6, FAL=7, VAR=8, LET=9, NULO=10, IF=11, ELSE=12, SWITCH=13, CASE=14, DEFAULT=15, BREAK=16, CONTINUE=17, FOR=18, IN=19, RANGO=20, WHILE=21, GUARD=22, RETURN=23, FUNCION=24, PRINT=25, INOUT=26, APPEND=27, REMOVE=28, REMOVELAST=29, COUNT=30, ISEMPTY=31, AT=32, REPEATING=33, STRUCT=34, MUTATING=35, SELF=36, NUMBER=37, CADENA=38, ID_VALIDO=39, CHARACTER=40, WS=41, IG=42, DOS_PUNTOS=43, PUNTOCOMA=44, CIERRE_INTE=45, PARIZQ=46, PARDER=47, DIF=48, IG_IG=49, NOT=50, OR=51, AND=52, MAY_IG=53, MEN_IG=54, MAYOR=55, MENOR=56, MODULO=57, MUL=58, DIV=59, ADD=60, SUB=61, SUMA=62, RESTA=63, LLAVEIZQ=64, LLAVEDER=65, RETORNO=66, COMA=67, PUNTO=68, GUIONBAJO=69, CORCHIZQ=70, CORCHDER=71, DIRME=72, WHITESPACE=73, COMMENT=74, LINE_COMMENT=75, 'Int'=1, 'Float'=2, 'String'=3, 'Bool'=4, 'Character'=5, 'true'=6, 'false'=7, 'var'=8, 'let'=9, 'nil'=10, 'if'=11, 'else'=12, 'switch'=13, 'case'=14, 'default'=15, 'break'=16, 'continue'=17, 'for'=18, 'in'=19, '...'=20, 'while'=21, 'guard'=22, 'return'=23, 'func'=24, 'print'=25, 'inout'=26, 'append'=27, 'remove'=28, 'removeLast'=29, 'count'=30, 'isEmpty'=31, 'at'=32, 'repeating'=33, 'struct'=34, 'mutating'=35, 'self'=36, '='=42, ':'=43, ';'=44, '?'=45, '('=46, ')'=47, '!='=48, '=='=49, '!'=50, '||'=51, '&&'=52, '>='=53, '<='=54, '>'=55, '<'=56, '%'=57, '*'=58, '/'=59, '+'=60, '-'=61, '+='=62, '-='=63, '{'=64, '}'=65, '->'=66, ','=67, '.'=68, '_'=69, '['=70, ']'=71, '&'=72}
2023-10-07 13:52:31:732 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, STRING=3, BOOL=4, CHARACT=5, TRU=6, FAL=7, VAR=8, LET=9, NULO=10, IF=11, ELSE=12, SWITCH=13, CASE=14, DEFAULT=15, BREAK=16, CONTINUE=17, FOR=18, IN=19, RANGO=20, WHILE=21, GUARD=22, RETURN=23, FUNCION=24, PRINT=25, INOUT=26, APPEND=27, REMOVE=28, REMOVELAST=29, COUNT=30, ISEMPTY=31, AT=32, REPEATING=33, STRUCT=34, MUTATING=35, SELF=36, NUMBER=37, CADENA=38, ID_VALIDO=39, CHARACTER=40, WS=41, IG=42, DOS_PUNTOS=43, PUNTOCOMA=44, CIERRE_INTE=45, PARIZQ=46, PARDER=47, DIF=48, IG_IG=49, NOT=50, OR=51, AND=52, MAY_IG=53, MEN_IG=54, MAYOR=55, MENOR=56, MODULO=57, MUL=58, DIV=59, ADD=60, SUB=61, SUMA=62, RESTA=63, LLAVEIZQ=64, LLAVEDER=65, RETORNO=66, COMA=67, PUNTO=68, GUIONBAJO=69, CORCHIZQ=70, CORCHDER=71, DIRME=72, WHITESPACE=73, COMMENT=74, LINE_COMMENT=75}
2023-10-07 13:52:31:732 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'String'=3, 'Bool'=4, 'Character'=5, 'true'=6, 'false'=7, 'var'=8, 'let'=9, 'nil'=10, 'if'=11, 'else'=12, 'switch'=13, 'case'=14, 'default'=15, 'break'=16, 'continue'=17, 'for'=18, 'in'=19, '...'=20, 'while'=21, 'guard'=22, 'return'=23, 'func'=24, 'print'=25, 'inout'=26, 'append'=27, 'remove'=28, 'removeLast'=29, 'count'=30, 'isEmpty'=31, 'at'=32, 'repeating'=33, 'struct'=34, 'mutating'=35, 'self'=36, '='=42, ':'=43, ';'=44, '?'=45, '('=46, ')'=47, '!='=48, '=='=49, '!'=50, '||'=51, '&&'=52, '>='=53, '<='=54, '>'=55, '<'=56, '%'=57, '*'=58, '/'=59, '+'=60, '-'=61, '+='=62, '-='=63, '{'=64, '}'=65, '->'=66, ','=67, '.'=68, '_'=69, '['=70, ']'=71, '&'=72}
2023-10-07 13:52:31:779 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-10-07 13:52:31:780 LL1 LogManager.java:25 look=[{8..9, 11, 13, 18, 21..22, 25, 39}, <EOF>]
2023-10-07 13:52:31:781 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:781 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-10-07 13:52:31:781 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 25, 39}]
2023-10-07 13:52:31:781 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:781 LL1 LogManager.java:25 
DECISION 2 in rule instruction
2023-10-07 13:52:31:782 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 25, 39}]
2023-10-07 13:52:31:782 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:782 LL1 LogManager.java:25 
DECISION 3 in rule instruction
2023-10-07 13:52:31:783 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 25, 39}]
2023-10-07 13:52:31:783 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:783 LL1 LogManager.java:25 
DECISION 4 in rule instruction
2023-10-07 13:52:31:783 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 25, 39}]
2023-10-07 13:52:31:783 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:783 LL1 LogManager.java:25 
DECISION 5 in rule instruction
2023-10-07 13:52:31:784 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 25, 39}]
2023-10-07 13:52:31:784 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:784 LL1 LogManager.java:25 
DECISION 6 in rule instruction
2023-10-07 13:52:31:784 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 25, 39}]
2023-10-07 13:52:31:785 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:785 LL1 LogManager.java:25 
DECISION 7 in rule instruction
2023-10-07 13:52:31:785 LL1 LogManager.java:25 look=[8, 9, 39, 11, 13, 21, 18, 22, 8, 39, 39, 25, 8]
2023-10-07 13:52:31:785 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:785 LL1 LogManager.java:25 
DECISION 8 in rule blockinterno
2023-10-07 13:52:31:785 LL1 LogManager.java:25 look=[{8..9, 11, 13, 16..18, 21..23, 25, 39}, {14..15, 65}]
2023-10-07 13:52:31:785 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:786 LL1 LogManager.java:25 
DECISION 9 in rule instructionint
2023-10-07 13:52:31:786 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-07 13:52:31:786 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:786 LL1 LogManager.java:25 
DECISION 10 in rule instructionint
2023-10-07 13:52:31:786 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-07 13:52:31:786 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:787 LL1 LogManager.java:25 
DECISION 11 in rule instructionint
2023-10-07 13:52:31:787 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-07 13:52:31:787 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:787 LL1 LogManager.java:25 
DECISION 12 in rule instructionint
2023-10-07 13:52:31:787 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-07 13:52:31:788 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:788 LL1 LogManager.java:25 
DECISION 13 in rule instructionint
2023-10-07 13:52:31:788 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-07 13:52:31:788 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:788 LL1 LogManager.java:25 
DECISION 14 in rule instructionint
2023-10-07 13:52:31:789 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-07 13:52:31:789 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:789 LL1 LogManager.java:25 
DECISION 15 in rule instructionint
2023-10-07 13:52:31:789 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-07 13:52:31:789 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:789 LL1 LogManager.java:25 
DECISION 16 in rule instructionint
2023-10-07 13:52:31:790 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-07 13:52:31:790 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:790 LL1 LogManager.java:25 
DECISION 17 in rule instructionint
2023-10-07 13:52:31:790 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-07 13:52:31:790 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:790 LL1 LogManager.java:25 
DECISION 18 in rule instructionint
2023-10-07 13:52:31:791 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-07 13:52:31:791 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:791 LL1 LogManager.java:25 
DECISION 19 in rule instructionint
2023-10-07 13:52:31:791 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-07 13:52:31:791 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:791 LL1 LogManager.java:25 
DECISION 20 in rule instructionint
2023-10-07 13:52:31:791 LL1 LogManager.java:25 look=[8, 9, 39, 11, 13, 21, 18, 22, 17, 16, 23, 8, 39, 39, 25, 8]
2023-10-07 13:52:31:792 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:792 LL1 LogManager.java:25 
DECISION 21 in rule declavarible
2023-10-07 13:52:31:792 LL1 LogManager.java:25 look=[8, 8, 8]
2023-10-07 13:52:31:792 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:792 LL1 LogManager.java:25 
DECISION 22 in rule declaconstante
2023-10-07 13:52:31:792 LL1 LogManager.java:25 look=[9, 9]
2023-10-07 13:52:31:792 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:792 LL1 LogManager.java:25 
DECISION 23 in rule asignacionvariable
2023-10-07 13:52:31:792 LL1 LogManager.java:25 look=[39, 39, 39]
2023-10-07 13:52:31:792 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:792 LL1 LogManager.java:25 
DECISION 24 in rule tipodato
2023-10-07 13:52:31:792 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5]
2023-10-07 13:52:31:793 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:793 LL1 LogManager.java:25 
DECISION 25 in rule expr
2023-10-07 13:52:31:793 LL1 LogManager.java:25 look=[50, 46, 61, 37, 38, 6, 7, 40, 39, 10, 39, 39, 39, 1, 2]
2023-10-07 13:52:31:793 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:793 LL1 LogManager.java:25 
DECISION 26 in rule expr
2023-10-07 13:52:31:793 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null]
2023-10-07 13:52:31:794 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:794 LL1 LogManager.java:25 
DECISION 27 in rule expr
2023-10-07 13:52:31:794 LL1 LogManager.java:25 look=[null, null]
2023-10-07 13:52:31:794 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:794 LL1 LogManager.java:25 
DECISION 28 in rule sentenciaifelse
2023-10-07 13:52:31:794 LL1 LogManager.java:25 look=[11, 11, 11]
2023-10-07 13:52:31:794 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:794 LL1 LogManager.java:25 
DECISION 29 in rule switchcontrol
2023-10-07 13:52:31:794 LL1 LogManager.java:25 look=[15, 65]
2023-10-07 13:52:31:794 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:794 LL1 LogManager.java:25 
DECISION 30 in rule blockcase
2023-10-07 13:52:31:795 LL1 LogManager.java:25 look=[14, {15, 65}]
2023-10-07 13:52:31:795 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:795 LL1 LogManager.java:25 
DECISION 31 in rule forcontrol
2023-10-07 13:52:31:795 LL1 LogManager.java:25 look=[18, 18, 18]
2023-10-07 13:52:31:795 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:795 LL1 LogManager.java:25 
DECISION 32 in rule retornos
2023-10-07 13:52:31:795 LL1 LogManager.java:25 look=[23, 23]
2023-10-07 13:52:31:795 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:795 LL1 LogManager.java:25 
DECISION 33 in rule vectorcontrol
2023-10-07 13:52:31:795 LL1 LogManager.java:25 look=[8, 8, 8]
2023-10-07 13:52:31:795 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:795 LL1 LogManager.java:25 
DECISION 34 in rule blockparams
2023-10-07 13:52:31:796 LL1 LogManager.java:25 look=[{1..2, 6..7, 10, 37..40, 46, 50, 61, 67}, 71]
2023-10-07 13:52:31:796 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:796 LL1 LogManager.java:25 
DECISION 35 in rule bloqueparams
2023-10-07 13:52:31:796 LL1 LogManager.java:25 look=[67, {1..2, 6..7, 10, 37..40, 46, 50, 61}]
2023-10-07 13:52:31:796 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:796 LL1 LogManager.java:25 
DECISION 36 in rule vectoragregar
2023-10-07 13:52:31:796 LL1 LogManager.java:25 look=[39, 39, 39, 39, 39]
2023-10-07 13:52:31:796 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:797 LL1 LogManager.java:25 
DECISION 37 in rule vectorremover
2023-10-07 13:52:31:797 LL1 LogManager.java:25 look=[39, 39]
2023-10-07 13:52:31:797 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:797 LL1 LogManager.java:25 
DECISION 38 in rule vectoraccess
2023-10-07 13:52:31:797 LL1 LogManager.java:25 look=[39, 39, 39]
2023-10-07 13:52:31:797 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:797 LL1 LogManager.java:25 
DECISION 39 in rule matrizcontrol
2023-10-07 13:52:31:797 LL1 LogManager.java:25 look=[43, 42]
2023-10-07 13:52:31:797 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:797 LL1 LogManager.java:25 
DECISION 40 in rule tipomatriz
2023-10-07 13:52:31:797 LL1 LogManager.java:25 look=[70, 70]
2023-10-07 13:52:31:798 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:798 LL1 LogManager.java:25 
DECISION 41 in rule listavaloresmat
2023-10-07 13:52:31:798 LL1 LogManager.java:25 look=[70, 70]
2023-10-07 13:52:31:798 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:798 LL1 LogManager.java:25 
DECISION 42 in rule listavaloresmat2
2023-10-07 13:52:31:798 LL1 LogManager.java:25 look=[70, {1..2, 6..7, 10, 37..40, 46, 50, 61, 67}]
2023-10-07 13:52:31:798 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:798 LL1 LogManager.java:25 
DECISION 43 in rule listavaloresmat2
2023-10-07 13:52:31:798 LL1 LogManager.java:25 look=[null, 71]
2023-10-07 13:52:31:798 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:798 LL1 LogManager.java:25 
DECISION 44 in rule listaexpresions
2023-10-07 13:52:31:798 LL1 LogManager.java:25 look=[{1..2, 6..7, 10, 37..40, 46, 50, 61, 67}, null]
2023-10-07 13:52:31:798 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:799 LL1 LogManager.java:25 
DECISION 45 in rule listaexpresion
2023-10-07 13:52:31:799 LL1 LogManager.java:25 look=[67, {1..2, 6..7, 10, 37..40, 46, 50, 61}]
2023-10-07 13:52:31:799 LL1 LogManager.java:25 LL(1)? true
2023-10-07 13:52:31:799 LL1 LogManager.java:25 
DECISION 46 in rule simplematriz
2023-10-07 13:52:31:799 LL1 LogManager.java:25 look=[70, 70]
2023-10-07 13:52:31:799 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:799 LL1 LogManager.java:25 
DECISION 47 in rule listamatrizaddsubs
2023-10-07 13:52:31:799 LL1 LogManager.java:25 look=[70, null]
2023-10-07 13:52:31:799 LL1 LogManager.java:25 LL(1)? false
2023-10-07 13:52:31:804 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"

2023-10-07 13:52:31:820 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-10-07 13:52:31:820 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,21:9]
2023-10-07 13:52:31:821 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,21:17].[@-1,28:30='blk',<0>,21:23]
2023-10-07 13:52:31:822 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-10-07 13:52:31:823 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,27:5]
2023-10-07 13:52:31:824 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-10-07 13:52:31:824 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,34:13]
2023-10-07 13:52:31:824 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,34:27]
2023-10-07 13:52:31:826 action-translator LogManager.java:25 translate  $inst = $declavarible.decvbl
2023-10-07 13:52:31:826 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:30]
2023-10-07 13:52:31:827 action-translator LogManager.java:25 qattr [@-1,10:21='declavarible',<0>,41:38].[@-1,23:28='decvbl',<0>,41:51]
2023-10-07 13:52:31:827 action-translator LogManager.java:25 translate  $inst = $declaconstante.deccon
2023-10-07 13:52:31:827 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:32]
2023-10-07 13:52:31:827 action-translator LogManager.java:25 qattr [@-1,10:23='declaconstante',<0>,42:40].[@-1,25:30='deccon',<0>,42:55]
2023-10-07 13:52:31:827 action-translator LogManager.java:25 translate  $inst = $asignacionvariable.asgvbl
2023-10-07 13:52:31:827 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:36]
2023-10-07 13:52:31:827 action-translator LogManager.java:25 qattr [@-1,10:27='asignacionvariable',<0>,43:44].[@-1,29:34='asgvbl',<0>,43:63]
2023-10-07 13:52:31:827 action-translator LogManager.java:25 translate  $inst = $sentenciaifelse.myIfElse
2023-10-07 13:52:31:827 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:20]
2023-10-07 13:52:31:827 action-translator LogManager.java:25 qattr [@-1,10:24='sentenciaifelse',<0>,44:28].[@-1,26:33='myIfElse',<0>,44:44]
2023-10-07 13:52:31:827 action-translator LogManager.java:25 translate  $inst = $switchcontrol.mySwitch
2023-10-07 13:52:31:828 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:18]
2023-10-07 13:52:31:828 action-translator LogManager.java:25 qattr [@-1,10:22='switchcontrol',<0>,45:26].[@-1,24:31='mySwitch',<0>,45:40]
2023-10-07 13:52:31:828 action-translator LogManager.java:25 translate  $inst = $whilecontrol.whict
2023-10-07 13:52:31:828 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:17]
2023-10-07 13:52:31:828 action-translator LogManager.java:25 qattr [@-1,10:21='whilecontrol',<0>,46:25].[@-1,23:27='whict',<0>,46:38]
2023-10-07 13:52:31:828 action-translator LogManager.java:25 translate  $inst = $forcontrol.forct
2023-10-07 13:52:31:828 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:15]
2023-10-07 13:52:31:828 action-translator LogManager.java:25 qattr [@-1,10:19='forcontrol',<0>,47:23].[@-1,21:25='forct',<0>,47:34]
2023-10-07 13:52:31:828 action-translator LogManager.java:25 translate  $inst = $guardcontrol.guct
2023-10-07 13:52:31:828 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:17]
2023-10-07 13:52:31:828 action-translator LogManager.java:25 qattr [@-1,10:21='guardcontrol',<0>,48:25].[@-1,23:26='guct',<0>,48:38]
2023-10-07 13:52:31:829 action-translator LogManager.java:25 translate  $inst = $vectorcontrol.vect 
2023-10-07 13:52:31:829 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,49:31]
2023-10-07 13:52:31:829 action-translator LogManager.java:25 qattr [@-1,10:22='vectorcontrol',<0>,49:39].[@-1,24:27='vect',<0>,49:53]
2023-10-07 13:52:31:829 action-translator LogManager.java:25 translate  $inst = $vectoragregar.veadct 
2023-10-07 13:52:31:829 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,50:19]
2023-10-07 13:52:31:829 action-translator LogManager.java:25 qattr [@-1,10:22='vectoragregar',<0>,50:27].[@-1,24:29='veadct',<0>,50:41]
2023-10-07 13:52:31:829 action-translator LogManager.java:25 translate  $inst = $vectorremover.vermct 
2023-10-07 13:52:31:829 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,51:19]
2023-10-07 13:52:31:829 action-translator LogManager.java:25 qattr [@-1,10:22='vectorremover',<0>,51:27].[@-1,24:29='vermct',<0>,51:41]
2023-10-07 13:52:31:829 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-10-07 13:52:31:830 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,52:27]
2023-10-07 13:52:31:830 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,52:35].[@-1,20:23='prnt',<0>,52:45]
2023-10-07 13:52:31:830 action-translator LogManager.java:25 translate  $inst = $matrizcontrol.matct
2023-10-07 13:52:31:830 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,53:31]
2023-10-07 13:52:31:830 action-translator LogManager.java:25 qattr [@-1,10:22='matrizcontrol',<0>,53:39].[@-1,24:28='matct',<0>,53:53]
2023-10-07 13:52:31:831 action-translator LogManager.java:25 translate 
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  
2023-10-07 13:52:31:831 action-translator LogManager.java:25 attr [@-1,7:12='blkint',<0>,65:5]
2023-10-07 13:52:31:831 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    
2023-10-07 13:52:31:831 action-translator LogManager.java:25 attr [@-1,115:120='blkint',<0>,72:13]
2023-10-07 13:52:31:831 action-translator LogManager.java:25 attr [@-1,132:137='blkint',<0>,72:30]
2023-10-07 13:52:31:833 action-translator LogManager.java:25 translate  $insint = $declavarible.decvbl
2023-10-07 13:52:31:833 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,80:30]
2023-10-07 13:52:31:834 action-translator LogManager.java:25 qattr [@-1,12:23='declavarible',<0>,80:40].[@-1,25:30='decvbl',<0>,80:53]
2023-10-07 13:52:31:834 action-translator LogManager.java:25 translate  $insint = $declaconstante.deccon
2023-10-07 13:52:31:834 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,81:32]
2023-10-07 13:52:31:834 action-translator LogManager.java:25 qattr [@-1,12:25='declaconstante',<0>,81:42].[@-1,27:32='deccon',<0>,81:57]
2023-10-07 13:52:31:834 action-translator LogManager.java:25 translate  $insint = $asignacionvariable.asgvbl
2023-10-07 13:52:31:834 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,82:36]
2023-10-07 13:52:31:835 action-translator LogManager.java:25 qattr [@-1,12:29='asignacionvariable',<0>,82:46].[@-1,31:36='asgvbl',<0>,82:65]
2023-10-07 13:52:31:835 action-translator LogManager.java:25 translate  $insint = $sentenciaifelse.myIfElse
2023-10-07 13:52:31:835 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,83:20]
2023-10-07 13:52:31:835 action-translator LogManager.java:25 qattr [@-1,12:26='sentenciaifelse',<0>,83:30].[@-1,28:35='myIfElse',<0>,83:46]
2023-10-07 13:52:31:835 action-translator LogManager.java:25 translate  $insint = $switchcontrol.mySwitch
2023-10-07 13:52:31:835 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,84:18]
2023-10-07 13:52:31:835 action-translator LogManager.java:25 qattr [@-1,12:24='switchcontrol',<0>,84:28].[@-1,26:33='mySwitch',<0>,84:42]
2023-10-07 13:52:31:835 action-translator LogManager.java:25 translate  $insint = $whilecontrol.whict
2023-10-07 13:52:31:835 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,85:17]
2023-10-07 13:52:31:835 action-translator LogManager.java:25 qattr [@-1,12:23='whilecontrol',<0>,85:27].[@-1,25:29='whict',<0>,85:40]
2023-10-07 13:52:31:835 action-translator LogManager.java:25 translate  $insint = $forcontrol.forct
2023-10-07 13:52:31:835 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,86:15]
2023-10-07 13:52:31:835 action-translator LogManager.java:25 qattr [@-1,12:21='forcontrol',<0>,86:25].[@-1,23:27='forct',<0>,86:36]
2023-10-07 13:52:31:835 action-translator LogManager.java:25 translate  $insint = $guardcontrol.guct
2023-10-07 13:52:31:835 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,87:17]
2023-10-07 13:52:31:835 action-translator LogManager.java:25 qattr [@-1,12:23='guardcontrol',<0>,87:27].[@-1,25:28='guct',<0>,87:40]
2023-10-07 13:52:31:836 action-translator LogManager.java:25 translate  $insint = $continuee.coct
2023-10-07 13:52:31:836 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,88:27]
2023-10-07 13:52:31:836 action-translator LogManager.java:25 qattr [@-1,12:20='continuee',<0>,88:37].[@-1,22:25='coct',<0>,88:47]
2023-10-07 13:52:31:836 action-translator LogManager.java:25 translate  $insint = $breakk.brkct
2023-10-07 13:52:31:836 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,89:24]
2023-10-07 13:52:31:836 action-translator LogManager.java:25 qattr [@-1,12:17='breakk',<0>,89:34].[@-1,19:23='brkct',<0>,89:41]
2023-10-07 13:52:31:836 action-translator LogManager.java:25 translate  $insint = $retornos.rect 
2023-10-07 13:52:31:836 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,90:26]
2023-10-07 13:52:31:837 action-translator LogManager.java:25 qattr [@-1,12:19='retornos',<0>,90:36].[@-1,21:24='rect',<0>,90:45]
2023-10-07 13:52:31:837 action-translator LogManager.java:25 translate  $insint = $vectorcontrol.vect 
2023-10-07 13:52:31:837 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,91:31]
2023-10-07 13:52:31:837 action-translator LogManager.java:25 qattr [@-1,12:24='vectorcontrol',<0>,91:41].[@-1,26:29='vect',<0>,91:55]
2023-10-07 13:52:31:837 action-translator LogManager.java:25 translate  $insint = $vectoragregar.veadct 
2023-10-07 13:52:31:837 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,92:32]
2023-10-07 13:52:31:837 action-translator LogManager.java:25 qattr [@-1,12:24='vectoragregar',<0>,92:42].[@-1,26:31='veadct',<0>,92:56]
2023-10-07 13:52:31:837 action-translator LogManager.java:25 translate  $insint = $vectorremover.vermct 
2023-10-07 13:52:31:837 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,93:31]
2023-10-07 13:52:31:837 action-translator LogManager.java:25 qattr [@-1,12:24='vectorremover',<0>,93:41].[@-1,26:31='vermct',<0>,93:55]
2023-10-07 13:52:31:838 action-translator LogManager.java:25 translate  $insint = $printstmt.prnt
2023-10-07 13:52:31:838 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,94:27]
2023-10-07 13:52:31:838 action-translator LogManager.java:25 qattr [@-1,12:20='printstmt',<0>,94:37].[@-1,22:25='prnt',<0>,94:47]
2023-10-07 13:52:31:838 action-translator LogManager.java:25 translate  $insint = $matrizcontrol.matct
2023-10-07 13:52:31:838 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,95:31]
2023-10-07 13:52:31:838 action-translator LogManager.java:25 qattr [@-1,12:24='matrizcontrol',<0>,95:41].[@-1,26:30='matct',<0>,95:55]
2023-10-07 13:52:31:839 action-translator LogManager.java:25 translate  $decvbl = datosprimitivos.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)
2023-10-07 13:52:31:839 action-translator LogManager.java:25 attr [@-1,2:7='decvbl',<0>,110:46]
2023-10-07 13:52:31:839 action-translator LogManager.java:25 qattr [@-1,51:53='VAR',<0>,110:95].[@-1,55:58='line',<0>,110:99]
2023-10-07 13:52:31:840 action-translator LogManager.java:25 qattr [@-1,62:64='VAR',<0>,110:106].[@-1,66:68='pos',<0>,110:110]
2023-10-07 13:52:31:840 action-translator LogManager.java:25 qattr [@-1,72:80='ID_VALIDO',<0>,110:116].[@-1,82:85='text',<0>,110:126]
2023-10-07 13:52:31:841 action-translator LogManager.java:25 qattr [@-1,89:96='tipodato',<0>,110:133].[@-1,98:101='tipo',<0>,110:142]
2023-10-07 13:52:31:841 action-translator LogManager.java:25 qattr [@-1,105:108='expr',<0>,110:149].[@-1,110:110='e',<0>,110:154]
2023-10-07 13:52:31:841 action-translator LogManager.java:25 translate $decvbl = datosprimitivos.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)
2023-10-07 13:52:31:841 action-translator LogManager.java:25 attr [@-1,1:6='decvbl',<0>,111:25]
2023-10-07 13:52:31:841 action-translator LogManager.java:25 qattr [@-1,57:59='VAR',<0>,111:81].[@-1,61:64='line',<0>,111:85]
2023-10-07 13:52:31:841 action-translator LogManager.java:25 qattr [@-1,68:70='VAR',<0>,111:92].[@-1,72:74='pos',<0>,111:96]
2023-10-07 13:52:31:841 action-translator LogManager.java:25 qattr [@-1,78:86='ID_VALIDO',<0>,111:102].[@-1,88:91='text',<0>,111:112]
2023-10-07 13:52:31:841 action-translator LogManager.java:25 qattr [@-1,95:98='expr',<0>,111:119].[@-1,100:100='e',<0>,111:124]
2023-10-07 13:52:31:841 action-translator LogManager.java:25 translate $decvbl = datosprimitivos.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)
2023-10-07 13:52:31:841 action-translator LogManager.java:25 attr [@-1,1:6='decvbl',<0>,112:49]
2023-10-07 13:52:31:841 action-translator LogManager.java:25 qattr [@-1,56:58='VAR',<0>,112:104].[@-1,60:63='line',<0>,112:108]
2023-10-07 13:52:31:841 action-translator LogManager.java:25 qattr [@-1,67:69='VAR',<0>,112:115].[@-1,71:73='pos',<0>,112:119]
2023-10-07 13:52:31:841 action-translator LogManager.java:25 qattr [@-1,77:85='ID_VALIDO',<0>,112:125].[@-1,87:90='text',<0>,112:135]
2023-10-07 13:52:31:842 action-translator LogManager.java:25 qattr [@-1,94:101='tipodato',<0>,112:142].[@-1,103:106='tipo',<0>,112:151]
2023-10-07 13:52:31:843 action-translator LogManager.java:25 translate $deccon = datosprimitivos.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)
2023-10-07 13:52:31:843 action-translator LogManager.java:25 attr [@-1,1:6='deccon',<0>,117:45]
2023-10-07 13:52:31:843 action-translator LogManager.java:25 qattr [@-1,51:53='LET',<0>,117:95].[@-1,55:58='line',<0>,117:99]
2023-10-07 13:52:31:843 action-translator LogManager.java:25 qattr [@-1,62:64='LET',<0>,117:106].[@-1,66:68='pos',<0>,117:110]
2023-10-07 13:52:31:843 action-translator LogManager.java:25 qattr [@-1,72:80='ID_VALIDO',<0>,117:116].[@-1,82:85='text',<0>,117:126]
2023-10-07 13:52:31:843 action-translator LogManager.java:25 qattr [@-1,89:96='tipodato',<0>,117:133].[@-1,98:101='tipo',<0>,117:142]
2023-10-07 13:52:31:843 action-translator LogManager.java:25 qattr [@-1,105:108='expr',<0>,117:149].[@-1,110:110='e',<0>,117:154]
2023-10-07 13:52:31:843 action-translator LogManager.java:25 translate $deccon = datosprimitivos.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)
2023-10-07 13:52:31:843 action-translator LogManager.java:25 attr [@-1,1:6='deccon',<0>,118:25]
2023-10-07 13:52:31:843 action-translator LogManager.java:25 qattr [@-1,58:60='LET',<0>,118:82].[@-1,62:65='line',<0>,118:86]
2023-10-07 13:52:31:844 action-translator LogManager.java:25 qattr [@-1,69:71='LET',<0>,118:93].[@-1,73:75='pos',<0>,118:97]
2023-10-07 13:52:31:844 action-translator LogManager.java:25 qattr [@-1,79:87='ID_VALIDO',<0>,118:103].[@-1,89:92='text',<0>,118:113]
2023-10-07 13:52:31:844 action-translator LogManager.java:25 qattr [@-1,96:99='expr',<0>,118:120].[@-1,101:101='e',<0>,118:125]
2023-10-07 13:52:31:844 action-translator LogManager.java:25 translate  $asgvbl = sentencias.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-10-07 13:52:31:844 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,123:22]
2023-10-07 13:52:31:844 action-translator LogManager.java:25 qattr [@-1,45:53='ID_VALIDO',<0>,123:65].[@-1,55:58='line',<0>,123:75]
2023-10-07 13:52:31:844 action-translator LogManager.java:25 qattr [@-1,62:70='ID_VALIDO',<0>,123:82].[@-1,72:74='pos',<0>,123:92]
2023-10-07 13:52:31:844 action-translator LogManager.java:25 qattr [@-1,78:86='ID_VALIDO',<0>,123:98].[@-1,88:91='text',<0>,123:108]
2023-10-07 13:52:31:844 action-translator LogManager.java:25 qattr [@-1,95:98='expr',<0>,123:115].[@-1,100:100='e',<0>,123:120]
2023-10-07 13:52:31:845 action-translator LogManager.java:25 translate  $asgvbl = sentencias.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-10-07 13:52:31:845 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,124:24]
2023-10-07 13:52:31:845 action-translator LogManager.java:25 qattr [@-1,41:49='ID_VALIDO',<0>,124:63].[@-1,51:54='line',<0>,124:73]
2023-10-07 13:52:31:845 action-translator LogManager.java:25 qattr [@-1,58:66='ID_VALIDO',<0>,124:80].[@-1,68:70='pos',<0>,124:90]
2023-10-07 13:52:31:845 action-translator LogManager.java:25 qattr [@-1,74:82='ID_VALIDO',<0>,124:96].[@-1,84:87='text',<0>,124:106]
2023-10-07 13:52:31:845 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,124:113].[@-1,96:96='e',<0>,124:118]
2023-10-07 13:52:31:845 action-translator LogManager.java:25 translate  $asgvbl = sentencias.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-10-07 13:52:31:845 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,125:25]
2023-10-07 13:52:31:845 action-translator LogManager.java:25 qattr [@-1,42:50='ID_VALIDO',<0>,125:65].[@-1,52:55='line',<0>,125:75]
2023-10-07 13:52:31:845 action-translator LogManager.java:25 qattr [@-1,59:67='ID_VALIDO',<0>,125:82].[@-1,69:71='pos',<0>,125:92]
2023-10-07 13:52:31:845 action-translator LogManager.java:25 qattr [@-1,75:83='ID_VALIDO',<0>,125:98].[@-1,85:88='text',<0>,125:108]
2023-10-07 13:52:31:845 action-translator LogManager.java:25 qattr [@-1,92:95='expr',<0>,125:115].[@-1,97:97='e',<0>,125:120]
2023-10-07 13:52:31:846 action-translator LogManager.java:25 translate  $tipo = environment.INTEGER 
2023-10-07 13:52:31:846 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,130:8]
2023-10-07 13:52:31:846 action-translator LogManager.java:25 translate  $tipo = environment.FLOAT 
2023-10-07 13:52:31:846 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,131:10]
2023-10-07 13:52:31:846 action-translator LogManager.java:25 translate  $tipo = environment.STRING 
2023-10-07 13:52:31:846 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,132:11]
2023-10-07 13:52:31:846 action-translator LogManager.java:25 translate  $tipo = environment.BOOLEAN 
2023-10-07 13:52:31:846 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,133:9]
2023-10-07 13:52:31:847 action-translator LogManager.java:25 translate  $tipo = environment.CHARACTER 
2023-10-07 13:52:31:847 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,134:12]
2023-10-07 13:52:31:849 action-translator LogManager.java:25 translate 
2023-10-07 13:52:31:849 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) 
2023-10-07 13:52:31:849 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:70]
2023-10-07 13:52:31:850 action-translator LogManager.java:25 qattr [@-1,32:36='right',<0>,2:100].[@-1,38:42='start',<0>,2:106]
2023-10-07 13:52:31:850 action-translator LogManager.java:25 qattr [@-1,56:60='right',<0>,2:124].[@-1,62:66='start',<0>,2:130]
2023-10-07 13:52:31:850 action-translator LogManager.java:25 qattr [@-1,82:86='right',<0>,2:150].[@-1,88:88='e',<0>,2:156]
2023-10-07 13:52:31:851 action-translator LogManager.java:25 qattr [@-1,92:93='op',<0>,2:160].[@-1,95:98='text',<0>,2:163]
2023-10-07 13:52:31:851 action-translator LogManager.java:25 qattr [@-1,102:106='right',<0>,2:170].[@-1,108:108='e',<0>,2:176]
2023-10-07 13:52:31:851 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-10-07 13:52:31:851 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:79]
2023-10-07 13:52:31:851 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,3:84].[@-1,12:12='e',<0>,3:89]
2023-10-07 13:52:31:851 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    
2023-10-07 13:52:31:851 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,6:30].[@-1,39:42='text',<0>,6:37]
2023-10-07 13:52:31:851 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,7:43].[@-1,102:105='text',<0>,7:50]
2023-10-07 13:52:31:851 action-translator LogManager.java:25 attr [@-1,377:377='e',<0>,16:13]
2023-10-07 13:52:31:852 action-translator LogManager.java:25 qattr [@-1,407:412='NUMBER',<0>,16:43].[@-1,414:417='line',<0>,16:50]
2023-10-07 13:52:31:852 action-translator LogManager.java:25 qattr [@-1,420:425='NUMBER',<0>,16:56].[@-1,427:429='pos',<0>,16:63]
2023-10-07 13:52:31:852 action-translator LogManager.java:25 qattr [@-1,510:515='NUMBER',<0>,18:37].[@-1,517:520='text',<0>,18:44]
2023-10-07 13:52:31:852 action-translator LogManager.java:25 attr [@-1,613:613='e',<0>,22:13]
2023-10-07 13:52:31:852 action-translator LogManager.java:25 qattr [@-1,643:648='NUMBER',<0>,22:43].[@-1,650:653='line',<0>,22:50]
2023-10-07 13:52:31:852 action-translator LogManager.java:25 qattr [@-1,656:661='NUMBER',<0>,22:56].[@-1,663:665='pos',<0>,22:63]
2023-10-07 13:52:31:852 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-10-07 13:52:31:852 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,27:30].[@-1,39:42='text',<0>,27:37]
2023-10-07 13:52:31:852 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,28:43].[@-1,102:105='text',<0>,28:50]
2023-10-07 13:52:31:852 action-translator LogManager.java:25 attr [@-1,374:374='e',<0>,37:10]
2023-10-07 13:52:31:852 action-translator LogManager.java:25 qattr [@-1,404:409='NUMBER',<0>,37:40].[@-1,411:414='line',<0>,37:47]
2023-10-07 13:52:31:852 action-translator LogManager.java:25 qattr [@-1,417:422='NUMBER',<0>,37:53].[@-1,424:426='pos',<0>,37:60]
2023-10-07 13:52:31:852 action-translator LogManager.java:25 qattr [@-1,506:511='NUMBER',<0>,39:37].[@-1,513:516='text',<0>,39:44]
2023-10-07 13:52:31:852 action-translator LogManager.java:25 attr [@-1,621:621='e',<0>,43:13]
2023-10-07 13:52:31:852 action-translator LogManager.java:25 qattr [@-1,651:656='NUMBER',<0>,43:43].[@-1,658:661='line',<0>,43:50]
2023-10-07 13:52:31:852 action-translator LogManager.java:25 qattr [@-1,664:669='NUMBER',<0>,43:56].[@-1,671:673='pos',<0>,43:63]
2023-10-07 13:52:31:852 action-translator LogManager.java:25 translate 
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    
2023-10-07 13:52:31:852 action-translator LogManager.java:25 qattr [@-1,18:23='CADENA',<0>,48:16].[@-1,25:28='text',<0>,48:23]
2023-10-07 13:52:31:853 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,49:9]
2023-10-07 13:52:31:853 action-translator LogManager.java:25 qattr [@-1,70:75='CADENA',<0>,49:39].[@-1,77:80='line',<0>,49:46]
2023-10-07 13:52:31:853 action-translator LogManager.java:25 qattr [@-1,84:89='CADENA',<0>,49:53].[@-1,91:93='pos',<0>,49:60]
2023-10-07 13:52:31:853 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-10-07 13:52:31:853 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,51:32]
2023-10-07 13:52:31:853 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,51:62].[@-1,36:39='line',<0>,51:66]
2023-10-07 13:52:31:853 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,51:73].[@-1,47:49='pos',<0>,51:77]
2023-10-07 13:52:31:854 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-10-07 13:52:31:854 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,52:32]
2023-10-07 13:52:31:854 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,52:62].[@-1,36:39='line',<0>,52:66]
2023-10-07 13:52:31:854 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,52:73].[@-1,47:49='pos',<0>,52:77]
2023-10-07 13:52:31:854 action-translator LogManager.java:25 translate  
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    
2023-10-07 13:52:31:854 action-translator LogManager.java:25 qattr [@-1,19:27='CHARACTER',<0>,55:16].[@-1,29:32='text',<0>,55:26]
2023-10-07 13:52:31:854 action-translator LogManager.java:25 attr [@-1,44:44='e',<0>,56:9]
2023-10-07 13:52:31:854 action-translator LogManager.java:25 qattr [@-1,74:82='CHARACTER',<0>,56:39].[@-1,84:87='line',<0>,56:49]
2023-10-07 13:52:31:854 action-translator LogManager.java:25 qattr [@-1,91:99='CHARACTER',<0>,56:56].[@-1,101:103='pos',<0>,56:66]
2023-10-07 13:52:31:854 action-translator LogManager.java:25 translate 
        id := $ID_VALIDO.text
        $e = sentencias.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    
2023-10-07 13:52:31:854 action-translator LogManager.java:25 qattr [@-1,17:25='ID_VALIDO',<0>,60:15].[@-1,27:30='text',<0>,60:25]
2023-10-07 13:52:31:854 action-translator LogManager.java:25 attr [@-1,42:42='e',<0>,61:9]
2023-10-07 13:52:31:854 action-translator LogManager.java:25 qattr [@-1,68:76='ID_VALIDO',<0>,61:35].[@-1,78:81='line',<0>,61:45]
2023-10-07 13:52:31:854 action-translator LogManager.java:25 qattr [@-1,84:92='ID_VALIDO',<0>,61:51].[@-1,94:96='pos',<0>,61:61]
2023-10-07 13:52:31:854 action-translator LogManager.java:25 translate $e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)
2023-10-07 13:52:31:854 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,63:32]
2023-10-07 13:52:31:855 action-translator LogManager.java:25 qattr [@-1,31:34='NULO',<0>,63:62].[@-1,36:39='line',<0>,63:67]
2023-10-07 13:52:31:855 action-translator LogManager.java:25 qattr [@-1,43:46='NULO',<0>,63:74].[@-1,48:50='pos',<0>,63:79]
2023-10-07 13:52:31:855 action-translator LogManager.java:25 qattr [@-1,54:57='NULO',<0>,63:85].[@-1,59:62='text',<0>,63:90]
2023-10-07 13:52:31:855 action-translator LogManager.java:25 translate  $e = $vectorvacio.veemct
2023-10-07 13:52:31:855 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,64:40]
2023-10-07 13:52:31:855 action-translator LogManager.java:25 qattr [@-1,7:17='vectorvacio',<0>,64:45].[@-1,19:24='veemct',<0>,64:57]
2023-10-07 13:52:31:855 action-translator LogManager.java:25 translate  $e = $vectorcount.vecnct
2023-10-07 13:52:31:855 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,65:40]
2023-10-07 13:52:31:855 action-translator LogManager.java:25 qattr [@-1,7:17='vectorcount',<0>,65:45].[@-1,19:24='vecnct',<0>,65:57]
2023-10-07 13:52:31:855 action-translator LogManager.java:25 translate  $e = $vectoraccess.vepposct
2023-10-07 13:52:31:855 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,66:41]
2023-10-07 13:52:31:855 action-translator LogManager.java:25 qattr [@-1,7:18='vectoraccess',<0>,66:46].[@-1,20:27='vepposct',<0>,66:59]
2023-10-07 13:52:31:855 action-translator LogManager.java:25 translate  $e = $intembebida.intemb
2023-10-07 13:52:31:856 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,67:40]
2023-10-07 13:52:31:856 action-translator LogManager.java:25 qattr [@-1,7:17='intembebida',<0>,67:45].[@-1,19:24='intemb',<0>,67:57]
2023-10-07 13:52:31:856 action-translator LogManager.java:25 translate  $e = $floatembebida.floemb
2023-10-07 13:52:31:856 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,68:42]
2023-10-07 13:52:31:856 action-translator LogManager.java:25 qattr [@-1,7:19='floatembebida',<0>,68:47].[@-1,21:26='floemb',<0>,68:61]
2023-10-07 13:52:31:856 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-10-07 13:52:31:857 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-07 13:52:31:857 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,71:120]
2023-10-07 13:52:31:857 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,71:150].[@-1,37:41='start',<0>,71:155]
2023-10-07 13:52:31:857 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,71:173].[@-1,60:64='start',<0>,71:178]
2023-10-07 13:52:31:857 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,71:198].[@-1,85:85='e',<0>,71:203]
2023-10-07 13:52:31:857 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,71:207].[@-1,92:95='text',<0>,71:210]
2023-10-07 13:52:31:857 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,71:217].[@-1,105:105='e',<0>,71:223]
2023-10-07 13:52:31:857 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-10-07 13:52:31:857 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-07 13:52:31:857 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,72:149]
2023-10-07 13:52:31:858 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,72:179].[@-1,37:41='start',<0>,72:184]
2023-10-07 13:52:31:858 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,72:202].[@-1,60:64='start',<0>,72:207]
2023-10-07 13:52:31:858 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,72:227].[@-1,85:85='e',<0>,72:232]
2023-10-07 13:52:31:858 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,72:236].[@-1,92:95='text',<0>,72:239]
2023-10-07 13:52:31:858 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,72:246].[@-1,105:105='e',<0>,72:252]
2023-10-07 13:52:31:858 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-10-07 13:52:31:859 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-07 13:52:31:859 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,73:149]
2023-10-07 13:52:31:859 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,73:179].[@-1,37:41='start',<0>,73:184]
2023-10-07 13:52:31:859 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,73:202].[@-1,60:64='start',<0>,73:207]
2023-10-07 13:52:31:859 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,73:227].[@-1,85:85='e',<0>,73:232]
2023-10-07 13:52:31:859 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,73:236].[@-1,92:95='text',<0>,73:239]
2023-10-07 13:52:31:859 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,73:246].[@-1,105:105='e',<0>,73:252]
2023-10-07 13:52:31:859 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-10-07 13:52:31:859 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-07 13:52:31:859 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,74:154]
2023-10-07 13:52:31:859 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,74:184].[@-1,37:41='start',<0>,74:189]
2023-10-07 13:52:31:859 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,74:207].[@-1,60:64='start',<0>,74:212]
2023-10-07 13:52:31:859 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,74:232].[@-1,85:85='e',<0>,74:237]
2023-10-07 13:52:31:859 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,74:241].[@-1,92:95='text',<0>,74:244]
2023-10-07 13:52:31:859 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,74:251].[@-1,105:105='e',<0>,74:257]
2023-10-07 13:52:31:859 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-10-07 13:52:31:860 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-07 13:52:31:860 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,75:154]
2023-10-07 13:52:31:860 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,75:184].[@-1,37:41='start',<0>,75:189]
2023-10-07 13:52:31:860 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,75:207].[@-1,60:64='start',<0>,75:212]
2023-10-07 13:52:31:860 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,75:232].[@-1,85:85='e',<0>,75:237]
2023-10-07 13:52:31:860 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,75:241].[@-1,92:95='text',<0>,75:244]
2023-10-07 13:52:31:860 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,75:251].[@-1,105:105='e',<0>,75:257]
2023-10-07 13:52:31:860 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-10-07 13:52:31:860 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-07 13:52:31:860 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,76:151]
2023-10-07 13:52:31:860 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,76:181].[@-1,37:41='start',<0>,76:186]
2023-10-07 13:52:31:860 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,76:204].[@-1,60:64='start',<0>,76:209]
2023-10-07 13:52:31:860 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,76:229].[@-1,85:85='e',<0>,76:234]
2023-10-07 13:52:31:860 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,76:238].[@-1,92:95='text',<0>,76:241]
2023-10-07 13:52:31:860 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,76:248].[@-1,105:105='e',<0>,76:254]
2023-10-07 13:52:31:860 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-10-07 13:52:31:860 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-07 13:52:31:861 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,77:127]
2023-10-07 13:52:31:861 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,77:157].[@-1,37:41='start',<0>,77:162]
2023-10-07 13:52:31:861 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,77:180].[@-1,60:64='start',<0>,77:185]
2023-10-07 13:52:31:861 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,77:205].[@-1,85:85='e',<0>,77:210]
2023-10-07 13:52:31:861 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,77:214].[@-1,92:95='text',<0>,77:217]
2023-10-07 13:52:31:861 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,77:224].[@-1,105:105='e',<0>,77:230]
2023-10-07 13:52:31:861 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-10-07 13:52:31:861 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-07 13:52:31:861 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,78:126]
2023-10-07 13:52:31:861 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,78:156].[@-1,37:41='start',<0>,78:161]
2023-10-07 13:52:31:861 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,78:179].[@-1,60:64='start',<0>,78:184]
2023-10-07 13:52:31:861 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,78:204].[@-1,85:85='e',<0>,78:209]
2023-10-07 13:52:31:861 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,78:213].[@-1,92:95='text',<0>,78:216]
2023-10-07 13:52:31:861 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,78:223].[@-1,105:105='e',<0>,78:229]
2023-10-07 13:52:31:862 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-10-07 13:52:31:862 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-10-07 13:52:31:862 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-10-07 13:52:31:862 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-10-07 13:52:31:862 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-10-07 13:52:31:862 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-10-07 13:52:31:862 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-10-07 13:52:31:862 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-10-07 13:52:31:864 action-translator LogManager.java:25 translate  $myIfElse = sentencias.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)
2023-10-07 13:52:31:864 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,221:43]
2023-10-07 13:52:31:864 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,221:81].[@-1,43:46='line',<0>,221:84]
2023-10-07 13:52:31:864 action-translator LogManager.java:25 qattr [@-1,50:51='IF',<0>,221:91].[@-1,53:55='pos',<0>,221:94]
2023-10-07 13:52:31:864 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,221:100].[@-1,64:64='e',<0>,221:105]
2023-10-07 13:52:31:864 action-translator LogManager.java:25 qattr [@-1,68:79='blockinterno',<0>,221:109].[@-1,81:86='blkint',<0>,221:122]
2023-10-07 13:52:31:864 action-translator LogManager.java:25 translate  $myIfElse = sentencias.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)
2023-10-07 13:52:31:864 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,222:91]
2023-10-07 13:52:31:864 action-translator LogManager.java:25 qattr [@-1,44:45='IF',<0>,222:133].[@-1,47:50='line',<0>,222:136]
2023-10-07 13:52:31:864 action-translator LogManager.java:25 qattr [@-1,54:55='IF',<0>,222:143].[@-1,57:59='pos',<0>,222:146]
2023-10-07 13:52:31:864 action-translator LogManager.java:25 qattr [@-1,63:66='expr',<0>,222:152].[@-1,68:68='e',<0>,222:157]
2023-10-07 13:52:31:864 action-translator LogManager.java:25 qattr [@-1,72:75='ifop',<0>,222:161].[@-1,77:82='blkint',<0>,222:166]
2023-10-07 13:52:31:864 action-translator LogManager.java:25 qattr [@-1,87:92='elseop',<0>,222:176].[@-1,94:99='blkint',<0>,222:183]
2023-10-07 13:52:31:865 action-translator LogManager.java:25 translate  $myIfElse = sentencias.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)
2023-10-07 13:52:31:865 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,223:64]
2023-10-07 13:52:31:865 action-translator LogManager.java:25 qattr [@-1,46:47='IF',<0>,223:108].[@-1,49:52='line',<0>,223:111]
2023-10-07 13:52:31:865 action-translator LogManager.java:25 qattr [@-1,56:57='IF',<0>,223:118].[@-1,59:61='pos',<0>,223:121]
2023-10-07 13:52:31:865 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,223:127].[@-1,70:70='e',<0>,223:132]
2023-10-07 13:52:31:865 action-translator LogManager.java:25 qattr [@-1,74:85='blockinterno',<0>,223:136].[@-1,87:92='blkint',<0>,223:149]
2023-10-07 13:52:31:865 action-translator LogManager.java:25 qattr [@-1,96:110='sentenciaifelse',<0>,223:158].[@-1,112:119='myIfElse',<0>,223:174]
2023-10-07 13:52:31:866 action-translator LogManager.java:25 translate 
    if ($DEFAULT != nil) {
        $mySwitch = sentencias.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = sentencias.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }

2023-10-07 13:52:31:866 action-translator LogManager.java:25 attr [@-1,11:17='DEFAULT',<0>,230:9]
2023-10-07 13:52:31:866 action-translator LogManager.java:25 attr [@-1,39:46='mySwitch',<0>,231:9]
2023-10-07 13:52:31:867 action-translator LogManager.java:25 qattr [@-1,88:93='SWITCH',<0>,231:58].[@-1,95:98='line',<0>,231:65]
2023-10-07 13:52:31:867 action-translator LogManager.java:25 qattr [@-1,102:107='SWITCH',<0>,231:72].[@-1,109:111='pos',<0>,231:79]
2023-10-07 13:52:31:867 action-translator LogManager.java:25 qattr [@-1,115:118='expr',<0>,231:85].[@-1,120:120='e',<0>,231:90]
2023-10-07 13:52:31:867 action-translator LogManager.java:25 qattr [@-1,124:132='blockcase',<0>,231:94].[@-1,134:140='blkcase',<0>,231:104]
2023-10-07 13:52:31:867 action-translator LogManager.java:25 qattr [@-1,144:155='blockinterno',<0>,231:114].[@-1,157:162='blkint',<0>,231:127]
2023-10-07 13:52:31:867 action-translator LogManager.java:25 attr [@-1,189:196='mySwitch',<0>,233:9]
2023-10-07 13:52:31:867 action-translator LogManager.java:25 qattr [@-1,231:236='SWITCH',<0>,233:51].[@-1,238:241='line',<0>,233:58]
2023-10-07 13:52:31:867 action-translator LogManager.java:25 qattr [@-1,245:250='SWITCH',<0>,233:65].[@-1,252:254='pos',<0>,233:72]
2023-10-07 13:52:31:867 action-translator LogManager.java:25 qattr [@-1,258:261='expr',<0>,233:78].[@-1,263:263='e',<0>,233:83]
2023-10-07 13:52:31:868 action-translator LogManager.java:25 qattr [@-1,267:275='blockcase',<0>,233:87].[@-1,277:283='blkcase',<0>,233:97]
2023-10-07 13:52:31:868 action-translator LogManager.java:25 translate 
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext

2023-10-07 13:52:31:868 action-translator LogManager.java:25 attr [@-1,7:13='blkcase',<0>,240:5]
2023-10-07 13:52:31:869 action-translator LogManager.java:25 translate 
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }

2023-10-07 13:52:31:869 action-translator LogManager.java:25 attr [@-1,100:106='blkcase',<0>,247:9]
2023-10-07 13:52:31:869 action-translator LogManager.java:25 attr [@-1,118:124='blkcase',<0>,247:27]
2023-10-07 13:52:31:870 action-translator LogManager.java:25 translate 
    $blocas=sentencias.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)

2023-10-07 13:52:31:870 action-translator LogManager.java:25 attr [@-1,7:12='blocas',<0>,255:5]
2023-10-07 13:52:31:870 action-translator LogManager.java:25 qattr [@-1,49:52='CASE',<0>,255:47].[@-1,54:57='line',<0>,255:52]
2023-10-07 13:52:31:870 action-translator LogManager.java:25 qattr [@-1,61:64='CASE',<0>,255:59].[@-1,66:68='pos',<0>,255:64]
2023-10-07 13:52:31:870 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,255:70].[@-1,77:77='e',<0>,255:75]
2023-10-07 13:52:31:870 action-translator LogManager.java:25 qattr [@-1,81:92='blockinterno',<0>,255:79].[@-1,94:99='blkint',<0>,255:92]
2023-10-07 13:52:31:870 action-translator LogManager.java:25 translate  $whict = sentencias.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)
2023-10-07 13:52:31:870 action-translator LogManager.java:25 attr [@-1,2:6='whict',<0>,261:46]
2023-10-07 13:52:31:871 action-translator LogManager.java:25 qattr [@-1,40:44='WHILE',<0>,261:84].[@-1,46:49='line',<0>,261:90]
2023-10-07 13:52:31:871 action-translator LogManager.java:25 qattr [@-1,53:57='WHILE',<0>,261:97].[@-1,59:61='pos',<0>,261:103]
2023-10-07 13:52:31:871 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,261:109].[@-1,70:70='e',<0>,261:114]
2023-10-07 13:52:31:871 action-translator LogManager.java:25 qattr [@-1,74:85='blockinterno',<0>,261:118].[@-1,87:92='blkint',<0>,261:131]
2023-10-07 13:52:31:872 action-translator LogManager.java:25 translate  $forct = sentencias.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)
2023-10-07 13:52:31:872 action-translator LogManager.java:25 attr [@-1,2:6='forct',<0>,265:79]
2023-10-07 13:52:31:872 action-translator LogManager.java:25 qattr [@-1,43:45='FOR',<0>,265:120].[@-1,47:50='line',<0>,265:124]
2023-10-07 13:52:31:872 action-translator LogManager.java:25 qattr [@-1,54:56='FOR',<0>,265:131].[@-1,58:60='pos',<0>,265:135]
2023-10-07 13:52:31:872 action-translator LogManager.java:25 qattr [@-1,64:72='ID_VALIDO',<0>,265:141].[@-1,74:77='text',<0>,265:151]
2023-10-07 13:52:31:872 action-translator LogManager.java:25 qattr [@-1,81:84='left',<0>,265:158].[@-1,86:86='e',<0>,265:163]
2023-10-07 13:52:31:873 action-translator LogManager.java:25 qattr [@-1,90:94='right',<0>,265:167].[@-1,96:96='e',<0>,265:173]
2023-10-07 13:52:31:873 action-translator LogManager.java:25 qattr [@-1,99:110='blockinterno',<0>,265:176].[@-1,112:117='blkint',<0>,265:189]
2023-10-07 13:52:31:873 action-translator LogManager.java:25 translate  $forct = sentencias.NewSentenciaForId($FOR.line, $FOR.pos, $op1.text, $op2.text, $blockinterno.blkint)
2023-10-07 13:52:31:873 action-translator LogManager.java:25 attr [@-1,2:6='forct',<0>,266:70]
2023-10-07 13:52:31:873 action-translator LogManager.java:25 qattr [@-1,40:42='FOR',<0>,266:108].[@-1,44:47='line',<0>,266:112]
2023-10-07 13:52:31:873 action-translator LogManager.java:25 qattr [@-1,51:53='FOR',<0>,266:119].[@-1,55:57='pos',<0>,266:123]
2023-10-07 13:52:31:873 action-translator LogManager.java:25 qattr [@-1,61:63='op1',<0>,266:129].[@-1,65:68='text',<0>,266:133]
2023-10-07 13:52:31:873 action-translator LogManager.java:25 qattr [@-1,72:74='op2',<0>,266:140].[@-1,76:79='text',<0>,266:144]
2023-10-07 13:52:31:873 action-translator LogManager.java:25 qattr [@-1,83:94='blockinterno',<0>,266:151].[@-1,96:101='blkint',<0>,266:164]
2023-10-07 13:52:31:873 action-translator LogManager.java:25 translate  $forct = sentencias.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)
2023-10-07 13:52:31:873 action-translator LogManager.java:25 attr [@-1,2:6='forct',<0>,267:57]
2023-10-07 13:52:31:873 action-translator LogManager.java:25 qattr [@-1,44:46='FOR',<0>,267:99].[@-1,48:51='line',<0>,267:103]
2023-10-07 13:52:31:873 action-translator LogManager.java:25 qattr [@-1,55:57='FOR',<0>,267:110].[@-1,59:61='pos',<0>,267:114]
2023-10-07 13:52:31:873 action-translator LogManager.java:25 qattr [@-1,65:73='ID_VALIDO',<0>,267:120].[@-1,75:78='text',<0>,267:130]
2023-10-07 13:52:31:874 action-translator LogManager.java:25 qattr [@-1,82:85='expr',<0>,267:137].[@-1,87:87='e',<0>,267:142]
2023-10-07 13:52:31:874 action-translator LogManager.java:25 qattr [@-1,91:102='blockinterno',<0>,267:146].[@-1,104:109='blkint',<0>,267:159]
2023-10-07 13:52:31:875 action-translator LogManager.java:25 translate  
    $guct = sentencias.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)

2023-10-07 13:52:31:875 action-translator LogManager.java:25 attr [@-1,8:11='guct',<0>,274:5]
2023-10-07 13:52:31:875 action-translator LogManager.java:25 qattr [@-1,45:49='GUARD',<0>,274:42].[@-1,51:54='line',<0>,274:48]
2023-10-07 13:52:31:875 action-translator LogManager.java:25 qattr [@-1,58:62='GUARD',<0>,274:55].[@-1,64:66='pos',<0>,274:61]
2023-10-07 13:52:31:875 action-translator LogManager.java:25 qattr [@-1,70:73='expr',<0>,274:67].[@-1,75:75='e',<0>,274:72]
2023-10-07 13:52:31:875 action-translator LogManager.java:25 qattr [@-1,79:90='blockinterno',<0>,274:76].[@-1,92:97='blkint',<0>,274:89]
2023-10-07 13:52:31:875 action-translator LogManager.java:25 translate $coct = sentencias.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)
2023-10-07 13:52:31:875 action-translator LogManager.java:25 attr [@-1,1:4='coct',<0>,280:12]
2023-10-07 13:52:31:875 action-translator LogManager.java:25 qattr [@-1,45:52='CONTINUE',<0>,280:56].[@-1,54:57='line',<0>,280:65]
2023-10-07 13:52:31:875 action-translator LogManager.java:25 qattr [@-1,61:68='CONTINUE',<0>,280:72].[@-1,70:72='pos',<0>,280:81]
2023-10-07 13:52:31:876 action-translator LogManager.java:25 translate  $brkct = sentencias.NewTransferenciaBreak($BREAK.line, $BREAK.pos)
2023-10-07 13:52:31:876 action-translator LogManager.java:25 attr [@-1,2:6='brkct',<0>,284:10]
2023-10-07 13:52:31:876 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,284:52].[@-1,50:53='line',<0>,284:58]
2023-10-07 13:52:31:877 action-translator LogManager.java:25 qattr [@-1,57:61='BREAK',<0>,284:65].[@-1,63:65='pos',<0>,284:71]
2023-10-07 13:52:31:877 action-translator LogManager.java:25 translate 
    $rect = sentencias.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);

2023-10-07 13:52:31:877 action-translator LogManager.java:25 setAttr [@-1,7:10='rect',<0>,290:5] [@-1,13:83=' sentencias.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e)',<0>,290:11]
2023-10-07 13:52:31:877 action-translator LogManager.java:25 translate  sentencias.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e)
2023-10-07 13:52:31:877 action-translator LogManager.java:25 qattr [@-1,39:44='RETURN',<0>,289:39].[@-1,46:49='line',<0>,289:46]
2023-10-07 13:52:31:877 action-translator LogManager.java:25 qattr [@-1,53:58='RETURN',<0>,289:53].[@-1,60:62='pos',<0>,289:60]
2023-10-07 13:52:31:878 action-translator LogManager.java:25 qattr [@-1,66:67='op',<0>,289:66].[@-1,69:69='e',<0>,289:69]
2023-10-07 13:52:31:878 action-translator LogManager.java:25 translate 
    $rect = sentencias.NewTransferenciaReturn($RETURN.line, $RETURN.pos);

2023-10-07 13:52:31:878 action-translator LogManager.java:25 setAttr [@-1,7:10='rect',<0>,294:5] [@-1,13:73=' sentencias.NewTransferenciaReturn($RETURN.line, $RETURN.pos)',<0>,294:11]
2023-10-07 13:52:31:878 action-translator LogManager.java:25 translate  sentencias.NewTransferenciaReturn($RETURN.line, $RETURN.pos)
2023-10-07 13:52:31:878 action-translator LogManager.java:25 qattr [@-1,36:41='RETURN',<0>,293:36].[@-1,43:46='line',<0>,293:43]
2023-10-07 13:52:31:878 action-translator LogManager.java:25 qattr [@-1,50:55='RETURN',<0>,293:50].[@-1,57:59='pos',<0>,293:57]
2023-10-07 13:52:31:879 action-translator LogManager.java:25 translate  $vect = datoscompuestos.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)
2023-10-07 13:52:31:879 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,301:89]
2023-10-07 13:52:31:879 action-translator LogManager.java:25 qattr [@-1,53:55='VAR',<0>,301:140].[@-1,57:60='line',<0>,301:144]
2023-10-07 13:52:31:879 action-translator LogManager.java:25 qattr [@-1,64:66='VAR',<0>,301:151].[@-1,68:70='pos',<0>,301:155]
2023-10-07 13:52:31:879 action-translator LogManager.java:25 qattr [@-1,74:82='ID_VALIDO',<0>,301:161].[@-1,84:87='text',<0>,301:171]
2023-10-07 13:52:31:879 action-translator LogManager.java:25 qattr [@-1,92:99='tipodato',<0>,301:179].[@-1,101:104='tipo',<0>,301:188]
2023-10-07 13:52:31:879 action-translator LogManager.java:25 qattr [@-1,108:118='blockparams',<0>,301:195].[@-1,120:125='blkpar',<0>,301:207]
2023-10-07 13:52:31:879 action-translator LogManager.java:25 translate  $vect = datoscompuestos.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)
2023-10-07 13:52:31:879 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,302:77]
2023-10-07 13:52:31:880 action-translator LogManager.java:25 qattr [@-1,56:58='VAR',<0>,302:131].[@-1,60:63='line',<0>,302:135]
2023-10-07 13:52:31:880 action-translator LogManager.java:25 qattr [@-1,67:69='VAR',<0>,302:142].[@-1,71:73='pos',<0>,302:146]
2023-10-07 13:52:31:880 action-translator LogManager.java:25 qattr [@-1,77:85='ID_VALIDO',<0>,302:152].[@-1,87:90='text',<0>,302:162]
2023-10-07 13:52:31:880 action-translator LogManager.java:25 qattr [@-1,95:102='tipodato',<0>,302:170].[@-1,104:107='tipo',<0>,302:179]
2023-10-07 13:52:31:880 action-translator LogManager.java:25 translate  $vect = datoscompuestos.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)
2023-10-07 13:52:31:880 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,303:79]
2023-10-07 13:52:31:880 action-translator LogManager.java:25 qattr [@-1,50:52='VAR',<0>,303:127].[@-1,54:57='line',<0>,303:131]
2023-10-07 13:52:31:880 action-translator LogManager.java:25 qattr [@-1,61:63='VAR',<0>,303:138].[@-1,65:67='pos',<0>,303:142]
2023-10-07 13:52:31:880 action-translator LogManager.java:25 qattr [@-1,71:74='prin',<0>,303:148].[@-1,76:79='text',<0>,303:153]
2023-10-07 13:52:31:880 action-translator LogManager.java:25 qattr [@-1,84:91='tipodato',<0>,303:161].[@-1,93:96='tipo',<0>,303:170]
2023-10-07 13:52:31:880 action-translator LogManager.java:25 qattr [@-1,100:103='secu',<0>,303:177].[@-1,105:108='text',<0>,303:182]
2023-10-07 13:52:31:880 action-translator LogManager.java:25 translate 
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext

2023-10-07 13:52:31:880 action-translator LogManager.java:25 attr [@-1,7:12='blkpar',<0>,308:5]
2023-10-07 13:52:31:881 action-translator LogManager.java:25 translate 
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }

2023-10-07 13:52:31:881 action-translator LogManager.java:25 attr [@-1,102:107='blkpar',<0>,315:9]
2023-10-07 13:52:31:881 action-translator LogManager.java:25 attr [@-1,119:124='blkpar',<0>,315:26]
2023-10-07 13:52:31:882 action-translator LogManager.java:25 translate 
    $blopas = datoscompuestos.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)

2023-10-07 13:52:31:882 action-translator LogManager.java:25 attr [@-1,7:12='blopas',<0>,323:5]
2023-10-07 13:52:31:882 action-translator LogManager.java:25 qattr [@-1,54:57='COMA',<0>,323:52].[@-1,59:62='line',<0>,323:57]
2023-10-07 13:52:31:882 action-translator LogManager.java:25 qattr [@-1,66:69='COMA',<0>,323:64].[@-1,71:73='pos',<0>,323:69]
2023-10-07 13:52:31:882 action-translator LogManager.java:25 qattr [@-1,77:80='expr',<0>,323:75].[@-1,82:82='e',<0>,323:80]
2023-10-07 13:52:31:882 action-translator LogManager.java:25 translate 
    $blopas = datoscompuestos.NewArregloParametro($expr.e)

2023-10-07 13:52:31:882 action-translator LogManager.java:25 attr [@-1,7:12='blopas',<0>,327:5]
2023-10-07 13:52:31:882 action-translator LogManager.java:25 qattr [@-1,53:56='expr',<0>,327:51].[@-1,58:58='e',<0>,327:56]
2023-10-07 13:52:31:883 action-translator LogManager.java:25 translate  $veadct = datoscompuestos.NewArregloAppend($ID_VALIDO.text , $expr.e)
2023-10-07 13:52:31:883 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,331:46]
2023-10-07 13:52:31:883 action-translator LogManager.java:25 qattr [@-1,45:53='ID_VALIDO',<0>,331:89].[@-1,55:58='text',<0>,331:99]
2023-10-07 13:52:31:883 action-translator LogManager.java:25 qattr [@-1,63:66='expr',<0>,331:107].[@-1,68:68='e',<0>,331:112]
2023-10-07 13:52:31:884 action-translator LogManager.java:25 translate  $veadct = datoscompuestos.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)
2023-10-07 13:52:31:885 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,332:91]
2023-10-07 13:52:31:885 action-translator LogManager.java:25 qattr [@-1,52:55='prin',<0>,332:141].[@-1,57:60='text',<0>,332:146]
2023-10-07 13:52:31:885 action-translator LogManager.java:25 qattr [@-1,65:67='pop',<0>,332:154].[@-1,69:69='e',<0>,332:158]
2023-10-07 13:52:31:885 action-translator LogManager.java:25 qattr [@-1,73:76='secu',<0>,332:162].[@-1,78:81='text',<0>,332:167]
2023-10-07 13:52:31:886 action-translator LogManager.java:25 qattr [@-1,85:87='sop',<0>,332:174].[@-1,89:89='e',<0>,332:178]
2023-10-07 13:52:31:886 action-translator LogManager.java:25 translate  $veadct = datoscompuestos.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) 
2023-10-07 13:52:31:886 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,334:2]
2023-10-07 13:52:31:887 action-translator LogManager.java:25 qattr [@-1,52:60='ID_VALIDO',<0>,334:52].[@-1,62:65='text',<0>,334:62]
2023-10-07 13:52:31:887 action-translator LogManager.java:25 qattr [@-1,69:71='op1',<0>,334:69].[@-1,73:73='e',<0>,334:73]
2023-10-07 13:52:31:887 action-translator LogManager.java:25 qattr [@-1,77:79='op2',<0>,334:77].[@-1,81:81='e',<0>,334:81]
2023-10-07 13:52:31:887 action-translator LogManager.java:25 qattr [@-1,85:102='listamatrizaddsubs',<0>,334:85].[@-1,104:113='blklimatas',<0>,334:104]
2023-10-07 13:52:31:887 action-translator LogManager.java:25 qattr [@-1,117:119='op3',<0>,334:117].[@-1,121:121='e',<0>,334:121]
2023-10-07 13:52:31:888 action-translator LogManager.java:25 translate  $veadct = datoscompuestos.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) 
2023-10-07 13:52:31:888 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,336:2]
2023-10-07 13:52:31:888 action-translator LogManager.java:25 qattr [@-1,48:56='ID_VALIDO',<0>,336:48].[@-1,58:61='text',<0>,336:58]
2023-10-07 13:52:31:888 action-translator LogManager.java:25 qattr [@-1,65:67='op1',<0>,336:65].[@-1,69:69='e',<0>,336:69]
2023-10-07 13:52:31:888 action-translator LogManager.java:25 qattr [@-1,73:75='op2',<0>,336:73].[@-1,77:77='e',<0>,336:77]
2023-10-07 13:52:31:888 action-translator LogManager.java:25 qattr [@-1,81:83='op3',<0>,336:81].[@-1,85:85='e',<0>,336:85]
2023-10-07 13:52:31:889 action-translator LogManager.java:25 translate  $veadct = datoscompuestos.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)
2023-10-07 13:52:31:889 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,337:52]
2023-10-07 13:52:31:889 action-translator LogManager.java:25 qattr [@-1,48:56='ID_VALIDO',<0>,337:98].[@-1,58:61='text',<0>,337:108]
2023-10-07 13:52:31:889 action-translator LogManager.java:25 qattr [@-1,66:68='pop',<0>,337:116].[@-1,70:70='e',<0>,337:120]
2023-10-07 13:52:31:890 action-translator LogManager.java:25 qattr [@-1,74:76='sop',<0>,337:124].[@-1,78:78='e',<0>,337:128]
2023-10-07 13:52:31:890 action-translator LogManager.java:25 translate  $vermct = datoscompuestos.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-10-07 13:52:31:891 action-translator LogManager.java:25 attr [@-1,2:7='vermct',<0>,341:46]
2023-10-07 13:52:31:891 action-translator LogManager.java:25 qattr [@-1,49:53='PUNTO',<0>,341:93].[@-1,55:58='line',<0>,341:99]
2023-10-07 13:52:31:891 action-translator LogManager.java:25 qattr [@-1,62:66='PUNTO',<0>,341:106].[@-1,68:70='pos',<0>,341:112]
2023-10-07 13:52:31:891 action-translator LogManager.java:25 qattr [@-1,74:82='ID_VALIDO',<0>,341:118].[@-1,84:87='text',<0>,341:128]
2023-10-07 13:52:31:891 action-translator LogManager.java:25 translate  $vermct = datoscompuestos.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)
2023-10-07 13:52:31:891 action-translator LogManager.java:25 attr [@-1,2:7='vermct',<0>,342:60]
2023-10-07 13:52:31:891 action-translator LogManager.java:25 qattr [@-1,48:52='PUNTO',<0>,342:106].[@-1,54:57='line',<0>,342:112]
2023-10-07 13:52:31:892 action-translator LogManager.java:25 qattr [@-1,61:65='PUNTO',<0>,342:119].[@-1,67:69='pos',<0>,342:125]
2023-10-07 13:52:31:892 action-translator LogManager.java:25 qattr [@-1,73:81='ID_VALIDO',<0>,342:131].[@-1,83:86='text',<0>,342:141]
2023-10-07 13:52:31:892 action-translator LogManager.java:25 qattr [@-1,90:93='expr',<0>,342:148].[@-1,95:95='e',<0>,342:153]
2023-10-07 13:52:31:892 action-translator LogManager.java:25 translate  $veemct = datoscompuestos.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-10-07 13:52:31:892 action-translator LogManager.java:25 attr [@-1,2:7='veemct',<0>,346:28]
2023-10-07 13:52:31:892 action-translator LogManager.java:25 qattr [@-1,46:50='PUNTO',<0>,346:72].[@-1,52:55='line',<0>,346:78]
2023-10-07 13:52:31:892 action-translator LogManager.java:25 qattr [@-1,59:63='PUNTO',<0>,346:85].[@-1,65:67='pos',<0>,346:91]
2023-10-07 13:52:31:892 action-translator LogManager.java:25 qattr [@-1,71:79='ID_VALIDO',<0>,346:97].[@-1,81:84='text',<0>,346:107]
2023-10-07 13:52:31:893 action-translator LogManager.java:25 translate  $vecnct = datoscompuestos.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-10-07 13:52:31:893 action-translator LogManager.java:25 attr [@-1,2:7='vecnct',<0>,349:26]
2023-10-07 13:52:31:893 action-translator LogManager.java:25 qattr [@-1,44:48='PUNTO',<0>,349:68].[@-1,50:53='line',<0>,349:74]
2023-10-07 13:52:31:893 action-translator LogManager.java:25 qattr [@-1,57:61='PUNTO',<0>,349:81].[@-1,63:65='pos',<0>,349:87]
2023-10-07 13:52:31:893 action-translator LogManager.java:25 qattr [@-1,69:77='ID_VALIDO',<0>,349:93].[@-1,79:82='text',<0>,349:103]
2023-10-07 13:52:31:894 action-translator LogManager.java:25 translate  $vepposct = datoscompuestos.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) 
2023-10-07 13:52:31:894 action-translator LogManager.java:25 attr [@-1,2:9='vepposct',<0>,353:2]
2023-10-07 13:52:31:894 action-translator LogManager.java:25 qattr [@-1,53:61='ID_VALIDO',<0>,353:53].[@-1,63:66='text',<0>,353:63]
2023-10-07 13:52:31:894 action-translator LogManager.java:25 qattr [@-1,70:72='op1',<0>,353:70].[@-1,74:74='e',<0>,353:74]
2023-10-07 13:52:31:894 action-translator LogManager.java:25 qattr [@-1,78:80='op2',<0>,353:78].[@-1,82:82='e',<0>,353:82]
2023-10-07 13:52:31:894 action-translator LogManager.java:25 qattr [@-1,86:103='listamatrizaddsubs',<0>,353:86].[@-1,105:114='blklimatas',<0>,353:105]
2023-10-07 13:52:31:894 action-translator LogManager.java:25 translate  $vepposct = datoscompuestos.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) 
2023-10-07 13:52:31:894 action-translator LogManager.java:25 attr [@-1,2:9='vepposct',<0>,355:2]
2023-10-07 13:52:31:894 action-translator LogManager.java:25 qattr [@-1,49:57='ID_VALIDO',<0>,355:49].[@-1,59:62='text',<0>,355:59]
2023-10-07 13:52:31:894 action-translator LogManager.java:25 qattr [@-1,66:68='op1',<0>,355:66].[@-1,70:70='e',<0>,355:70]
2023-10-07 13:52:31:894 action-translator LogManager.java:25 qattr [@-1,74:76='op2',<0>,355:74].[@-1,78:78='e',<0>,355:78]
2023-10-07 13:52:31:894 action-translator LogManager.java:25 translate  $vepposct = datoscompuestos.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)
2023-10-07 13:52:31:894 action-translator LogManager.java:25 attr [@-1,2:9='vepposct',<0>,356:37]
2023-10-07 13:52:31:894 action-translator LogManager.java:25 qattr [@-1,47:54='CORCHDER',<0>,356:82].[@-1,56:59='line',<0>,356:91]
2023-10-07 13:52:31:894 action-translator LogManager.java:25 qattr [@-1,63:70='CORCHDER',<0>,356:98].[@-1,72:74='pos',<0>,356:107]
2023-10-07 13:52:31:895 action-translator LogManager.java:25 qattr [@-1,78:86='ID_VALIDO',<0>,356:113].[@-1,88:91='text',<0>,356:123]
2023-10-07 13:52:31:895 action-translator LogManager.java:25 qattr [@-1,95:98='expr',<0>,356:130].[@-1,100:100='e',<0>,356:135]
2023-10-07 13:52:31:895 action-translator LogManager.java:25 translate 
    if ($DOS_PUNTOS != nil) {
        $matct = datoscompuestos.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        fmt.Println("Nada")
        //$matct = datoscompuestos.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }

2023-10-07 13:52:31:895 action-translator LogManager.java:25 attr [@-1,11:20='DOS_PUNTOS',<0>,363:9]
2023-10-07 13:52:31:895 action-translator LogManager.java:25 attr [@-1,42:46='matct',<0>,364:9]
2023-10-07 13:52:31:895 action-translator LogManager.java:25 qattr [@-1,88:90='VAR',<0>,364:55].[@-1,92:95='line',<0>,364:59]
2023-10-07 13:52:31:895 action-translator LogManager.java:25 qattr [@-1,99:101='VAR',<0>,364:66].[@-1,103:105='pos',<0>,364:70]
2023-10-07 13:52:31:895 action-translator LogManager.java:25 qattr [@-1,109:117='ID_VALIDO',<0>,364:76].[@-1,119:122='text',<0>,364:86]
2023-10-07 13:52:31:895 action-translator LogManager.java:25 qattr [@-1,126:135='tipomatriz',<0>,364:93].[@-1,137:143='tipomat',<0>,364:104]
2023-10-07 13:52:31:895 action-translator LogManager.java:25 qattr [@-1,147:155='defmatriz',<0>,364:114].[@-1,157:162='defmat',<0>,364:124]
2023-10-07 13:52:31:895 action-translator LogManager.java:25 attr [@-1,220:224='matct',<0>,367:11]
2023-10-07 13:52:31:895 action-translator LogManager.java:25 qattr [@-1,273:275='VAR',<0>,367:64].[@-1,277:280='line',<0>,367:68]
2023-10-07 13:52:31:895 action-translator LogManager.java:25 qattr [@-1,284:286='VAR',<0>,367:75].[@-1,288:290='pos',<0>,367:79]
2023-10-07 13:52:31:895 action-translator LogManager.java:25 qattr [@-1,294:302='ID_VALIDO',<0>,367:85].[@-1,304:307='text',<0>,367:95]
2023-10-07 13:52:31:895 action-translator LogManager.java:25 qattr [@-1,312:320='defmatriz',<0>,367:103].[@-1,322:327='defmat',<0>,367:113]
2023-10-07 13:52:31:896 action-translator LogManager.java:25 translate  
    $tipomat = datoscompuestos.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)

2023-10-07 13:52:31:896 action-translator LogManager.java:25 attr [@-1,8:14='tipomat',<0>,375:5]
2023-10-07 13:52:31:896 action-translator LogManager.java:25 qattr [@-1,54:61='CORCHIZQ',<0>,375:51].[@-1,63:66='line',<0>,375:60]
2023-10-07 13:52:31:896 action-translator LogManager.java:25 qattr [@-1,70:77='CORCHIZQ',<0>,375:67].[@-1,79:81='pos',<0>,375:76]
2023-10-07 13:52:31:896 action-translator LogManager.java:25 qattr [@-1,85:94='tipomatriz',<0>,375:82].[@-1,96:102='tipomat',<0>,375:93]
2023-10-07 13:52:31:897 action-translator LogManager.java:25 translate  
    $tipomat = datoscompuestos.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)

2023-10-07 13:52:31:897 action-translator LogManager.java:25 attr [@-1,8:14='tipomat',<0>,379:5]
2023-10-07 13:52:31:897 action-translator LogManager.java:25 qattr [@-1,49:56='CORCHIZQ',<0>,379:46].[@-1,58:61='line',<0>,379:55]
2023-10-07 13:52:31:897 action-translator LogManager.java:25 qattr [@-1,65:72='CORCHIZQ',<0>,379:62].[@-1,74:76='pos',<0>,379:71]
2023-10-07 13:52:31:897 action-translator LogManager.java:25 qattr [@-1,80:87='tipodato',<0>,379:77].[@-1,89:92='tipo',<0>,379:86]
2023-10-07 13:52:31:897 action-translator LogManager.java:25 translate  $defmat = $listavaloresmat.listvlamat
2023-10-07 13:52:31:898 action-translator LogManager.java:25 attr [@-1,2:7='defmat',<0>,384:20]
2023-10-07 13:52:31:898 action-translator LogManager.java:25 qattr [@-1,12:26='listavaloresmat',<0>,384:30].[@-1,28:37='listvlamat',<0>,384:46]
2023-10-07 13:52:31:898 action-translator LogManager.java:25 translate  $listvlamat = $listavaloresmat2.mylisttmatt
2023-10-07 13:52:31:898 action-translator LogManager.java:25 attr [@-1,2:11='listvlamat',<0>,388:39]
2023-10-07 13:52:31:898 action-translator LogManager.java:25 qattr [@-1,16:31='listavaloresmat2',<0>,388:53].[@-1,33:43='mylisttmatt',<0>,388:70]
2023-10-07 13:52:31:898 action-translator LogManager.java:25 translate  $listvlamat = $simplematriz.simmat
2023-10-07 13:52:31:898 action-translator LogManager.java:25 attr [@-1,2:11='listvlamat',<0>,389:17]
2023-10-07 13:52:31:898 action-translator LogManager.java:25 qattr [@-1,16:27='simplematriz',<0>,389:31].[@-1,29:34='simmat',<0>,389:44]
2023-10-07 13:52:31:899 action-translator LogManager.java:25 translate 
2023-10-07 13:52:31:899 action-translator LogManager.java:25 translate  $mylisttmatt = datoscompuestos.NewMatrizListaNivel($listavaloresmat.listvlamat)
2023-10-07 13:52:31:899 action-translator LogManager.java:25 attr [@-1,2:12='mylisttmatt',<0>,2:48]
2023-10-07 13:52:31:899 action-translator LogManager.java:25 qattr [@-1,53:67='listavaloresmat',<0>,2:99].[@-1,69:78='listvlamat',<0>,2:115]
2023-10-07 13:52:31:899 action-translator LogManager.java:25 translate  $mylisttmatt = datoscompuestos.NewMatrizListaExpresion($listaexpresions.blkparf)
2023-10-07 13:52:31:899 action-translator LogManager.java:25 attr [@-1,2:12='mylisttmatt',<0>,3:45]
2023-10-07 13:52:31:899 action-translator LogManager.java:25 qattr [@-1,57:71='listaexpresions',<0>,3:100].[@-1,73:79='blkparf',<0>,3:116]
2023-10-07 13:52:31:899 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-07 13:52:31:899 action-translator LogManager.java:25 translate  $mylisttmatt = datoscompuestos.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)
2023-10-07 13:52:31:899 action-translator LogManager.java:25 attr [@-1,2:12='mylisttmatt',<0>,6:115]
2023-10-07 13:52:31:899 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,6:174].[@-1,64:74='mylisttmatt',<0>,6:177]
2023-10-07 13:52:31:899 action-translator LogManager.java:25 qattr [@-1,78:92='listavaloresmat',<0>,6:191].[@-1,94:103='listvlamat',<0>,6:207]
2023-10-07 13:52:31:899 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-07 13:52:31:899 action-translator LogManager.java:25 translate 
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext

2023-10-07 13:52:31:900 action-translator LogManager.java:25 attr [@-1,7:13='blkparf',<0>,400:5]
2023-10-07 13:52:31:900 action-translator LogManager.java:25 translate 
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }

2023-10-07 13:52:31:900 action-translator LogManager.java:25 attr [@-1,106:112='blkparf',<0>,407:9]
2023-10-07 13:52:31:900 action-translator LogManager.java:25 attr [@-1,124:130='blkparf',<0>,407:27]
2023-10-07 13:52:31:901 action-translator LogManager.java:25 translate 
    $funpar = datoscompuestos.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)

2023-10-07 13:52:31:901 action-translator LogManager.java:25 attr [@-1,7:12='funpar',<0>,415:5]
2023-10-07 13:52:31:901 action-translator LogManager.java:25 qattr [@-1,54:57='COMA',<0>,415:52].[@-1,59:62='line',<0>,415:57]
2023-10-07 13:52:31:901 action-translator LogManager.java:25 qattr [@-1,66:69='COMA',<0>,415:64].[@-1,71:73='pos',<0>,415:69]
2023-10-07 13:52:31:901 action-translator LogManager.java:25 qattr [@-1,77:80='expr',<0>,415:75].[@-1,82:82='e',<0>,415:80]
2023-10-07 13:52:31:901 action-translator LogManager.java:25 translate 
    $funpar = datoscompuestos.NewArregloParametro($expr.e)

2023-10-07 13:52:31:901 action-translator LogManager.java:25 attr [@-1,7:12='funpar',<0>,419:5]
2023-10-07 13:52:31:901 action-translator LogManager.java:25 qattr [@-1,53:56='expr',<0>,419:51].[@-1,58:58='e',<0>,419:56]
2023-10-07 13:52:31:902 action-translator LogManager.java:25 translate  $simmat = datoscompuestos.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)
2023-10-07 13:52:31:902 action-translator LogManager.java:25 attr [@-1,2:7='simmat',<0>,425:2]
2023-10-07 13:52:31:902 action-translator LogManager.java:25 qattr [@-1,47:56='tipomatriz',<0>,425:47].[@-1,58:64='tipomat',<0>,425:58]
2023-10-07 13:52:31:902 action-translator LogManager.java:25 qattr [@-1,68:69='op',<0>,425:68].[@-1,71:76='simmat',<0>,425:71]
2023-10-07 13:52:31:902 action-translator LogManager.java:25 qattr [@-1,80:85='NUMBER',<0>,425:80].[@-1,87:90='text',<0>,425:87]
2023-10-07 13:52:31:903 action-translator LogManager.java:25 qattr [@-1,94:99='NUMBER',<0>,425:94].[@-1,101:104='line',<0>,425:101]
2023-10-07 13:52:31:903 action-translator LogManager.java:25 qattr [@-1,107:112='NUMBER',<0>,425:107].[@-1,114:116='pos',<0>,425:114]
2023-10-07 13:52:31:903 action-translator LogManager.java:25 translate  $simmat = datoscompuestos.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)
2023-10-07 13:52:31:903 action-translator LogManager.java:25 attr [@-1,2:7='simmat',<0>,427:2]
2023-10-07 13:52:31:903 action-translator LogManager.java:25 qattr [@-1,47:56='tipomatriz',<0>,427:47].[@-1,58:64='tipomat',<0>,427:58]
2023-10-07 13:52:31:903 action-translator LogManager.java:25 qattr [@-1,68:71='expr',<0>,427:68].[@-1,73:73='e',<0>,427:73]
2023-10-07 13:52:31:903 action-translator LogManager.java:25 qattr [@-1,77:82='NUMBER',<0>,427:77].[@-1,84:87='text',<0>,427:84]
2023-10-07 13:52:31:903 action-translator LogManager.java:25 qattr [@-1,91:96='NUMBER',<0>,427:91].[@-1,98:101='line',<0>,427:98]
2023-10-07 13:52:31:903 action-translator LogManager.java:25 qattr [@-1,104:109='NUMBER',<0>,427:104].[@-1,111:113='pos',<0>,427:111]
2023-10-07 13:52:31:904 action-translator LogManager.java:25 translate 
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext

2023-10-07 13:52:31:904 action-translator LogManager.java:25 attr [@-1,7:16='blklimatas',<0>,432:5]
2023-10-07 13:52:31:904 action-translator LogManager.java:25 translate 
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }

2023-10-07 13:52:31:904 action-translator LogManager.java:25 attr [@-1,107:116='blklimatas',<0>,439:9]
2023-10-07 13:52:31:904 action-translator LogManager.java:25 attr [@-1,128:137='blklimatas',<0>,439:30]
2023-10-07 13:52:31:904 action-translator LogManager.java:25 translate 
    $lmas = datoscompuestos.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)

2023-10-07 13:52:31:904 action-translator LogManager.java:25 attr [@-1,7:10='lmas',<0>,447:5]
2023-10-07 13:52:31:904 action-translator LogManager.java:25 qattr [@-1,52:59='CORCHIZQ',<0>,447:50].[@-1,61:64='line',<0>,447:59]
2023-10-07 13:52:31:904 action-translator LogManager.java:25 qattr [@-1,68:75='CORCHIZQ',<0>,447:66].[@-1,77:79='pos',<0>,447:75]
2023-10-07 13:52:31:904 action-translator LogManager.java:25 qattr [@-1,83:86='expr',<0>,447:81].[@-1,88:88='e',<0>,447:86]
2023-10-07 13:52:31:905 action-translator LogManager.java:25 translate  $prnt = funciones.NewPrint($PRINT.line,$PRINT.pos,$listaexpresions.blkparf)
2023-10-07 13:52:31:905 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,671:40]
2023-10-07 13:52:31:905 action-translator LogManager.java:25 qattr [@-1,29:33='PRINT',<0>,671:67].[@-1,35:38='line',<0>,671:73]
2023-10-07 13:52:31:905 action-translator LogManager.java:25 qattr [@-1,41:45='PRINT',<0>,671:79].[@-1,47:49='pos',<0>,671:85]
2023-10-07 13:52:31:905 action-translator LogManager.java:25 qattr [@-1,52:66='listaexpresions',<0>,671:90].[@-1,68:74='blkparf',<0>,671:106]
2023-10-07 13:52:31:905 action-translator LogManager.java:25 translate  $intemb = funciones.NewFuncionIntEmbebida($expr.e)
2023-10-07 13:52:31:905 action-translator LogManager.java:25 attr [@-1,2:7='intemb',<0>,674:27]
2023-10-07 13:52:31:905 action-translator LogManager.java:25 qattr [@-1,44:47='expr',<0>,674:69].[@-1,49:49='e',<0>,674:74]
2023-10-07 13:52:31:905 action-translator LogManager.java:25 translate  $floemb = instructions.NewFuncionFloatEmbebida($expr.e)
2023-10-07 13:52:31:905 action-translator LogManager.java:25 attr [@-1,2:7='floemb',<0>,677:29]
2023-10-07 13:52:31:905 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,677:76].[@-1,54:54='e',<0>,677:81]
2023-10-07 13:52:32:461 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"

2023-10-07 13:52:32:461 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"

2023-10-07 13:52:32:879 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"

2023-10-07 13:52:32:879 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"

