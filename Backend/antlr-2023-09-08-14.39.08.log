2023-09-08 14:39:04:638 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACT (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NULO (BLOCK (ALT 'nil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGO (BLOCK (ALT '...'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNCION (BLOCK (ALT 'func'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE CADENA (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (RULE ID_VALIDO (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CHARACTER (BLOCK (ALT '\'' (BLOCK (ALT ESCAPE) (ALT (~ (SET ['\\\r\n])))) '\''))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [\\'tnr]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IG (BLOCK (ALT '='))) (RULE DOS_PUNTOS (BLOCK (ALT ':'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE CIERRE_INTE (BLOCK (ALT '?'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE SUMA (BLOCK (ALT '+='))) (RULE RESTA (BLOCK (ALT '-='))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE RETORNO (BLOCK (ALT '->'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DIRME (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-08 14:39:04:651 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACT (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NULO (BLOCK (ALT 'nil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGO (BLOCK (ALT '...'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNCION (BLOCK (ALT 'func'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE CADENA (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (RULE ID_VALIDO (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CHARACTER (BLOCK (ALT '\'' (BLOCK (ALT ESCAPE) (ALT (~ (SET ['\\\r\n])))) '\''))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [\\'tnr]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IG (BLOCK (ALT '='))) (RULE DOS_PUNTOS (BLOCK (ALT ':'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE CIERRE_INTE (BLOCK (ALT '?'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE SUMA (BLOCK (ALT '+='))) (RULE RESTA (BLOCK (ALT '-='))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE RETORNO (BLOCK (ALT '->'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DIRME (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-08 14:39:07:925 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $matrizcontrol.matct}) (ALT structcontrol { $inst = $structcontrol.struck}) (ALT funciondeclaracioncontrol { $inst = $funciondeclaracioncontrol.fdc}) (ALT funcionllamadacontrol { $inst = $funcionllamadacontrol.flctl}) (ALT structexpr (? (BLOCK (ALT PUNTOCOMA))) { $inst = $structexpr.strexpr}) (ALT asignacionparametrostruct (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionparametrostruct.llmstruasig}) (ALT llamadafuncionstructcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $llamadafuncionstructcontrol.llmstrufun}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $matrizcontrol.matct}) (ALT funcionllamadacontrol { $insint = $funcionllamadacontrol.flctl}) (ALT structexpr (? (BLOCK (ALT PUNTOCOMA))) { $insint = $structexpr.strexpr}) (ALT asignacionparametrostruct (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionparametrostruct.llmstruasig}) (ALT llamadafuncionstructcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $llamadafuncionstructcontrol.llmstrufun}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr {$decvbl = instructions.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = instructions.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = instructions.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = instructions.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = instructions.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = instructions.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = instructions.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = instructions.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}) (ALT stringembebida { $e = $stringembebida.stremb}) (ALT funcionllamadacontrolConRetorno { $e = $funcionllamadacontrolConRetorno.flctlret}) (ALT llamadastruct { $e = $llamadastruct.llmstru}) (ALT llamadafuncionstructcontrolret { $e = $llamadafuncionstructcontrolret.llmstrufunret}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = instructions.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = instructions.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = instructions.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = instructions.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = instructions.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=instructions.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = instructions.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR (= op1 ID_VALIDO) IN (= op2 ID_VALIDO) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForId($FOR.line, $FOR.pos, $op1.text, $op2.text, $blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = instructions.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = instructions.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = instructions.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN (= op expr) {
    $rect = instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}) (ALT RETURN {
    $rect = instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = instructions.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = instructions.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = instructions.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = instructions.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = instructions.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = instructions.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = instructions.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = instructions.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = instructions.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = instructions.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = instructions.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs { $vepposct = instructions.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER { $vepposct = instructions.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) }) (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = instructions.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE matrizcontrol (returns interfaces.Instruction matct) (BLOCK (ALT VAR ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS tipomatriz))) IG defmatriz {
    if ($DOS_PUNTOS != nil) {
        $matct = instructions.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        $matct = instructions.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }
}))) (RULE tipomatriz (returns interfaces.Expression tipomat) (BLOCK (ALT CORCHIZQ tipomatriz CORCHDER { 
    $tipomat = instructions.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)
}) (ALT CORCHIZQ tipodato CORCHDER { 
    $tipomat = instructions.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)
}))) (RULE defmatriz (returns interfaces.Instruction defmat) (BLOCK (ALT listavaloresmat { $defmat = $listavaloresmat.listvlamat}))) (RULE listavaloresmat (returns interfaces.Instruction listvlamat) (BLOCK (ALT CORCHIZQ listavaloresmat2 CORCHDER { $listvlamat = $listavaloresmat2.mylisttmatt}) (ALT simplematriz { $listvlamat = $simplematriz.simmat}))) (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (= op listavaloresmat2) COMA listavaloresmat { $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}) (ALT listavaloresmat { $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT listaexpresions { $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)}))) (RULE listaexpresions (returns []interface{} blkparf) (@ init {
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= funpar listaexpresion)))) {
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }
}))) (RULE listaexpresion (returns interfaces.Expression funpar) (BLOCK (ALT COMA expr {
    $funpar = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $funpar = instructions.NewArregloParametro($expr.e)
}))) (RULE simplematriz (returns interfaces.Instruction simmat) (BLOCK (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS (= op simplematriz) COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}) (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS expr COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}))) (RULE listamatrizaddsubs (returns []interface{} blklimatas) (@ init {
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= lmas listamatrizaddsub)))) {
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }
}))) (RULE listamatrizaddsub (returns interfaces.Expression lmas) (BLOCK (ALT CORCHIZQ expr CORCHDER {
    $lmas = instructions.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)
}))) (RULE structcontrol (returns interfaces.Instruction struck) (BLOCK (ALT STRUCT ID_VALIDO LLAVEIZQ listaatributos LLAVEDER {
    $struck = instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt);
}))) (RULE listaatributos (returns []interface{} blkstlt) (@ init {
    $blkstlt = []interface{}{}
    var listInt []IListaatributoContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= listatstr listaatributo)))) {
    listInt = localctx.(*ListaatributosContext).GetListatstr()
    for _, e := range listInt {
        $blkstlt = append($blkstlt, e.GetListatstr())
    }
}))) (RULE listaatributo (returns interfaces.Instruction listatstr) (BLOCK (ALT (= tip1 (BLOCK (ALT LET) (ALT VAR))) (= tip4 ID_VALIDO) DOS_PUNTOS (BLOCK (ALT (= tip2 tipodato)) (ALT (= tip3 ID_VALIDO))) (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        if $tip3.text != "" {
            $listatstr = instructions.NewStructAtributosConTE2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text, $expr.e)
        }else{                        
            $listatstr = instructions.NewStructAtributosConTE($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo, $expr.e)
        }        
    }else{ 
        if $tip3.text != "" {                        
            $listatstr = instructions.NewStructAtributosConT2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text) 
        }else{            
            $listatstr = instructions.NewStructAtributosConT($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo) 
        }
    }
}) (ALT (= tipo (BLOCK (ALT LET) (ALT VAR))) ID_VALIDO (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        $listatstr = instructions.NewStructAtributosConE($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text, $expr.e)
    }else{
        $listatstr = instructions.NewStructAtributos($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text)
    }
}) (ALT (? (BLOCK (ALT MUTATING))) funciondeclaracioncontrol {
    if $MUTATING != nil{
        $listatstr = instructions.NewStruckFunctionMutating($funciondeclaracioncontrol.fdc)
    } else {
        $listatstr = instructions.NewStruckFunction($funciondeclaracioncontrol.fdc)
    }
}))) (RULE structexpr (returns interfaces.Instruction strexpr) (BLOCK (ALT (= op1 ID_VALIDO) DOS_PUNTOS (= op ID_VALIDO) (= op2 ID_VALIDO) PARIZQ ldupla PARDER {
    $strexpr = instructions.NewStruckVariable($op1.line, $op1.pos, $op.text, $op1.text, $op2.text, $ldupla.lduplist, true)
}))) (RULE ldupla (returns interfaces.Instruction lduplist) (BLOCK (ALT ID_VALIDO DOS_PUNTOS expr COMA (= op ldupla) { 
    $lduplist = instructions.NewStructListDuple($ID_VALIDO.text, $expr.e, $op.lduplist, true)
}) (ALT ID_VALIDO DOS_PUNTOS expr {
    $lduplist = instructions.NewStructDuple($ID_VALIDO.text, $expr.e, false)  
}))) (RULE llamadastruct (returns interfaces.Expression llmstru) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) {
    $llmstru = instructions.NewStruckLlamadaExp($op.line, $op.pos, $op.text, $op1.text)
}))) (RULE asignacionparametrostruct (returns interfaces.Instruction llmstruasig) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) IG expr {
    $llmstruasig = instructions.NewStruckAsignacionExpr($op.line, $op.pos, $op.text, $op1.text, $expr.e)
}))) (RULE llamadafuncionstructcontrol (returns interfaces.Instruction llmstrufun) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) PARIZQ listaparametrosllamada PARDER {
    $llmstrufun = instructions.NewStruckFuncionesControlP($op.line, $op.pos, $op.text, $op1.text, $listaparametrosllamada.lpll)
}) (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) PARIZQ PARDER {
    $llmstrufun = instructions.NewStruckFuncionesControl($op.line, $op.pos, $op.text, $op1.text)
}))) (RULE llamadafuncionstructcontrolret (returns interfaces.Expression llmstrufunret) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) PARIZQ listaparametrosllamada PARDER {
    $llmstrufunret = instructions.NewStruckFuncionesControlPR($op.line, $op.pos, $op.text, $op1.text, $listaparametrosllamada.lpll)
}) (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) PARIZQ PARDER {
    $llmstrufunret = instructions.NewStruckFuncionesControlR($op.line, $op.pos, $op.text, $op1.text)
}))) (RULE funciondeclaracioncontrol (returns interfaces.Instruction fdc) (BLOCK (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionRP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER LLAVEIZQ blockinterno LLAVEDER {
   $fdc = instructions.NewFuncionesDeclaracionP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracion($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $blockinterno.blkint)
}))) (RULE listaparametro (returns interfaces.Instruction listparfun) (BLOCK (ALT (? (BLOCK (ALT (= op (BLOCK (ALT ID_VALIDO) (ALT GUIONBAJO)))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato COMA (= op3 listaparametro) {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true, true, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true, $op3.listparfun )
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false,$op3.listparfun )
        } 
    }      
}) (ALT (? (BLOCK (ALT (= op (BLOCK (ALT ID_VALIDO) (ALT GUIONBAJO)))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true , true)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true)
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false)
    } 
    }
    
}))) (RULE funcionllamadacontrol (returns interfaces.Instruction flctl) (BLOCK (ALT ID_VALIDO PARIZQ listaparametrosllamada PARDER {
    $flctl = instructions.NewFuncionesControlP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametrosllamada.lpll)
}) (ALT ID_VALIDO PARIZQ PARDER {
    $flctl = instructions.NewFuncionesControl($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE funcionllamadacontrolConRetorno (returns interfaces.Expression flctlret) (BLOCK (ALT ID_VALIDO PARIZQ listaparametrosllamada PARDER {
    $flctlret = instructions.NewFuncionesControlPR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametrosllamada.lpll)
}) (ALT ID_VALIDO PARIZQ PARDER {
    $flctlret = instructions.NewFuncionesControlR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE listaparametrosllamada (returns interfaces.Instruction lpll) (BLOCK (ALT DIRME ID_VALIDO COMA (= op2 listaparametrosllamada) {
    $lpll = instructions.NewFuncionesLlamadaList1($DIRME.line, $DIRME.pos, $ID_VALIDO.text, $op2.lpll)    
}) (ALT DIRME ID_VALIDO {
    $lpll = instructions.NewFuncionesLlamadaList2($DIRME.line, $DIRME.pos, $ID_VALIDO.text)    
}) (ALT (? (BLOCK (ALT ID_VALIDO (= op DOS_PUNTOS)))) expr COMA (= op2 listaparametrosllamada) {
    if $op != nil{
        $lpll = instructions.NewFuncionesLlamadaList3($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e, $op2.lpll)
    }else{
        $lpll = instructions.NewFuncionesLlamadaList4($COMA.line, $COMA.pos, $expr.e, $op2.lpll)
    }
}) (ALT (? (BLOCK (ALT ID_VALIDO (= op DOS_PUNTOS)))) expr {
    if $op != nil{
        $lpll = instructions.NewFuncionesLlamadaList5($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
    }else{
        $lpll = instructions.NewFuncionesLlamadaList6($expr.e)
    }     
}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listaexpresions PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listaexpresions.blkparf)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = instructions.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = instructions.NewFuncionFloatEmbebida($expr.e)}))) (RULE stringembebida (returns interfaces.Expression stremb) (BLOCK (ALT STRING PARIZQ expr PARDER { $stremb = instructions.NewFuncionStringEmbebida($expr.e)})))))
2023-09-08 14:39:07:939 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $matrizcontrol.matct}) (ALT structcontrol { $inst = $structcontrol.struck}) (ALT funciondeclaracioncontrol { $inst = $funciondeclaracioncontrol.fdc}) (ALT funcionllamadacontrol { $inst = $funcionllamadacontrol.flctl}) (ALT structexpr (? (BLOCK (ALT PUNTOCOMA))) { $inst = $structexpr.strexpr}) (ALT asignacionparametrostruct (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionparametrostruct.llmstruasig}) (ALT llamadafuncionstructcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $llamadafuncionstructcontrol.llmstrufun}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $matrizcontrol.matct}) (ALT funcionllamadacontrol { $insint = $funcionllamadacontrol.flctl}) (ALT structexpr (? (BLOCK (ALT PUNTOCOMA))) { $insint = $structexpr.strexpr}) (ALT asignacionparametrostruct (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionparametrostruct.llmstruasig}) (ALT llamadafuncionstructcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $llamadafuncionstructcontrol.llmstrufun}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr {$decvbl = instructions.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = instructions.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = instructions.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = instructions.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = instructions.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = instructions.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = instructions.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = instructions.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}) (ALT stringembebida { $e = $stringembebida.stremb}) (ALT funcionllamadacontrolConRetorno { $e = $funcionllamadacontrolConRetorno.flctlret}) (ALT llamadastruct { $e = $llamadastruct.llmstru}) (ALT llamadafuncionstructcontrolret { $e = $llamadafuncionstructcontrolret.llmstrufunret}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = instructions.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = instructions.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = instructions.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = instructions.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = instructions.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=instructions.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = instructions.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR (= op1 ID_VALIDO) IN (= op2 ID_VALIDO) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForId($FOR.line, $FOR.pos, $op1.text, $op2.text, $blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = instructions.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = instructions.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = instructions.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN (= op expr) {
    $rect = instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}) (ALT RETURN {
    $rect = instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = instructions.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = instructions.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = instructions.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = instructions.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = instructions.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = instructions.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = instructions.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = instructions.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = instructions.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = instructions.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = instructions.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs { $vepposct = instructions.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER { $vepposct = instructions.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) }) (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = instructions.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE matrizcontrol (returns interfaces.Instruction matct) (BLOCK (ALT VAR ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS tipomatriz))) IG defmatriz {
    if ($DOS_PUNTOS != nil) {
        $matct = instructions.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        $matct = instructions.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }
}))) (RULE tipomatriz (returns interfaces.Expression tipomat) (BLOCK (ALT CORCHIZQ tipomatriz CORCHDER { 
    $tipomat = instructions.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)
}) (ALT CORCHIZQ tipodato CORCHDER { 
    $tipomat = instructions.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)
}))) (RULE defmatriz (returns interfaces.Instruction defmat) (BLOCK (ALT listavaloresmat { $defmat = $listavaloresmat.listvlamat}))) (RULE listavaloresmat (returns interfaces.Instruction listvlamat) (BLOCK (ALT CORCHIZQ listavaloresmat2 CORCHDER { $listvlamat = $listavaloresmat2.mylisttmatt}) (ALT simplematriz { $listvlamat = $simplematriz.simmat}))) (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (= op listavaloresmat2) COMA listavaloresmat { $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}) (ALT listavaloresmat { $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT listaexpresions { $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)}))) (RULE listaexpresions (returns []interface{} blkparf) (@ init {
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= funpar listaexpresion)))) {
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }
}))) (RULE listaexpresion (returns interfaces.Expression funpar) (BLOCK (ALT COMA expr {
    $funpar = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $funpar = instructions.NewArregloParametro($expr.e)
}))) (RULE simplematriz (returns interfaces.Instruction simmat) (BLOCK (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS (= op simplematriz) COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}) (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS expr COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}))) (RULE listamatrizaddsubs (returns []interface{} blklimatas) (@ init {
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= lmas listamatrizaddsub)))) {
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }
}))) (RULE listamatrizaddsub (returns interfaces.Expression lmas) (BLOCK (ALT CORCHIZQ expr CORCHDER {
    $lmas = instructions.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)
}))) (RULE structcontrol (returns interfaces.Instruction struck) (BLOCK (ALT STRUCT ID_VALIDO LLAVEIZQ listaatributos LLAVEDER {
    $struck = instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt);
}))) (RULE listaatributos (returns []interface{} blkstlt) (@ init {
    $blkstlt = []interface{}{}
    var listInt []IListaatributoContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= listatstr listaatributo)))) {
    listInt = localctx.(*ListaatributosContext).GetListatstr()
    for _, e := range listInt {
        $blkstlt = append($blkstlt, e.GetListatstr())
    }
}))) (RULE listaatributo (returns interfaces.Instruction listatstr) (BLOCK (ALT (= tip1 (SET LET VAR)) (= tip4 ID_VALIDO) DOS_PUNTOS (BLOCK (ALT (= tip2 tipodato)) (ALT (= tip3 ID_VALIDO))) (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        if $tip3.text != "" {
            $listatstr = instructions.NewStructAtributosConTE2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text, $expr.e)
        }else{                        
            $listatstr = instructions.NewStructAtributosConTE($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo, $expr.e)
        }        
    }else{ 
        if $tip3.text != "" {                        
            $listatstr = instructions.NewStructAtributosConT2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text) 
        }else{            
            $listatstr = instructions.NewStructAtributosConT($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo) 
        }
    }
}) (ALT (= tipo (SET LET VAR)) ID_VALIDO (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        $listatstr = instructions.NewStructAtributosConE($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text, $expr.e)
    }else{
        $listatstr = instructions.NewStructAtributos($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text)
    }
}) (ALT (? (BLOCK (ALT MUTATING))) funciondeclaracioncontrol {
    if $MUTATING != nil{
        $listatstr = instructions.NewStruckFunctionMutating($funciondeclaracioncontrol.fdc)
    } else {
        $listatstr = instructions.NewStruckFunction($funciondeclaracioncontrol.fdc)
    }
}))) (RULE structexpr (returns interfaces.Instruction strexpr) (BLOCK (ALT (= op1 ID_VALIDO) DOS_PUNTOS (= op ID_VALIDO) (= op2 ID_VALIDO) PARIZQ ldupla PARDER {
    $strexpr = instructions.NewStruckVariable($op1.line, $op1.pos, $op.text, $op1.text, $op2.text, $ldupla.lduplist, true)
}))) (RULE ldupla (returns interfaces.Instruction lduplist) (BLOCK (ALT ID_VALIDO DOS_PUNTOS expr COMA (= op ldupla) { 
    $lduplist = instructions.NewStructListDuple($ID_VALIDO.text, $expr.e, $op.lduplist, true)
}) (ALT ID_VALIDO DOS_PUNTOS expr {
    $lduplist = instructions.NewStructDuple($ID_VALIDO.text, $expr.e, false)  
}))) (RULE llamadastruct (returns interfaces.Expression llmstru) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) {
    $llmstru = instructions.NewStruckLlamadaExp($op.line, $op.pos, $op.text, $op1.text)
}))) (RULE asignacionparametrostruct (returns interfaces.Instruction llmstruasig) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) IG expr {
    $llmstruasig = instructions.NewStruckAsignacionExpr($op.line, $op.pos, $op.text, $op1.text, $expr.e)
}))) (RULE llamadafuncionstructcontrol (returns interfaces.Instruction llmstrufun) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) PARIZQ listaparametrosllamada PARDER {
    $llmstrufun = instructions.NewStruckFuncionesControlP($op.line, $op.pos, $op.text, $op1.text, $listaparametrosllamada.lpll)
}) (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) PARIZQ PARDER {
    $llmstrufun = instructions.NewStruckFuncionesControl($op.line, $op.pos, $op.text, $op1.text)
}))) (RULE llamadafuncionstructcontrolret (returns interfaces.Expression llmstrufunret) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) PARIZQ listaparametrosllamada PARDER {
    $llmstrufunret = instructions.NewStruckFuncionesControlPR($op.line, $op.pos, $op.text, $op1.text, $listaparametrosllamada.lpll)
}) (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) PARIZQ PARDER {
    $llmstrufunret = instructions.NewStruckFuncionesControlR($op.line, $op.pos, $op.text, $op1.text)
}))) (RULE funciondeclaracioncontrol (returns interfaces.Instruction fdc) (BLOCK (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionRP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER LLAVEIZQ blockinterno LLAVEDER {
   $fdc = instructions.NewFuncionesDeclaracionP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracion($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $blockinterno.blkint)
}))) (RULE listaparametro (returns interfaces.Instruction listparfun) (BLOCK (ALT (? (BLOCK (ALT (= op (SET ID_VALIDO GUIONBAJO))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato COMA (= op3 listaparametro) {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true, true, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true, $op3.listparfun )
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false,$op3.listparfun )
        } 
    }      
}) (ALT (? (BLOCK (ALT (= op (SET ID_VALIDO GUIONBAJO))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true , true)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true)
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false)
    } 
    }
    
}))) (RULE funcionllamadacontrol (returns interfaces.Instruction flctl) (BLOCK (ALT ID_VALIDO PARIZQ listaparametrosllamada PARDER {
    $flctl = instructions.NewFuncionesControlP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametrosllamada.lpll)
}) (ALT ID_VALIDO PARIZQ PARDER {
    $flctl = instructions.NewFuncionesControl($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE funcionllamadacontrolConRetorno (returns interfaces.Expression flctlret) (BLOCK (ALT ID_VALIDO PARIZQ listaparametrosllamada PARDER {
    $flctlret = instructions.NewFuncionesControlPR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametrosllamada.lpll)
}) (ALT ID_VALIDO PARIZQ PARDER {
    $flctlret = instructions.NewFuncionesControlR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE listaparametrosllamada (returns interfaces.Instruction lpll) (BLOCK (ALT DIRME ID_VALIDO COMA (= op2 listaparametrosllamada) {
    $lpll = instructions.NewFuncionesLlamadaList1($DIRME.line, $DIRME.pos, $ID_VALIDO.text, $op2.lpll)    
}) (ALT DIRME ID_VALIDO {
    $lpll = instructions.NewFuncionesLlamadaList2($DIRME.line, $DIRME.pos, $ID_VALIDO.text)    
}) (ALT (? (BLOCK (ALT ID_VALIDO (= op DOS_PUNTOS)))) expr COMA (= op2 listaparametrosllamada) {
    if $op != nil{
        $lpll = instructions.NewFuncionesLlamadaList3($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e, $op2.lpll)
    }else{
        $lpll = instructions.NewFuncionesLlamadaList4($COMA.line, $COMA.pos, $expr.e, $op2.lpll)
    }
}) (ALT (? (BLOCK (ALT ID_VALIDO (= op DOS_PUNTOS)))) expr {
    if $op != nil{
        $lpll = instructions.NewFuncionesLlamadaList5($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
    }else{
        $lpll = instructions.NewFuncionesLlamadaList6($expr.e)
    }     
}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listaexpresions PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listaexpresions.blkparf)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = instructions.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = instructions.NewFuncionFloatEmbebida($expr.e)}))) (RULE stringembebida (returns interfaces.Expression stremb) (BLOCK (ALT STRING PARIZQ expr PARDER { $stremb = instructions.NewFuncionStringEmbebida($expr.e)})))))
2023-09-08 14:39:07:946 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $matrizcontrol.matct}) (ALT structcontrol { $inst = $structcontrol.struck}) (ALT funciondeclaracioncontrol { $inst = $funciondeclaracioncontrol.fdc}) (ALT funcionllamadacontrol { $inst = $funcionllamadacontrol.flctl}) (ALT structexpr (? (BLOCK (ALT PUNTOCOMA))) { $inst = $structexpr.strexpr}) (ALT asignacionparametrostruct (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionparametrostruct.llmstruasig}) (ALT llamadafuncionstructcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $llamadafuncionstructcontrol.llmstrufun}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $matrizcontrol.matct}) (ALT funcionllamadacontrol { $insint = $funcionllamadacontrol.flctl}) (ALT structexpr (? (BLOCK (ALT PUNTOCOMA))) { $insint = $structexpr.strexpr}) (ALT asignacionparametrostruct (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionparametrostruct.llmstruasig}) (ALT llamadafuncionstructcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $llamadafuncionstructcontrol.llmstrufun}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr {$decvbl = instructions.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = instructions.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = instructions.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = instructions.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = instructions.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = instructions.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = instructions.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = instructions.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}) (ALT stringembebida { $e = $stringembebida.stremb}) (ALT funcionllamadacontrolConRetorno { $e = $funcionllamadacontrolConRetorno.flctlret}) (ALT llamadastruct { $e = $llamadastruct.llmstru}) (ALT llamadafuncionstructcontrolret { $e = $llamadafuncionstructcontrolret.llmstrufunret}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = instructions.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = instructions.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = instructions.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = instructions.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = instructions.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=instructions.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = instructions.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR (= op1 ID_VALIDO) IN (= op2 ID_VALIDO) LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForId($FOR.line, $FOR.pos, $op1.text, $op2.text, $blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = instructions.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = instructions.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = instructions.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = instructions.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN (= op expr) {
    $rect = instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}) (ALT RETURN {
    $rect = instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = instructions.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = instructions.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = instructions.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = instructions.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = instructions.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = instructions.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER IG (= op3 expr) { $veadct = instructions.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = instructions.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = instructions.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = instructions.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = instructions.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = instructions.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs { $vepposct = instructions.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER { $vepposct = instructions.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) }) (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = instructions.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE matrizcontrol (returns interfaces.Instruction matct) (BLOCK (ALT VAR ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS tipomatriz))) IG defmatriz {
    if ($DOS_PUNTOS != nil) {
        $matct = instructions.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        $matct = instructions.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }
}))) (RULE tipomatriz (returns interfaces.Expression tipomat) (BLOCK (ALT CORCHIZQ tipomatriz CORCHDER { 
    $tipomat = instructions.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)
}) (ALT CORCHIZQ tipodato CORCHDER { 
    $tipomat = instructions.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)
}))) (RULE defmatriz (returns interfaces.Instruction defmat) (BLOCK (ALT listavaloresmat { $defmat = $listavaloresmat.listvlamat}))) (RULE listavaloresmat (returns interfaces.Instruction listvlamat) (BLOCK (ALT CORCHIZQ listavaloresmat2 CORCHDER { $listvlamat = $listavaloresmat2.mylisttmatt}) (ALT simplematriz { $listvlamat = $simplematriz.simmat}))) (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (= op listavaloresmat2) COMA listavaloresmat { $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}) (ALT listavaloresmat { $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT listaexpresions { $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)}))) (RULE listaexpresions (returns []interface{} blkparf) (@ init {
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= funpar listaexpresion)))) {
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }
}))) (RULE listaexpresion (returns interfaces.Expression funpar) (BLOCK (ALT COMA expr {
    $funpar = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $funpar = instructions.NewArregloParametro($expr.e)
}))) (RULE simplematriz (returns interfaces.Instruction simmat) (BLOCK (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS (= op simplematriz) COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}) (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS expr COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = instructions.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}))) (RULE listamatrizaddsubs (returns []interface{} blklimatas) (@ init {
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= lmas listamatrizaddsub)))) {
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }
}))) (RULE listamatrizaddsub (returns interfaces.Expression lmas) (BLOCK (ALT CORCHIZQ expr CORCHDER {
    $lmas = instructions.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)
}))) (RULE structcontrol (returns interfaces.Instruction struck) (BLOCK (ALT STRUCT ID_VALIDO LLAVEIZQ listaatributos LLAVEDER {
    $struck = instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt);
}))) (RULE listaatributos (returns []interface{} blkstlt) (@ init {
    $blkstlt = []interface{}{}
    var listInt []IListaatributoContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= listatstr listaatributo)))) {
    listInt = localctx.(*ListaatributosContext).GetListatstr()
    for _, e := range listInt {
        $blkstlt = append($blkstlt, e.GetListatstr())
    }
}))) (RULE listaatributo (returns interfaces.Instruction listatstr) (BLOCK (ALT (= tip1 (SET LET VAR)) (= tip4 ID_VALIDO) DOS_PUNTOS (BLOCK (ALT (= tip2 tipodato)) (ALT (= tip3 ID_VALIDO))) (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        if $tip3.text != "" {
            $listatstr = instructions.NewStructAtributosConTE2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text, $expr.e)
        }else{                        
            $listatstr = instructions.NewStructAtributosConTE($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo, $expr.e)
        }        
    }else{ 
        if $tip3.text != "" {                        
            $listatstr = instructions.NewStructAtributosConT2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text) 
        }else{            
            $listatstr = instructions.NewStructAtributosConT($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo) 
        }
    }
}) (ALT (= tipo (SET LET VAR)) ID_VALIDO (? (BLOCK (ALT IG expr))) (? (BLOCK (ALT PUNTOCOMA))) {
    if $IG != nil{
        $listatstr = instructions.NewStructAtributosConE($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text, $expr.e)
    }else{
        $listatstr = instructions.NewStructAtributos($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text)
    }
}) (ALT (? (BLOCK (ALT MUTATING))) funciondeclaracioncontrol {
    if $MUTATING != nil{
        $listatstr = instructions.NewStruckFunctionMutating($funciondeclaracioncontrol.fdc)
    } else {
        $listatstr = instructions.NewStruckFunction($funciondeclaracioncontrol.fdc)
    }
}))) (RULE structexpr (returns interfaces.Instruction strexpr) (BLOCK (ALT (= op1 ID_VALIDO) DOS_PUNTOS (= op ID_VALIDO) (= op2 ID_VALIDO) PARIZQ ldupla PARDER {
    $strexpr = instructions.NewStruckVariable($op1.line, $op1.pos, $op.text, $op1.text, $op2.text, $ldupla.lduplist, true)
}))) (RULE ldupla (returns interfaces.Instruction lduplist) (BLOCK (ALT ID_VALIDO DOS_PUNTOS expr COMA (= op ldupla) { 
    $lduplist = instructions.NewStructListDuple($ID_VALIDO.text, $expr.e, $op.lduplist, true)
}) (ALT ID_VALIDO DOS_PUNTOS expr {
    $lduplist = instructions.NewStructDuple($ID_VALIDO.text, $expr.e, false)  
}))) (RULE llamadastruct (returns interfaces.Expression llmstru) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) {
    $llmstru = instructions.NewStruckLlamadaExp($op.line, $op.pos, $op.text, $op1.text)
}))) (RULE asignacionparametrostruct (returns interfaces.Instruction llmstruasig) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) IG expr {
    $llmstruasig = instructions.NewStruckAsignacionExpr($op.line, $op.pos, $op.text, $op1.text, $expr.e)
}))) (RULE llamadafuncionstructcontrol (returns interfaces.Instruction llmstrufun) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) PARIZQ listaparametrosllamada PARDER {
    $llmstrufun = instructions.NewStruckFuncionesControlP($op.line, $op.pos, $op.text, $op1.text, $listaparametrosllamada.lpll)
}) (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) PARIZQ PARDER {
    $llmstrufun = instructions.NewStruckFuncionesControl($op.line, $op.pos, $op.text, $op1.text)
}))) (RULE llamadafuncionstructcontrolret (returns interfaces.Expression llmstrufunret) (BLOCK (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) PARIZQ listaparametrosllamada PARDER {
    $llmstrufunret = instructions.NewStruckFuncionesControlPR($op.line, $op.pos, $op.text, $op1.text, $listaparametrosllamada.lpll)
}) (ALT (= op ID_VALIDO) PUNTO (= op1 ID_VALIDO) PARIZQ PARDER {
    $llmstrufunret = instructions.NewStruckFuncionesControlR($op.line, $op.pos, $op.text, $op1.text)
}))) (RULE funciondeclaracioncontrol (returns interfaces.Instruction fdc) (BLOCK (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionRP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracionR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ listaparametro PARDER LLAVEIZQ blockinterno LLAVEDER {
   $fdc = instructions.NewFuncionesDeclaracionP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER LLAVEIZQ blockinterno LLAVEDER {
    $fdc = instructions.NewFuncionesDeclaracion($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $blockinterno.blkint)
}))) (RULE listaparametro (returns interfaces.Instruction listparfun) (BLOCK (ALT (? (BLOCK (ALT (= op (SET ID_VALIDO GUIONBAJO))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato COMA (= op3 listaparametro) {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true, true, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true, $op3.listparfun )
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false,$op3.listparfun )
        } 
    }      
}) (ALT (? (BLOCK (ALT (= op (SET ID_VALIDO GUIONBAJO))))) (= op2 ID_VALIDO) DOS_PUNTOS (? (BLOCK (ALT INOUT))) tipodato {
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true , true)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true)
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false)
    } 
    }
    
}))) (RULE funcionllamadacontrol (returns interfaces.Instruction flctl) (BLOCK (ALT ID_VALIDO PARIZQ listaparametrosllamada PARDER {
    $flctl = instructions.NewFuncionesControlP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametrosllamada.lpll)
}) (ALT ID_VALIDO PARIZQ PARDER {
    $flctl = instructions.NewFuncionesControl($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE funcionllamadacontrolConRetorno (returns interfaces.Expression flctlret) (BLOCK (ALT ID_VALIDO PARIZQ listaparametrosllamada PARDER {
    $flctlret = instructions.NewFuncionesControlPR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametrosllamada.lpll)
}) (ALT ID_VALIDO PARIZQ PARDER {
    $flctlret = instructions.NewFuncionesControlR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE listaparametrosllamada (returns interfaces.Instruction lpll) (BLOCK (ALT DIRME ID_VALIDO COMA (= op2 listaparametrosllamada) {
    $lpll = instructions.NewFuncionesLlamadaList1($DIRME.line, $DIRME.pos, $ID_VALIDO.text, $op2.lpll)    
}) (ALT DIRME ID_VALIDO {
    $lpll = instructions.NewFuncionesLlamadaList2($DIRME.line, $DIRME.pos, $ID_VALIDO.text)    
}) (ALT (? (BLOCK (ALT ID_VALIDO (= op DOS_PUNTOS)))) expr COMA (= op2 listaparametrosllamada) {
    if $op != nil{
        $lpll = instructions.NewFuncionesLlamadaList3($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e, $op2.lpll)
    }else{
        $lpll = instructions.NewFuncionesLlamadaList4($COMA.line, $COMA.pos, $expr.e, $op2.lpll)
    }
}) (ALT (? (BLOCK (ALT ID_VALIDO (= op DOS_PUNTOS)))) expr {
    if $op != nil{
        $lpll = instructions.NewFuncionesLlamadaList5($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
    }else{
        $lpll = instructions.NewFuncionesLlamadaList6($expr.e)
    }     
}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listaexpresions PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listaexpresions.blkparf)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = instructions.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = instructions.NewFuncionFloatEmbebida($expr.e)}))) (RULE stringembebida (returns interfaces.Expression stremb) (BLOCK (ALT STRING PARIZQ expr PARDER { $stremb = instructions.NewFuncionStringEmbebida($expr.e)})))))
2023-09-08 14:39:07:946 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"
}) RULES)
2023-09-08 14:39:07:984 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op=NOT<tokenIndex=637> right=expr<tokenIndex=641,p=27> { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) } 
        | PARIZQ<tokenIndex=795> expr<tokenIndex=797> PARDER<tokenIndex=799> { $e = $expr.e } 
        | SUB<tokenIndex=805> NUMBER<tokenIndex=807>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    } 
        | NUMBER<tokenIndex=813>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | CADENA<tokenIndex=819>
    {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=825> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=831> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | CHARACTER<tokenIndex=837> 
    { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    } 
        | ID_VALIDO<tokenIndex=842>
    {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    } 
        | NULO<tokenIndex=847> {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)} 
        | vectorvacio<tokenIndex=853> { $e = $vectorvacio.veemct} 
        | vectorcount<tokenIndex=859> { $e = $vectorcount.vecnct} 
        | vectoraccess<tokenIndex=865> { $e = $vectoraccess.vepposct} 
        | intembebida<tokenIndex=871> { $e = $intembebida.intemb} 
        | floatembebida<tokenIndex=877> { $e = $floatembebida.floemb} 
        | stringembebida<tokenIndex=883> { $e = $stringembebida.stremb} 
        | funcionllamadacontrolConRetorno<tokenIndex=889> { $e = $funcionllamadacontrolConRetorno.flctlret} 
        | llamadastruct<tokenIndex=895> { $e = $llamadastruct.llmstru} 
        | llamadafuncionstructcontrolret<tokenIndex=901> { $e = $llamadafuncionstructcontrolret.llmstrufunret} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 26)}?<p=26> op=MODULO<tokenIndex=653> right=expr<tokenIndex=657,p=27> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 25)}?<p=25> op=(MUL<tokenIndex=670>|DIV<tokenIndex=672>) right=expr<tokenIndex=677,p=26> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 24)}?<p=24> op=(ADD<tokenIndex=690>|SUB<tokenIndex=692>) right=expr<tokenIndex=697,p=25> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 23)}?<p=23> op=(MAY_IG<tokenIndex=710>|MAYOR<tokenIndex=712>) right=expr<tokenIndex=717,p=24> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 22)}?<p=22> op=(MEN_IG<tokenIndex=730>|MENOR<tokenIndex=732>) right=expr<tokenIndex=737,p=23> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=(IG_IG<tokenIndex=750>|DIF<tokenIndex=752>) right=expr<tokenIndex=757,p=22> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=AND<tokenIndex=769> right=expr<tokenIndex=773,p=21> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=OR<tokenIndex=785> right=expr<tokenIndex=789,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-08 14:39:08:001 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 637)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 641) (= p 27)))) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 795))) (expr (ELEMENT_OPTIONS (= tokenIndex 797))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 799))) { $e = $expr.e }) (ALT (SUB (ELEMENT_OPTIONS (= tokenIndex 805))) (NUMBER (ELEMENT_OPTIONS (= tokenIndex 807))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 813))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (CADENA (ELEMENT_OPTIONS (= tokenIndex 819))) {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 825))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 831))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (CHARACTER (ELEMENT_OPTIONS (= tokenIndex 837))) { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT (ID_VALIDO (ELEMENT_OPTIONS (= tokenIndex 842))) {
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT (NULO (ELEMENT_OPTIONS (= tokenIndex 847))) {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT (vectorvacio (ELEMENT_OPTIONS (= tokenIndex 853))) { $e = $vectorvacio.veemct}) (ALT (vectorcount (ELEMENT_OPTIONS (= tokenIndex 859))) { $e = $vectorcount.vecnct}) (ALT (vectoraccess (ELEMENT_OPTIONS (= tokenIndex 865))) { $e = $vectoraccess.vepposct}) (ALT (intembebida (ELEMENT_OPTIONS (= tokenIndex 871))) { $e = $intembebida.intemb}) (ALT (floatembebida (ELEMENT_OPTIONS (= tokenIndex 877))) { $e = $floatembebida.floemb}) (ALT (stringembebida (ELEMENT_OPTIONS (= tokenIndex 883))) { $e = $stringembebida.stremb}) (ALT (funcionllamadacontrolConRetorno (ELEMENT_OPTIONS (= tokenIndex 889))) { $e = $funcionllamadacontrolConRetorno.flctlret}) (ALT (llamadastruct (ELEMENT_OPTIONS (= tokenIndex 895))) { $e = $llamadastruct.llmstru}) (ALT (llamadafuncionstructcontrolret (ELEMENT_OPTIONS (= tokenIndex 901))) { $e = $llamadafuncionstructcontrolret.llmstrufunret})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 26)}? (ELEMENT_OPTIONS (= p 26))) (= op (MODULO (ELEMENT_OPTIONS (= tokenIndex 653)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 657) (= p 27)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 25)}? (ELEMENT_OPTIONS (= p 25))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 670))) (DIV (ELEMENT_OPTIONS (= tokenIndex 672))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 677) (= p 26)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 24)}? (ELEMENT_OPTIONS (= p 24))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 690))) (SUB (ELEMENT_OPTIONS (= tokenIndex 692))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 697) (= p 25)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 23)}? (ELEMENT_OPTIONS (= p 23))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 710))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 712))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 717) (= p 24)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 22)}? (ELEMENT_OPTIONS (= p 22))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 730))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 732))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 737) (= p 23)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 750))) (DIF (ELEMENT_OPTIONS (= tokenIndex 752))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 757) (= p 22)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 769)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 773) (= p 21)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 785)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 789) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-08 14:39:08:002 left-recursion LogManager.java:25 listavaloresmat2 returns [interfaces.Instruction mylisttmatt]
    :   ( {} listavaloresmat<tokenIndex=1728> { $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)} 
        | listaexpresions<tokenIndex=1734> { $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1720> listavaloresmat<tokenIndex=1722> { $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}
        )*
    ;
2023-09-08 14:39:08:004 grammar LogManager.java:25 added: (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (BLOCK (ALT {} (listavaloresmat (ELEMENT_OPTIONS (= tokenIndex 1728))) { $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT (listaexpresions (ELEMENT_OPTIONS (= tokenIndex 1734))) { $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1720))) (listavaloresmat (ELEMENT_OPTIONS (= tokenIndex 1722))) { $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}))))))
2023-09-08 14:39:08:020 grammar LogManager.java:25 import INT=1
2023-09-08 14:39:08:020 grammar LogManager.java:25 import FLOAT=2
2023-09-08 14:39:08:021 grammar LogManager.java:25 import STRING=3
2023-09-08 14:39:08:021 grammar LogManager.java:25 import BOOL=4
2023-09-08 14:39:08:021 grammar LogManager.java:25 import CHARACT=5
2023-09-08 14:39:08:021 grammar LogManager.java:25 import TRU=6
2023-09-08 14:39:08:021 grammar LogManager.java:25 import FAL=7
2023-09-08 14:39:08:023 grammar LogManager.java:25 import VAR=8
2023-09-08 14:39:08:023 grammar LogManager.java:25 import LET=9
2023-09-08 14:39:08:023 grammar LogManager.java:25 import NULO=10
2023-09-08 14:39:08:023 grammar LogManager.java:25 import IF=11
2023-09-08 14:39:08:023 grammar LogManager.java:25 import ELSE=12
2023-09-08 14:39:08:023 grammar LogManager.java:25 import SWITCH=13
2023-09-08 14:39:08:023 grammar LogManager.java:25 import CASE=14
2023-09-08 14:39:08:024 grammar LogManager.java:25 import DEFAULT=15
2023-09-08 14:39:08:024 grammar LogManager.java:25 import BREAK=16
2023-09-08 14:39:08:024 grammar LogManager.java:25 import CONTINUE=17
2023-09-08 14:39:08:024 grammar LogManager.java:25 import FOR=18
2023-09-08 14:39:08:025 grammar LogManager.java:25 import IN=19
2023-09-08 14:39:08:025 grammar LogManager.java:25 import RANGO=20
2023-09-08 14:39:08:025 grammar LogManager.java:25 import WHILE=21
2023-09-08 14:39:08:025 grammar LogManager.java:25 import GUARD=22
2023-09-08 14:39:08:026 grammar LogManager.java:25 import RETURN=23
2023-09-08 14:39:08:026 grammar LogManager.java:25 import FUNCION=24
2023-09-08 14:39:08:026 grammar LogManager.java:25 import PRINT=25
2023-09-08 14:39:08:026 grammar LogManager.java:25 import INOUT=26
2023-09-08 14:39:08:026 grammar LogManager.java:25 import APPEND=27
2023-09-08 14:39:08:027 grammar LogManager.java:25 import REMOVE=28
2023-09-08 14:39:08:027 grammar LogManager.java:25 import REMOVELAST=29
2023-09-08 14:39:08:027 grammar LogManager.java:25 import COUNT=30
2023-09-08 14:39:08:027 grammar LogManager.java:25 import ISEMPTY=31
2023-09-08 14:39:08:028 grammar LogManager.java:25 import AT=32
2023-09-08 14:39:08:028 grammar LogManager.java:25 import REPEATING=33
2023-09-08 14:39:08:028 grammar LogManager.java:25 import STRUCT=34
2023-09-08 14:39:08:028 grammar LogManager.java:25 import MUTATING=35
2023-09-08 14:39:08:028 grammar LogManager.java:25 import SELF=36
2023-09-08 14:39:08:028 grammar LogManager.java:25 import NUMBER=37
2023-09-08 14:39:08:028 grammar LogManager.java:25 import CADENA=38
2023-09-08 14:39:08:029 grammar LogManager.java:25 import ID_VALIDO=39
2023-09-08 14:39:08:029 grammar LogManager.java:25 import CHARACTER=40
2023-09-08 14:39:08:029 grammar LogManager.java:25 import WS=41
2023-09-08 14:39:08:029 grammar LogManager.java:25 import IG=42
2023-09-08 14:39:08:029 grammar LogManager.java:25 import DOS_PUNTOS=43
2023-09-08 14:39:08:029 grammar LogManager.java:25 import PUNTOCOMA=44
2023-09-08 14:39:08:030 grammar LogManager.java:25 import CIERRE_INTE=45
2023-09-08 14:39:08:030 grammar LogManager.java:25 import PARIZQ=46
2023-09-08 14:39:08:030 grammar LogManager.java:25 import PARDER=47
2023-09-08 14:39:08:030 grammar LogManager.java:25 import DIF=48
2023-09-08 14:39:08:030 grammar LogManager.java:25 import IG_IG=49
2023-09-08 14:39:08:030 grammar LogManager.java:25 import NOT=50
2023-09-08 14:39:08:031 grammar LogManager.java:25 import OR=51
2023-09-08 14:39:08:031 grammar LogManager.java:25 import AND=52
2023-09-08 14:39:08:031 grammar LogManager.java:25 import MAY_IG=53
2023-09-08 14:39:08:031 grammar LogManager.java:25 import MEN_IG=54
2023-09-08 14:39:08:031 grammar LogManager.java:25 import MAYOR=55
2023-09-08 14:39:08:031 grammar LogManager.java:25 import MENOR=56
2023-09-08 14:39:08:031 grammar LogManager.java:25 import MODULO=57
2023-09-08 14:39:08:031 grammar LogManager.java:25 import MUL=58
2023-09-08 14:39:08:031 grammar LogManager.java:25 import DIV=59
2023-09-08 14:39:08:031 grammar LogManager.java:25 import ADD=60
2023-09-08 14:39:08:031 grammar LogManager.java:25 import SUB=61
2023-09-08 14:39:08:032 grammar LogManager.java:25 import SUMA=62
2023-09-08 14:39:08:032 grammar LogManager.java:25 import RESTA=63
2023-09-08 14:39:08:032 grammar LogManager.java:25 import LLAVEIZQ=64
2023-09-08 14:39:08:032 grammar LogManager.java:25 import LLAVEDER=65
2023-09-08 14:39:08:032 grammar LogManager.java:25 import RETORNO=66
2023-09-08 14:39:08:032 grammar LogManager.java:25 import COMA=67
2023-09-08 14:39:08:032 grammar LogManager.java:25 import PUNTO=68
2023-09-08 14:39:08:033 grammar LogManager.java:25 import GUIONBAJO=69
2023-09-08 14:39:08:033 grammar LogManager.java:25 import CORCHIZQ=70
2023-09-08 14:39:08:033 grammar LogManager.java:25 import CORCHDER=71
2023-09-08 14:39:08:033 grammar LogManager.java:25 import DIRME=72
2023-09-08 14:39:08:033 grammar LogManager.java:25 import WHITESPACE=73
2023-09-08 14:39:08:033 grammar LogManager.java:25 import COMMENT=74
2023-09-08 14:39:08:034 grammar LogManager.java:25 import LINE_COMMENT=75
2023-09-08 14:39:08:034 grammar LogManager.java:25 import 'Int'=1
2023-09-08 14:39:08:034 grammar LogManager.java:25 import 'Float'=2
2023-09-08 14:39:08:034 grammar LogManager.java:25 import 'String'=3
2023-09-08 14:39:08:034 grammar LogManager.java:25 import 'Bool'=4
2023-09-08 14:39:08:034 grammar LogManager.java:25 import 'Character'=5
2023-09-08 14:39:08:035 grammar LogManager.java:25 import 'true'=6
2023-09-08 14:39:08:035 grammar LogManager.java:25 import 'false'=7
2023-09-08 14:39:08:035 grammar LogManager.java:25 import 'var'=8
2023-09-08 14:39:08:035 grammar LogManager.java:25 import 'let'=9
2023-09-08 14:39:08:036 grammar LogManager.java:25 import 'nil'=10
2023-09-08 14:39:08:036 grammar LogManager.java:25 import 'if'=11
2023-09-08 14:39:08:036 grammar LogManager.java:25 import 'else'=12
2023-09-08 14:39:08:036 grammar LogManager.java:25 import 'switch'=13
2023-09-08 14:39:08:036 grammar LogManager.java:25 import 'case'=14
2023-09-08 14:39:08:036 grammar LogManager.java:25 import 'default'=15
2023-09-08 14:39:08:037 grammar LogManager.java:25 import 'break'=16
2023-09-08 14:39:08:037 grammar LogManager.java:25 import 'continue'=17
2023-09-08 14:39:08:037 grammar LogManager.java:25 import 'for'=18
2023-09-08 14:39:08:037 grammar LogManager.java:25 import 'in'=19
2023-09-08 14:39:08:037 grammar LogManager.java:25 import '...'=20
2023-09-08 14:39:08:038 grammar LogManager.java:25 import 'while'=21
2023-09-08 14:39:08:038 grammar LogManager.java:25 import 'guard'=22
2023-09-08 14:39:08:038 grammar LogManager.java:25 import 'return'=23
2023-09-08 14:39:08:038 grammar LogManager.java:25 import 'func'=24
2023-09-08 14:39:08:038 grammar LogManager.java:25 import 'print'=25
2023-09-08 14:39:08:038 grammar LogManager.java:25 import 'inout'=26
2023-09-08 14:39:08:038 grammar LogManager.java:25 import 'append'=27
2023-09-08 14:39:08:038 grammar LogManager.java:25 import 'remove'=28
2023-09-08 14:39:08:039 grammar LogManager.java:25 import 'removeLast'=29
2023-09-08 14:39:08:039 grammar LogManager.java:25 import 'count'=30
2023-09-08 14:39:08:039 grammar LogManager.java:25 import 'isEmpty'=31
2023-09-08 14:39:08:039 grammar LogManager.java:25 import 'at'=32
2023-09-08 14:39:08:039 grammar LogManager.java:25 import 'repeating'=33
2023-09-08 14:39:08:039 grammar LogManager.java:25 import 'struct'=34
2023-09-08 14:39:08:039 grammar LogManager.java:25 import 'mutating'=35
2023-09-08 14:39:08:039 grammar LogManager.java:25 import 'self'=36
2023-09-08 14:39:08:039 grammar LogManager.java:25 import '='=42
2023-09-08 14:39:08:039 grammar LogManager.java:25 import ':'=43
2023-09-08 14:39:08:039 grammar LogManager.java:25 import ';'=44
2023-09-08 14:39:08:039 grammar LogManager.java:25 import '?'=45
2023-09-08 14:39:08:039 grammar LogManager.java:25 import '('=46
2023-09-08 14:39:08:039 grammar LogManager.java:25 import ')'=47
2023-09-08 14:39:08:039 grammar LogManager.java:25 import '!='=48
2023-09-08 14:39:08:039 grammar LogManager.java:25 import '=='=49
2023-09-08 14:39:08:039 grammar LogManager.java:25 import '!'=50
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '||'=51
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '&&'=52
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '>='=53
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '<='=54
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '>'=55
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '<'=56
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '%'=57
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '*'=58
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '/'=59
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '+'=60
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '-'=61
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '+='=62
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '-='=63
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '{'=64
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '}'=65
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '->'=66
2023-09-08 14:39:08:040 grammar LogManager.java:25 import ','=67
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '.'=68
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '_'=69
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '['=70
2023-09-08 14:39:08:040 grammar LogManager.java:25 import ']'=71
2023-09-08 14:39:08:040 grammar LogManager.java:25 import '&'=72
2023-09-08 14:39:08:041 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, STRING=3, BOOL=4, CHARACT=5, TRU=6, FAL=7, VAR=8, LET=9, NULO=10, IF=11, ELSE=12, SWITCH=13, CASE=14, DEFAULT=15, BREAK=16, CONTINUE=17, FOR=18, IN=19, RANGO=20, WHILE=21, GUARD=22, RETURN=23, FUNCION=24, PRINT=25, INOUT=26, APPEND=27, REMOVE=28, REMOVELAST=29, COUNT=30, ISEMPTY=31, AT=32, REPEATING=33, STRUCT=34, MUTATING=35, SELF=36, NUMBER=37, CADENA=38, ID_VALIDO=39, CHARACTER=40, WS=41, IG=42, DOS_PUNTOS=43, PUNTOCOMA=44, CIERRE_INTE=45, PARIZQ=46, PARDER=47, DIF=48, IG_IG=49, NOT=50, OR=51, AND=52, MAY_IG=53, MEN_IG=54, MAYOR=55, MENOR=56, MODULO=57, MUL=58, DIV=59, ADD=60, SUB=61, SUMA=62, RESTA=63, LLAVEIZQ=64, LLAVEDER=65, RETORNO=66, COMA=67, PUNTO=68, GUIONBAJO=69, CORCHIZQ=70, CORCHDER=71, DIRME=72, WHITESPACE=73, COMMENT=74, LINE_COMMENT=75, 'Int'=1, 'Float'=2, 'String'=3, 'Bool'=4, 'Character'=5, 'true'=6, 'false'=7, 'var'=8, 'let'=9, 'nil'=10, 'if'=11, 'else'=12, 'switch'=13, 'case'=14, 'default'=15, 'break'=16, 'continue'=17, 'for'=18, 'in'=19, '...'=20, 'while'=21, 'guard'=22, 'return'=23, 'func'=24, 'print'=25, 'inout'=26, 'append'=27, 'remove'=28, 'removeLast'=29, 'count'=30, 'isEmpty'=31, 'at'=32, 'repeating'=33, 'struct'=34, 'mutating'=35, 'self'=36, '='=42, ':'=43, ';'=44, '?'=45, '('=46, ')'=47, '!='=48, '=='=49, '!'=50, '||'=51, '&&'=52, '>='=53, '<='=54, '>'=55, '<'=56, '%'=57, '*'=58, '/'=59, '+'=60, '-'=61, '+='=62, '-='=63, '{'=64, '}'=65, '->'=66, ','=67, '.'=68, '_'=69, '['=70, ']'=71, '&'=72}
2023-09-08 14:39:08:041 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, STRING=3, BOOL=4, CHARACT=5, TRU=6, FAL=7, VAR=8, LET=9, NULO=10, IF=11, ELSE=12, SWITCH=13, CASE=14, DEFAULT=15, BREAK=16, CONTINUE=17, FOR=18, IN=19, RANGO=20, WHILE=21, GUARD=22, RETURN=23, FUNCION=24, PRINT=25, INOUT=26, APPEND=27, REMOVE=28, REMOVELAST=29, COUNT=30, ISEMPTY=31, AT=32, REPEATING=33, STRUCT=34, MUTATING=35, SELF=36, NUMBER=37, CADENA=38, ID_VALIDO=39, CHARACTER=40, WS=41, IG=42, DOS_PUNTOS=43, PUNTOCOMA=44, CIERRE_INTE=45, PARIZQ=46, PARDER=47, DIF=48, IG_IG=49, NOT=50, OR=51, AND=52, MAY_IG=53, MEN_IG=54, MAYOR=55, MENOR=56, MODULO=57, MUL=58, DIV=59, ADD=60, SUB=61, SUMA=62, RESTA=63, LLAVEIZQ=64, LLAVEDER=65, RETORNO=66, COMA=67, PUNTO=68, GUIONBAJO=69, CORCHIZQ=70, CORCHDER=71, DIRME=72, WHITESPACE=73, COMMENT=74, LINE_COMMENT=75}
2023-09-08 14:39:08:041 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'String'=3, 'Bool'=4, 'Character'=5, 'true'=6, 'false'=7, 'var'=8, 'let'=9, 'nil'=10, 'if'=11, 'else'=12, 'switch'=13, 'case'=14, 'default'=15, 'break'=16, 'continue'=17, 'for'=18, 'in'=19, '...'=20, 'while'=21, 'guard'=22, 'return'=23, 'func'=24, 'print'=25, 'inout'=26, 'append'=27, 'remove'=28, 'removeLast'=29, 'count'=30, 'isEmpty'=31, 'at'=32, 'repeating'=33, 'struct'=34, 'mutating'=35, 'self'=36, '='=42, ':'=43, ';'=44, '?'=45, '('=46, ')'=47, '!='=48, '=='=49, '!'=50, '||'=51, '&&'=52, '>='=53, '<='=54, '>'=55, '<'=56, '%'=57, '*'=58, '/'=59, '+'=60, '-'=61, '+='=62, '-='=63, '{'=64, '}'=65, '->'=66, ','=67, '.'=68, '_'=69, '['=70, ']'=71, '&'=72}
2023-09-08 14:39:08:097 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-08 14:39:08:098 LL1 LogManager.java:25 look=[{8..9, 11, 13, 18, 21..22, 24..25, 34, 39}, <EOF>]
2023-09-08 14:39:08:098 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:098 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-08 14:39:08:098 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-08 14:39:08:099 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:099 LL1 LogManager.java:25 
DECISION 2 in rule instruction
2023-09-08 14:39:08:099 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-08 14:39:08:099 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:099 LL1 LogManager.java:25 
DECISION 3 in rule instruction
2023-09-08 14:39:08:099 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-08 14:39:08:100 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:100 LL1 LogManager.java:25 
DECISION 4 in rule instruction
2023-09-08 14:39:08:100 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-08 14:39:08:100 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:100 LL1 LogManager.java:25 
DECISION 5 in rule instruction
2023-09-08 14:39:08:100 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-08 14:39:08:100 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:100 LL1 LogManager.java:25 
DECISION 6 in rule instruction
2023-09-08 14:39:08:100 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-08 14:39:08:101 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:101 LL1 LogManager.java:25 
DECISION 7 in rule instruction
2023-09-08 14:39:08:101 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-08 14:39:08:101 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:101 LL1 LogManager.java:25 
DECISION 8 in rule instruction
2023-09-08 14:39:08:102 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-08 14:39:08:102 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:102 LL1 LogManager.java:25 
DECISION 9 in rule instruction
2023-09-08 14:39:08:102 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 34, 39}]
2023-09-08 14:39:08:102 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:102 LL1 LogManager.java:25 
DECISION 10 in rule instruction
2023-09-08 14:39:08:103 LL1 LogManager.java:25 look=[8, 9, 39, 11, 13, 21, 18, 22, 8, 39, 39, 25, 8, 34, 24, 39, 39, 39, 39]
2023-09-08 14:39:08:103 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:103 LL1 LogManager.java:25 
DECISION 11 in rule blockinterno
2023-09-08 14:39:08:103 LL1 LogManager.java:25 look=[{8..9, 11, 13, 16..18, 21..23, 25, 39}, {14..15, 65}]
2023-09-08 14:39:08:103 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:103 LL1 LogManager.java:25 
DECISION 12 in rule instructionint
2023-09-08 14:39:08:103 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 14:39:08:104 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:104 LL1 LogManager.java:25 
DECISION 13 in rule instructionint
2023-09-08 14:39:08:104 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 14:39:08:104 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:104 LL1 LogManager.java:25 
DECISION 14 in rule instructionint
2023-09-08 14:39:08:104 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 14:39:08:104 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:104 LL1 LogManager.java:25 
DECISION 15 in rule instructionint
2023-09-08 14:39:08:104 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 14:39:08:104 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:104 LL1 LogManager.java:25 
DECISION 16 in rule instructionint
2023-09-08 14:39:08:105 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 14:39:08:105 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:105 LL1 LogManager.java:25 
DECISION 17 in rule instructionint
2023-09-08 14:39:08:105 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 14:39:08:105 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:105 LL1 LogManager.java:25 
DECISION 18 in rule instructionint
2023-09-08 14:39:08:106 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 14:39:08:106 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:106 LL1 LogManager.java:25 
DECISION 19 in rule instructionint
2023-09-08 14:39:08:106 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 14:39:08:106 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:106 LL1 LogManager.java:25 
DECISION 20 in rule instructionint
2023-09-08 14:39:08:106 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 14:39:08:106 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:107 LL1 LogManager.java:25 
DECISION 21 in rule instructionint
2023-09-08 14:39:08:107 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 14:39:08:107 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:107 LL1 LogManager.java:25 
DECISION 22 in rule instructionint
2023-09-08 14:39:08:107 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 14:39:08:107 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:107 LL1 LogManager.java:25 
DECISION 23 in rule instructionint
2023-09-08 14:39:08:107 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 14:39:08:107 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:107 LL1 LogManager.java:25 
DECISION 24 in rule instructionint
2023-09-08 14:39:08:108 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 14:39:08:108 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:108 LL1 LogManager.java:25 
DECISION 25 in rule instructionint
2023-09-08 14:39:08:108 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-09-08 14:39:08:108 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:108 LL1 LogManager.java:25 
DECISION 26 in rule instructionint
2023-09-08 14:39:08:109 LL1 LogManager.java:25 look=[8, 9, 39, 11, 13, 21, 18, 22, 17, 16, 23, 8, 39, 39, 25, 8, 39, 39, 39, 39]
2023-09-08 14:39:08:109 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:109 LL1 LogManager.java:25 
DECISION 27 in rule declavarible
2023-09-08 14:39:08:109 LL1 LogManager.java:25 look=[8, 8, 8]
2023-09-08 14:39:08:109 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:109 LL1 LogManager.java:25 
DECISION 28 in rule declaconstante
2023-09-08 14:39:08:109 LL1 LogManager.java:25 look=[9, 9]
2023-09-08 14:39:08:109 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:109 LL1 LogManager.java:25 
DECISION 29 in rule asignacionvariable
2023-09-08 14:39:08:109 LL1 LogManager.java:25 look=[39, 39, 39]
2023-09-08 14:39:08:109 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:109 LL1 LogManager.java:25 
DECISION 30 in rule tipodato
2023-09-08 14:39:08:109 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5]
2023-09-08 14:39:08:109 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:109 LL1 LogManager.java:25 
DECISION 31 in rule expr
2023-09-08 14:39:08:109 LL1 LogManager.java:25 look=[50, 46, 61, 37, 38, 6, 7, 40, 39, 10, 39, 39, 39, 1, 2, 3, 39, 39, 39]
2023-09-08 14:39:08:109 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:109 LL1 LogManager.java:25 
DECISION 32 in rule expr
2023-09-08 14:39:08:110 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null]
2023-09-08 14:39:08:110 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:110 LL1 LogManager.java:25 
DECISION 33 in rule expr
2023-09-08 14:39:08:110 LL1 LogManager.java:25 look=[null, null]
2023-09-08 14:39:08:111 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:111 LL1 LogManager.java:25 
DECISION 34 in rule sentenciaifelse
2023-09-08 14:39:08:111 LL1 LogManager.java:25 look=[11, 11, 11]
2023-09-08 14:39:08:111 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:111 LL1 LogManager.java:25 
DECISION 35 in rule switchcontrol
2023-09-08 14:39:08:111 LL1 LogManager.java:25 look=[15, 65]
2023-09-08 14:39:08:111 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:112 LL1 LogManager.java:25 
DECISION 36 in rule blockcase
2023-09-08 14:39:08:112 LL1 LogManager.java:25 look=[14, {15, 65}]
2023-09-08 14:39:08:112 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:112 LL1 LogManager.java:25 
DECISION 37 in rule forcontrol
2023-09-08 14:39:08:112 LL1 LogManager.java:25 look=[18, 18, 18]
2023-09-08 14:39:08:112 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:112 LL1 LogManager.java:25 
DECISION 38 in rule retornos
2023-09-08 14:39:08:112 LL1 LogManager.java:25 look=[23, 23]
2023-09-08 14:39:08:113 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:113 LL1 LogManager.java:25 
DECISION 39 in rule vectorcontrol
2023-09-08 14:39:08:113 LL1 LogManager.java:25 look=[8, 8, 8]
2023-09-08 14:39:08:113 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:113 LL1 LogManager.java:25 
DECISION 40 in rule blockparams
2023-09-08 14:39:08:113 LL1 LogManager.java:25 look=[{1..3, 6..7, 10, 37..40, 46, 50, 61, 67}, 71]
2023-09-08 14:39:08:113 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:113 LL1 LogManager.java:25 
DECISION 41 in rule bloqueparams
2023-09-08 14:39:08:113 LL1 LogManager.java:25 look=[67, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-09-08 14:39:08:113 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:114 LL1 LogManager.java:25 
DECISION 42 in rule vectoragregar
2023-09-08 14:39:08:114 LL1 LogManager.java:25 look=[39, 39, 39, 39, 39]
2023-09-08 14:39:08:114 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:114 LL1 LogManager.java:25 
DECISION 43 in rule vectorremover
2023-09-08 14:39:08:114 LL1 LogManager.java:25 look=[39, 39]
2023-09-08 14:39:08:114 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:114 LL1 LogManager.java:25 
DECISION 44 in rule vectoraccess
2023-09-08 14:39:08:114 LL1 LogManager.java:25 look=[39, 39, 39]
2023-09-08 14:39:08:114 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:114 LL1 LogManager.java:25 
DECISION 45 in rule matrizcontrol
2023-09-08 14:39:08:114 LL1 LogManager.java:25 look=[43, 42]
2023-09-08 14:39:08:115 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:115 LL1 LogManager.java:25 
DECISION 46 in rule tipomatriz
2023-09-08 14:39:08:115 LL1 LogManager.java:25 look=[70, 70]
2023-09-08 14:39:08:115 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:115 LL1 LogManager.java:25 
DECISION 47 in rule listavaloresmat
2023-09-08 14:39:08:115 LL1 LogManager.java:25 look=[70, 70]
2023-09-08 14:39:08:115 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:115 LL1 LogManager.java:25 
DECISION 48 in rule listavaloresmat2
2023-09-08 14:39:08:115 LL1 LogManager.java:25 look=[70, {1..3, 6..7, 10, 37..40, 46, 50, 61, 67}]
2023-09-08 14:39:08:116 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:116 LL1 LogManager.java:25 
DECISION 49 in rule listavaloresmat2
2023-09-08 14:39:08:116 LL1 LogManager.java:25 look=[null, 71]
2023-09-08 14:39:08:116 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:116 LL1 LogManager.java:25 
DECISION 50 in rule listaexpresions
2023-09-08 14:39:08:117 LL1 LogManager.java:25 look=[{1..3, 6..7, 10, 37..40, 46, 50, 61, 67}, null]
2023-09-08 14:39:08:117 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:117 LL1 LogManager.java:25 
DECISION 51 in rule listaexpresion
2023-09-08 14:39:08:117 LL1 LogManager.java:25 look=[67, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-09-08 14:39:08:117 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:117 LL1 LogManager.java:25 
DECISION 52 in rule simplematriz
2023-09-08 14:39:08:117 LL1 LogManager.java:25 look=[70, 70]
2023-09-08 14:39:08:117 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:118 LL1 LogManager.java:25 
DECISION 53 in rule listamatrizaddsubs
2023-09-08 14:39:08:118 LL1 LogManager.java:25 look=[70, null]
2023-09-08 14:39:08:118 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:119 LL1 LogManager.java:25 
DECISION 54 in rule listaatributos
2023-09-08 14:39:08:119 LL1 LogManager.java:25 look=[{8..9, 24, 35}, 65]
2023-09-08 14:39:08:119 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:119 LL1 LogManager.java:25 
DECISION 55 in rule listaatributo
2023-09-08 14:39:08:119 LL1 LogManager.java:25 look=[{1..5}, 39]
2023-09-08 14:39:08:119 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:119 LL1 LogManager.java:25 
DECISION 56 in rule listaatributo
2023-09-08 14:39:08:120 LL1 LogManager.java:25 look=[42, {8..9, 24, 35, 44, 65}]
2023-09-08 14:39:08:120 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:120 LL1 LogManager.java:25 
DECISION 57 in rule listaatributo
2023-09-08 14:39:08:120 LL1 LogManager.java:25 look=[44, {8..9, 24, 35, 65}]
2023-09-08 14:39:08:120 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:120 LL1 LogManager.java:25 
DECISION 58 in rule listaatributo
2023-09-08 14:39:08:120 LL1 LogManager.java:25 look=[42, {8..9, 24, 35, 44, 65}]
2023-09-08 14:39:08:120 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:120 LL1 LogManager.java:25 
DECISION 59 in rule listaatributo
2023-09-08 14:39:08:121 LL1 LogManager.java:25 look=[44, {8..9, 24, 35, 65}]
2023-09-08 14:39:08:121 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:121 LL1 LogManager.java:25 
DECISION 60 in rule listaatributo
2023-09-08 14:39:08:121 LL1 LogManager.java:25 look=[35, 24]
2023-09-08 14:39:08:121 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:121 LL1 LogManager.java:25 
DECISION 61 in rule listaatributo
2023-09-08 14:39:08:121 LL1 LogManager.java:25 look=[{8..9}, {8..9}, {24, 35}]
2023-09-08 14:39:08:121 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:122 LL1 LogManager.java:25 
DECISION 62 in rule ldupla
2023-09-08 14:39:08:122 LL1 LogManager.java:25 look=[39, 39]
2023-09-08 14:39:08:122 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:122 LL1 LogManager.java:25 
DECISION 63 in rule llamadafuncionstructcontrol
2023-09-08 14:39:08:122 LL1 LogManager.java:25 look=[39, 39]
2023-09-08 14:39:08:122 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:122 LL1 LogManager.java:25 
DECISION 64 in rule llamadafuncionstructcontrolret
2023-09-08 14:39:08:122 LL1 LogManager.java:25 look=[39, 39]
2023-09-08 14:39:08:122 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:122 LL1 LogManager.java:25 
DECISION 65 in rule funciondeclaracioncontrol
2023-09-08 14:39:08:122 LL1 LogManager.java:25 look=[24, 24, 24, 24]
2023-09-08 14:39:08:123 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:123 LL1 LogManager.java:25 
DECISION 66 in rule listaparametro
2023-09-08 14:39:08:123 LL1 LogManager.java:25 look=[{39, 69}, 39]
2023-09-08 14:39:08:123 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:123 LL1 LogManager.java:25 
DECISION 67 in rule listaparametro
2023-09-08 14:39:08:123 LL1 LogManager.java:25 look=[26, {1..5}]
2023-09-08 14:39:08:123 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:123 LL1 LogManager.java:25 
DECISION 68 in rule listaparametro
2023-09-08 14:39:08:123 LL1 LogManager.java:25 look=[{39, 69}, 39]
2023-09-08 14:39:08:123 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:124 LL1 LogManager.java:25 
DECISION 69 in rule listaparametro
2023-09-08 14:39:08:124 LL1 LogManager.java:25 look=[26, {1..5}]
2023-09-08 14:39:08:124 LL1 LogManager.java:25 LL(1)? true
2023-09-08 14:39:08:124 LL1 LogManager.java:25 
DECISION 70 in rule listaparametro
2023-09-08 14:39:08:124 LL1 LogManager.java:25 look=[{39, 69}, {39, 69}]
2023-09-08 14:39:08:124 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:124 LL1 LogManager.java:25 
DECISION 71 in rule funcionllamadacontrol
2023-09-08 14:39:08:124 LL1 LogManager.java:25 look=[39, 39]
2023-09-08 14:39:08:124 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:124 LL1 LogManager.java:25 
DECISION 72 in rule funcionllamadacontrolConRetorno
2023-09-08 14:39:08:124 LL1 LogManager.java:25 look=[39, 39]
2023-09-08 14:39:08:125 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:125 LL1 LogManager.java:25 
DECISION 73 in rule listaparametrosllamada
2023-09-08 14:39:08:125 LL1 LogManager.java:25 look=[39, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-09-08 14:39:08:125 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:125 LL1 LogManager.java:25 
DECISION 74 in rule listaparametrosllamada
2023-09-08 14:39:08:125 LL1 LogManager.java:25 look=[39, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-09-08 14:39:08:125 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:125 LL1 LogManager.java:25 
DECISION 75 in rule listaparametrosllamada
2023-09-08 14:39:08:125 LL1 LogManager.java:25 look=[72, 72, {1..3, 6..7, 10, 37..40, 46, 50, 61}, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-09-08 14:39:08:125 LL1 LogManager.java:25 LL(1)? false
2023-09-08 14:39:08:132 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-09-08 14:39:08:146 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-09-08 14:39:08:146 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,18:9]
2023-09-08 14:39:08:147 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,18:17].[@-1,28:30='blk',<0>,18:23]
2023-09-08 14:39:08:148 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-08 14:39:08:148 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,24:5]
2023-09-08 14:39:08:149 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-09-08 14:39:08:149 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,31:13]
2023-09-08 14:39:08:149 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,31:27]
2023-09-08 14:39:08:152 action-translator LogManager.java:25 translate  $inst = $declavarible.decvbl
2023-09-08 14:39:08:152 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,38:30]
2023-09-08 14:39:08:152 action-translator LogManager.java:25 qattr [@-1,10:21='declavarible',<0>,38:38].[@-1,23:28='decvbl',<0>,38:51]
2023-09-08 14:39:08:152 action-translator LogManager.java:25 translate  $inst = $declaconstante.deccon
2023-09-08 14:39:08:152 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:32]
2023-09-08 14:39:08:152 action-translator LogManager.java:25 qattr [@-1,10:23='declaconstante',<0>,39:40].[@-1,25:30='deccon',<0>,39:55]
2023-09-08 14:39:08:153 action-translator LogManager.java:25 translate  $inst = $asignacionvariable.asgvbl
2023-09-08 14:39:08:153 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:36]
2023-09-08 14:39:08:153 action-translator LogManager.java:25 qattr [@-1,10:27='asignacionvariable',<0>,40:44].[@-1,29:34='asgvbl',<0>,40:63]
2023-09-08 14:39:08:153 action-translator LogManager.java:25 translate  $inst = $sentenciaifelse.myIfElse
2023-09-08 14:39:08:153 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-09-08 14:39:08:153 action-translator LogManager.java:25 qattr [@-1,10:24='sentenciaifelse',<0>,41:28].[@-1,26:33='myIfElse',<0>,41:44]
2023-09-08 14:39:08:153 action-translator LogManager.java:25 translate  $inst = $switchcontrol.mySwitch
2023-09-08 14:39:08:153 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:18]
2023-09-08 14:39:08:153 action-translator LogManager.java:25 qattr [@-1,10:22='switchcontrol',<0>,42:26].[@-1,24:31='mySwitch',<0>,42:40]
2023-09-08 14:39:08:153 action-translator LogManager.java:25 translate  $inst = $whilecontrol.whict
2023-09-08 14:39:08:154 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:17]
2023-09-08 14:39:08:154 action-translator LogManager.java:25 qattr [@-1,10:21='whilecontrol',<0>,43:25].[@-1,23:27='whict',<0>,43:38]
2023-09-08 14:39:08:154 action-translator LogManager.java:25 translate  $inst = $forcontrol.forct
2023-09-08 14:39:08:154 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:15]
2023-09-08 14:39:08:154 action-translator LogManager.java:25 qattr [@-1,10:19='forcontrol',<0>,44:23].[@-1,21:25='forct',<0>,44:34]
2023-09-08 14:39:08:154 action-translator LogManager.java:25 translate  $inst = $guardcontrol.guct
2023-09-08 14:39:08:154 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:17]
2023-09-08 14:39:08:154 action-translator LogManager.java:25 qattr [@-1,10:21='guardcontrol',<0>,45:25].[@-1,23:26='guct',<0>,45:38]
2023-09-08 14:39:08:154 action-translator LogManager.java:25 translate  $inst = $vectorcontrol.vect 
2023-09-08 14:39:08:154 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:31]
2023-09-08 14:39:08:154 action-translator LogManager.java:25 qattr [@-1,10:22='vectorcontrol',<0>,46:39].[@-1,24:27='vect',<0>,46:53]
2023-09-08 14:39:08:154 action-translator LogManager.java:25 translate  $inst = $vectoragregar.veadct 
2023-09-08 14:39:08:154 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:19]
2023-09-08 14:39:08:154 action-translator LogManager.java:25 qattr [@-1,10:22='vectoragregar',<0>,47:27].[@-1,24:29='veadct',<0>,47:41]
2023-09-08 14:39:08:154 action-translator LogManager.java:25 translate  $inst = $vectorremover.vermct 
2023-09-08 14:39:08:155 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:19]
2023-09-08 14:39:08:155 action-translator LogManager.java:25 qattr [@-1,10:22='vectorremover',<0>,48:27].[@-1,24:29='vermct',<0>,48:41]
2023-09-08 14:39:08:155 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-08 14:39:08:155 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,49:27]
2023-09-08 14:39:08:155 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,49:35].[@-1,20:23='prnt',<0>,49:45]
2023-09-08 14:39:08:155 action-translator LogManager.java:25 translate  $inst = $matrizcontrol.matct
2023-09-08 14:39:08:155 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,50:31]
2023-09-08 14:39:08:155 action-translator LogManager.java:25 qattr [@-1,10:22='matrizcontrol',<0>,50:39].[@-1,24:28='matct',<0>,50:53]
2023-09-08 14:39:08:155 action-translator LogManager.java:25 translate  $inst = $structcontrol.struck
2023-09-08 14:39:08:155 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,51:18]
2023-09-08 14:39:08:155 action-translator LogManager.java:25 qattr [@-1,10:22='structcontrol',<0>,51:26].[@-1,24:29='struck',<0>,51:40]
2023-09-08 14:39:08:155 action-translator LogManager.java:25 translate  $inst = $funciondeclaracioncontrol.fdc
2023-09-08 14:39:08:156 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,52:30]
2023-09-08 14:39:08:156 action-translator LogManager.java:25 qattr [@-1,10:34='funciondeclaracioncontrol',<0>,52:38].[@-1,36:38='fdc',<0>,52:64]
2023-09-08 14:39:08:156 action-translator LogManager.java:25 translate  $inst = $funcionllamadacontrol.flctl
2023-09-08 14:39:08:156 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,53:26]
2023-09-08 14:39:08:156 action-translator LogManager.java:25 qattr [@-1,10:30='funcionllamadacontrol',<0>,53:34].[@-1,32:36='flctl',<0>,53:56]
2023-09-08 14:39:08:156 action-translator LogManager.java:25 translate  $inst = $structexpr.strexpr
2023-09-08 14:39:08:156 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,54:28]
2023-09-08 14:39:08:156 action-translator LogManager.java:25 qattr [@-1,10:19='structexpr',<0>,54:36].[@-1,21:27='strexpr',<0>,54:47]
2023-09-08 14:39:08:157 action-translator LogManager.java:25 translate  $inst = $asignacionparametrostruct.llmstruasig
2023-09-08 14:39:08:157 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,55:43]
2023-09-08 14:39:08:157 action-translator LogManager.java:25 qattr [@-1,10:34='asignacionparametrostruct',<0>,55:51].[@-1,36:46='llmstruasig',<0>,55:77]
2023-09-08 14:39:08:157 action-translator LogManager.java:25 translate  $inst = $llamadafuncionstructcontrol.llmstrufun
2023-09-08 14:39:08:157 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,56:45]
2023-09-08 14:39:08:157 action-translator LogManager.java:25 qattr [@-1,10:36='llamadafuncionstructcontrol',<0>,56:53].[@-1,38:47='llmstrufun',<0>,56:81]
2023-09-08 14:39:08:158 action-translator LogManager.java:25 translate 
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  
2023-09-08 14:39:08:158 action-translator LogManager.java:25 attr [@-1,7:12='blkint',<0>,62:5]
2023-09-08 14:39:08:159 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    
2023-09-08 14:39:08:159 action-translator LogManager.java:25 attr [@-1,115:120='blkint',<0>,69:13]
2023-09-08 14:39:08:159 action-translator LogManager.java:25 attr [@-1,132:137='blkint',<0>,69:30]
2023-09-08 14:39:08:161 action-translator LogManager.java:25 translate  $insint = $declavarible.decvbl
2023-09-08 14:39:08:161 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,77:30]
2023-09-08 14:39:08:161 action-translator LogManager.java:25 qattr [@-1,12:23='declavarible',<0>,77:40].[@-1,25:30='decvbl',<0>,77:53]
2023-09-08 14:39:08:161 action-translator LogManager.java:25 translate  $insint = $declaconstante.deccon
2023-09-08 14:39:08:161 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,78:32]
2023-09-08 14:39:08:161 action-translator LogManager.java:25 qattr [@-1,12:25='declaconstante',<0>,78:42].[@-1,27:32='deccon',<0>,78:57]
2023-09-08 14:39:08:161 action-translator LogManager.java:25 translate  $insint = $asignacionvariable.asgvbl
2023-09-08 14:39:08:161 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,79:36]
2023-09-08 14:39:08:161 action-translator LogManager.java:25 qattr [@-1,12:29='asignacionvariable',<0>,79:46].[@-1,31:36='asgvbl',<0>,79:65]
2023-09-08 14:39:08:161 action-translator LogManager.java:25 translate  $insint = $sentenciaifelse.myIfElse
2023-09-08 14:39:08:162 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,80:20]
2023-09-08 14:39:08:162 action-translator LogManager.java:25 qattr [@-1,12:26='sentenciaifelse',<0>,80:30].[@-1,28:35='myIfElse',<0>,80:46]
2023-09-08 14:39:08:162 action-translator LogManager.java:25 translate  $insint = $switchcontrol.mySwitch
2023-09-08 14:39:08:162 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,81:18]
2023-09-08 14:39:08:162 action-translator LogManager.java:25 qattr [@-1,12:24='switchcontrol',<0>,81:28].[@-1,26:33='mySwitch',<0>,81:42]
2023-09-08 14:39:08:162 action-translator LogManager.java:25 translate  $insint = $whilecontrol.whict
2023-09-08 14:39:08:162 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,82:17]
2023-09-08 14:39:08:162 action-translator LogManager.java:25 qattr [@-1,12:23='whilecontrol',<0>,82:27].[@-1,25:29='whict',<0>,82:40]
2023-09-08 14:39:08:163 action-translator LogManager.java:25 translate  $insint = $forcontrol.forct
2023-09-08 14:39:08:164 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,83:15]
2023-09-08 14:39:08:164 action-translator LogManager.java:25 qattr [@-1,12:21='forcontrol',<0>,83:25].[@-1,23:27='forct',<0>,83:36]
2023-09-08 14:39:08:164 action-translator LogManager.java:25 translate  $insint = $guardcontrol.guct
2023-09-08 14:39:08:164 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,84:17]
2023-09-08 14:39:08:165 action-translator LogManager.java:25 qattr [@-1,12:23='guardcontrol',<0>,84:27].[@-1,25:28='guct',<0>,84:40]
2023-09-08 14:39:08:165 action-translator LogManager.java:25 translate  $insint = $continuee.coct
2023-09-08 14:39:08:165 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,85:27]
2023-09-08 14:39:08:165 action-translator LogManager.java:25 qattr [@-1,12:20='continuee',<0>,85:37].[@-1,22:25='coct',<0>,85:47]
2023-09-08 14:39:08:165 action-translator LogManager.java:25 translate  $insint = $breakk.brkct
2023-09-08 14:39:08:166 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,86:24]
2023-09-08 14:39:08:166 action-translator LogManager.java:25 qattr [@-1,12:17='breakk',<0>,86:34].[@-1,19:23='brkct',<0>,86:41]
2023-09-08 14:39:08:166 action-translator LogManager.java:25 translate  $insint = $retornos.rect 
2023-09-08 14:39:08:166 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,87:26]
2023-09-08 14:39:08:166 action-translator LogManager.java:25 qattr [@-1,12:19='retornos',<0>,87:36].[@-1,21:24='rect',<0>,87:45]
2023-09-08 14:39:08:166 action-translator LogManager.java:25 translate  $insint = $vectorcontrol.vect 
2023-09-08 14:39:08:166 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,88:31]
2023-09-08 14:39:08:166 action-translator LogManager.java:25 qattr [@-1,12:24='vectorcontrol',<0>,88:41].[@-1,26:29='vect',<0>,88:55]
2023-09-08 14:39:08:166 action-translator LogManager.java:25 translate  $insint = $vectoragregar.veadct 
2023-09-08 14:39:08:167 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,89:32]
2023-09-08 14:39:08:167 action-translator LogManager.java:25 qattr [@-1,12:24='vectoragregar',<0>,89:42].[@-1,26:31='veadct',<0>,89:56]
2023-09-08 14:39:08:167 action-translator LogManager.java:25 translate  $insint = $vectorremover.vermct 
2023-09-08 14:39:08:167 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,90:31]
2023-09-08 14:39:08:167 action-translator LogManager.java:25 qattr [@-1,12:24='vectorremover',<0>,90:41].[@-1,26:31='vermct',<0>,90:55]
2023-09-08 14:39:08:167 action-translator LogManager.java:25 translate  $insint = $printstmt.prnt
2023-09-08 14:39:08:167 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,91:27]
2023-09-08 14:39:08:167 action-translator LogManager.java:25 qattr [@-1,12:20='printstmt',<0>,91:37].[@-1,22:25='prnt',<0>,91:47]
2023-09-08 14:39:08:167 action-translator LogManager.java:25 translate  $insint = $matrizcontrol.matct
2023-09-08 14:39:08:167 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,92:31]
2023-09-08 14:39:08:167 action-translator LogManager.java:25 qattr [@-1,12:24='matrizcontrol',<0>,92:41].[@-1,26:30='matct',<0>,92:55]
2023-09-08 14:39:08:168 action-translator LogManager.java:25 translate  $insint = $funcionllamadacontrol.flctl
2023-09-08 14:39:08:168 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,93:26]
2023-09-08 14:39:08:168 action-translator LogManager.java:25 qattr [@-1,12:32='funcionllamadacontrol',<0>,93:36].[@-1,34:38='flctl',<0>,93:58]
2023-09-08 14:39:08:168 action-translator LogManager.java:25 translate  $insint = $structexpr.strexpr
2023-09-08 14:39:08:168 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,94:28]
2023-09-08 14:39:08:168 action-translator LogManager.java:25 qattr [@-1,12:21='structexpr',<0>,94:38].[@-1,23:29='strexpr',<0>,94:49]
2023-09-08 14:39:08:168 action-translator LogManager.java:25 translate  $insint = $asignacionparametrostruct.llmstruasig
2023-09-08 14:39:08:168 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,95:43]
2023-09-08 14:39:08:168 action-translator LogManager.java:25 qattr [@-1,12:36='asignacionparametrostruct',<0>,95:53].[@-1,38:48='llmstruasig',<0>,95:79]
2023-09-08 14:39:08:168 action-translator LogManager.java:25 translate  $insint = $llamadafuncionstructcontrol.llmstrufun
2023-09-08 14:39:08:168 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,96:45]
2023-09-08 14:39:08:169 action-translator LogManager.java:25 qattr [@-1,12:38='llamadafuncionstructcontrol',<0>,96:55].[@-1,40:49='llmstrufun',<0>,96:83]
2023-09-08 14:39:08:169 action-translator LogManager.java:25 translate $decvbl = instructions.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)
2023-09-08 14:39:08:170 action-translator LogManager.java:25 attr [@-1,1:6='decvbl',<0>,107:44]
2023-09-08 14:39:08:170 action-translator LogManager.java:25 qattr [@-1,47:49='VAR',<0>,107:90].[@-1,51:54='line',<0>,107:94]
2023-09-08 14:39:08:171 action-translator LogManager.java:25 qattr [@-1,58:60='VAR',<0>,107:101].[@-1,62:64='pos',<0>,107:105]
2023-09-08 14:39:08:171 action-translator LogManager.java:25 qattr [@-1,68:76='ID_VALIDO',<0>,107:111].[@-1,78:81='text',<0>,107:121]
2023-09-08 14:39:08:172 action-translator LogManager.java:25 qattr [@-1,85:92='tipodato',<0>,107:128].[@-1,94:97='tipo',<0>,107:137]
2023-09-08 14:39:08:172 action-translator LogManager.java:25 qattr [@-1,101:104='expr',<0>,107:144].[@-1,106:106='e',<0>,107:149]
2023-09-08 14:39:08:172 action-translator LogManager.java:25 translate $decvbl = instructions.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)
2023-09-08 14:39:08:172 action-translator LogManager.java:25 attr [@-1,1:6='decvbl',<0>,108:25]
2023-09-08 14:39:08:172 action-translator LogManager.java:25 qattr [@-1,54:56='VAR',<0>,108:78].[@-1,58:61='line',<0>,108:82]
2023-09-08 14:39:08:172 action-translator LogManager.java:25 qattr [@-1,65:67='VAR',<0>,108:89].[@-1,69:71='pos',<0>,108:93]
2023-09-08 14:39:08:172 action-translator LogManager.java:25 qattr [@-1,75:83='ID_VALIDO',<0>,108:99].[@-1,85:88='text',<0>,108:109]
2023-09-08 14:39:08:173 action-translator LogManager.java:25 qattr [@-1,92:95='expr',<0>,108:116].[@-1,97:97='e',<0>,108:121]
2023-09-08 14:39:08:173 action-translator LogManager.java:25 translate $decvbl = instructions.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)
2023-09-08 14:39:08:173 action-translator LogManager.java:25 attr [@-1,1:6='decvbl',<0>,109:49]
2023-09-08 14:39:08:173 action-translator LogManager.java:25 qattr [@-1,53:55='VAR',<0>,109:101].[@-1,57:60='line',<0>,109:105]
2023-09-08 14:39:08:173 action-translator LogManager.java:25 qattr [@-1,64:66='VAR',<0>,109:112].[@-1,68:70='pos',<0>,109:116]
2023-09-08 14:39:08:173 action-translator LogManager.java:25 qattr [@-1,74:82='ID_VALIDO',<0>,109:122].[@-1,84:87='text',<0>,109:132]
2023-09-08 14:39:08:173 action-translator LogManager.java:25 qattr [@-1,91:98='tipodato',<0>,109:139].[@-1,100:103='tipo',<0>,109:148]
2023-09-08 14:39:08:174 action-translator LogManager.java:25 translate $deccon = instructions.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)
2023-09-08 14:39:08:174 action-translator LogManager.java:25 attr [@-1,1:6='deccon',<0>,113:45]
2023-09-08 14:39:08:174 action-translator LogManager.java:25 qattr [@-1,48:50='LET',<0>,113:92].[@-1,52:55='line',<0>,113:96]
2023-09-08 14:39:08:174 action-translator LogManager.java:25 qattr [@-1,59:61='LET',<0>,113:103].[@-1,63:65='pos',<0>,113:107]
2023-09-08 14:39:08:174 action-translator LogManager.java:25 qattr [@-1,69:77='ID_VALIDO',<0>,113:113].[@-1,79:82='text',<0>,113:123]
2023-09-08 14:39:08:175 action-translator LogManager.java:25 qattr [@-1,86:93='tipodato',<0>,113:130].[@-1,95:98='tipo',<0>,113:139]
2023-09-08 14:39:08:175 action-translator LogManager.java:25 qattr [@-1,102:105='expr',<0>,113:146].[@-1,107:107='e',<0>,113:151]
2023-09-08 14:39:08:175 action-translator LogManager.java:25 translate $deccon = instructions.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)
2023-09-08 14:39:08:175 action-translator LogManager.java:25 attr [@-1,1:6='deccon',<0>,114:25]
2023-09-08 14:39:08:175 action-translator LogManager.java:25 qattr [@-1,55:57='LET',<0>,114:79].[@-1,59:62='line',<0>,114:83]
2023-09-08 14:39:08:176 action-translator LogManager.java:25 qattr [@-1,66:68='LET',<0>,114:90].[@-1,70:72='pos',<0>,114:94]
2023-09-08 14:39:08:176 action-translator LogManager.java:25 qattr [@-1,76:84='ID_VALIDO',<0>,114:100].[@-1,86:89='text',<0>,114:110]
2023-09-08 14:39:08:176 action-translator LogManager.java:25 qattr [@-1,93:96='expr',<0>,114:117].[@-1,98:98='e',<0>,114:122]
2023-09-08 14:39:08:177 action-translator LogManager.java:25 translate  $asgvbl = instructions.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-09-08 14:39:08:177 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,118:22]
2023-09-08 14:39:08:177 action-translator LogManager.java:25 qattr [@-1,47:55='ID_VALIDO',<0>,118:67].[@-1,57:60='line',<0>,118:77]
2023-09-08 14:39:08:178 action-translator LogManager.java:25 qattr [@-1,64:72='ID_VALIDO',<0>,118:84].[@-1,74:76='pos',<0>,118:94]
2023-09-08 14:39:08:178 action-translator LogManager.java:25 qattr [@-1,80:88='ID_VALIDO',<0>,118:100].[@-1,90:93='text',<0>,118:110]
2023-09-08 14:39:08:178 action-translator LogManager.java:25 qattr [@-1,97:100='expr',<0>,118:117].[@-1,102:102='e',<0>,118:122]
2023-09-08 14:39:08:178 action-translator LogManager.java:25 translate  $asgvbl = instructions.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-09-08 14:39:08:179 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,119:24]
2023-09-08 14:39:08:179 action-translator LogManager.java:25 qattr [@-1,43:51='ID_VALIDO',<0>,119:65].[@-1,53:56='line',<0>,119:75]
2023-09-08 14:39:08:180 action-translator LogManager.java:25 qattr [@-1,60:68='ID_VALIDO',<0>,119:82].[@-1,70:72='pos',<0>,119:92]
2023-09-08 14:39:08:180 action-translator LogManager.java:25 qattr [@-1,76:84='ID_VALIDO',<0>,119:98].[@-1,86:89='text',<0>,119:108]
2023-09-08 14:39:08:180 action-translator LogManager.java:25 qattr [@-1,93:96='expr',<0>,119:115].[@-1,98:98='e',<0>,119:120]
2023-09-08 14:39:08:181 action-translator LogManager.java:25 translate  $asgvbl = instructions.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-09-08 14:39:08:181 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,120:25]
2023-09-08 14:39:08:181 action-translator LogManager.java:25 qattr [@-1,44:52='ID_VALIDO',<0>,120:67].[@-1,54:57='line',<0>,120:77]
2023-09-08 14:39:08:181 action-translator LogManager.java:25 qattr [@-1,61:69='ID_VALIDO',<0>,120:84].[@-1,71:73='pos',<0>,120:94]
2023-09-08 14:39:08:181 action-translator LogManager.java:25 qattr [@-1,77:85='ID_VALIDO',<0>,120:100].[@-1,87:90='text',<0>,120:110]
2023-09-08 14:39:08:183 action-translator LogManager.java:25 qattr [@-1,94:97='expr',<0>,120:117].[@-1,99:99='e',<0>,120:122]
2023-09-08 14:39:08:183 action-translator LogManager.java:25 translate  $tipo = environment.INTEGER 
2023-09-08 14:39:08:184 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,124:8]
2023-09-08 14:39:08:184 action-translator LogManager.java:25 translate  $tipo = environment.FLOAT 
2023-09-08 14:39:08:184 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,125:10]
2023-09-08 14:39:08:184 action-translator LogManager.java:25 translate  $tipo = environment.STRING 
2023-09-08 14:39:08:184 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,126:11]
2023-09-08 14:39:08:184 action-translator LogManager.java:25 translate  $tipo = environment.BOOLEAN 
2023-09-08 14:39:08:185 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,127:9]
2023-09-08 14:39:08:185 action-translator LogManager.java:25 translate  $tipo = environment.CHARACTER 
2023-09-08 14:39:08:185 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,128:12]
2023-09-08 14:39:08:188 action-translator LogManager.java:25 translate 
2023-09-08 14:39:08:188 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) 
2023-09-08 14:39:08:188 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:70]
2023-09-08 14:39:08:188 action-translator LogManager.java:25 qattr [@-1,32:36='right',<0>,2:100].[@-1,38:42='start',<0>,2:106]
2023-09-08 14:39:08:189 action-translator LogManager.java:25 qattr [@-1,56:60='right',<0>,2:124].[@-1,62:66='start',<0>,2:130]
2023-09-08 14:39:08:189 action-translator LogManager.java:25 qattr [@-1,82:86='right',<0>,2:150].[@-1,88:88='e',<0>,2:156]
2023-09-08 14:39:08:189 action-translator LogManager.java:25 qattr [@-1,92:93='op',<0>,2:160].[@-1,95:98='text',<0>,2:163]
2023-09-08 14:39:08:189 action-translator LogManager.java:25 qattr [@-1,102:106='right',<0>,2:170].[@-1,108:108='e',<0>,2:176]
2023-09-08 14:39:08:189 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-08 14:39:08:189 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:79]
2023-09-08 14:39:08:189 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,3:84].[@-1,12:12='e',<0>,3:89]
2023-09-08 14:39:08:190 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    
2023-09-08 14:39:08:190 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,6:30].[@-1,39:42='text',<0>,6:37]
2023-09-08 14:39:08:190 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,7:43].[@-1,102:105='text',<0>,7:50]
2023-09-08 14:39:08:190 action-translator LogManager.java:25 attr [@-1,377:377='e',<0>,16:13]
2023-09-08 14:39:08:190 action-translator LogManager.java:25 qattr [@-1,407:412='NUMBER',<0>,16:43].[@-1,414:417='line',<0>,16:50]
2023-09-08 14:39:08:190 action-translator LogManager.java:25 qattr [@-1,420:425='NUMBER',<0>,16:56].[@-1,427:429='pos',<0>,16:63]
2023-09-08 14:39:08:190 action-translator LogManager.java:25 qattr [@-1,510:515='NUMBER',<0>,18:37].[@-1,517:520='text',<0>,18:44]
2023-09-08 14:39:08:190 action-translator LogManager.java:25 attr [@-1,613:613='e',<0>,22:13]
2023-09-08 14:39:08:190 action-translator LogManager.java:25 qattr [@-1,643:648='NUMBER',<0>,22:43].[@-1,650:653='line',<0>,22:50]
2023-09-08 14:39:08:190 action-translator LogManager.java:25 qattr [@-1,656:661='NUMBER',<0>,22:56].[@-1,663:665='pos',<0>,22:63]
2023-09-08 14:39:08:191 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-08 14:39:08:191 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,27:30].[@-1,39:42='text',<0>,27:37]
2023-09-08 14:39:08:191 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,28:43].[@-1,102:105='text',<0>,28:50]
2023-09-08 14:39:08:191 action-translator LogManager.java:25 attr [@-1,374:374='e',<0>,37:10]
2023-09-08 14:39:08:191 action-translator LogManager.java:25 qattr [@-1,404:409='NUMBER',<0>,37:40].[@-1,411:414='line',<0>,37:47]
2023-09-08 14:39:08:191 action-translator LogManager.java:25 qattr [@-1,417:422='NUMBER',<0>,37:53].[@-1,424:426='pos',<0>,37:60]
2023-09-08 14:39:08:191 action-translator LogManager.java:25 qattr [@-1,506:511='NUMBER',<0>,39:37].[@-1,513:516='text',<0>,39:44]
2023-09-08 14:39:08:191 action-translator LogManager.java:25 attr [@-1,621:621='e',<0>,43:13]
2023-09-08 14:39:08:191 action-translator LogManager.java:25 qattr [@-1,651:656='NUMBER',<0>,43:43].[@-1,658:661='line',<0>,43:50]
2023-09-08 14:39:08:191 action-translator LogManager.java:25 qattr [@-1,664:669='NUMBER',<0>,43:56].[@-1,671:673='pos',<0>,43:63]
2023-09-08 14:39:08:191 action-translator LogManager.java:25 translate 
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-08 14:39:08:191 action-translator LogManager.java:25 qattr [@-1,18:23='CADENA',<0>,48:16].[@-1,25:28='text',<0>,48:23]
2023-09-08 14:39:08:191 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,49:9]
2023-09-08 14:39:08:191 action-translator LogManager.java:25 qattr [@-1,70:75='CADENA',<0>,49:39].[@-1,77:80='line',<0>,49:46]
2023-09-08 14:39:08:192 action-translator LogManager.java:25 qattr [@-1,84:89='CADENA',<0>,49:53].[@-1,91:93='pos',<0>,49:60]
2023-09-08 14:39:08:192 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-09-08 14:39:08:192 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,51:32]
2023-09-08 14:39:08:192 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,51:62].[@-1,36:39='line',<0>,51:66]
2023-09-08 14:39:08:192 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,51:73].[@-1,47:49='pos',<0>,51:77]
2023-09-08 14:39:08:192 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-09-08 14:39:08:192 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,52:32]
2023-09-08 14:39:08:192 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,52:62].[@-1,36:39='line',<0>,52:66]
2023-09-08 14:39:08:192 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,52:73].[@-1,47:49='pos',<0>,52:77]
2023-09-08 14:39:08:192 action-translator LogManager.java:25 translate  
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    
2023-09-08 14:39:08:192 action-translator LogManager.java:25 qattr [@-1,19:27='CHARACTER',<0>,55:16].[@-1,29:32='text',<0>,55:26]
2023-09-08 14:39:08:192 action-translator LogManager.java:25 attr [@-1,44:44='e',<0>,56:9]
2023-09-08 14:39:08:192 action-translator LogManager.java:25 qattr [@-1,74:82='CHARACTER',<0>,56:39].[@-1,84:87='line',<0>,56:49]
2023-09-08 14:39:08:193 action-translator LogManager.java:25 qattr [@-1,91:99='CHARACTER',<0>,56:56].[@-1,101:103='pos',<0>,56:66]
2023-09-08 14:39:08:193 action-translator LogManager.java:25 translate 
        id := $ID_VALIDO.text
        $e = instructions.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    
2023-09-08 14:39:08:193 action-translator LogManager.java:25 qattr [@-1,17:25='ID_VALIDO',<0>,60:15].[@-1,27:30='text',<0>,60:25]
2023-09-08 14:39:08:193 action-translator LogManager.java:25 attr [@-1,42:42='e',<0>,61:9]
2023-09-08 14:39:08:193 action-translator LogManager.java:25 qattr [@-1,70:78='ID_VALIDO',<0>,61:37].[@-1,80:83='line',<0>,61:47]
2023-09-08 14:39:08:193 action-translator LogManager.java:25 qattr [@-1,86:94='ID_VALIDO',<0>,61:53].[@-1,96:98='pos',<0>,61:63]
2023-09-08 14:39:08:193 action-translator LogManager.java:25 translate $e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)
2023-09-08 14:39:08:193 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,63:32]
2023-09-08 14:39:08:193 action-translator LogManager.java:25 qattr [@-1,31:34='NULO',<0>,63:62].[@-1,36:39='line',<0>,63:67]
2023-09-08 14:39:08:194 action-translator LogManager.java:25 qattr [@-1,43:46='NULO',<0>,63:74].[@-1,48:50='pos',<0>,63:79]
2023-09-08 14:39:08:194 action-translator LogManager.java:25 qattr [@-1,54:57='NULO',<0>,63:85].[@-1,59:62='text',<0>,63:90]
2023-09-08 14:39:08:194 action-translator LogManager.java:25 translate  $e = $vectorvacio.veemct
2023-09-08 14:39:08:194 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,64:40]
2023-09-08 14:39:08:194 action-translator LogManager.java:25 qattr [@-1,7:17='vectorvacio',<0>,64:45].[@-1,19:24='veemct',<0>,64:57]
2023-09-08 14:39:08:194 action-translator LogManager.java:25 translate  $e = $vectorcount.vecnct
2023-09-08 14:39:08:194 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,65:40]
2023-09-08 14:39:08:194 action-translator LogManager.java:25 qattr [@-1,7:17='vectorcount',<0>,65:45].[@-1,19:24='vecnct',<0>,65:57]
2023-09-08 14:39:08:194 action-translator LogManager.java:25 translate  $e = $vectoraccess.vepposct
2023-09-08 14:39:08:195 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,66:41]
2023-09-08 14:39:08:195 action-translator LogManager.java:25 qattr [@-1,7:18='vectoraccess',<0>,66:46].[@-1,20:27='vepposct',<0>,66:59]
2023-09-08 14:39:08:195 action-translator LogManager.java:25 translate  $e = $intembebida.intemb
2023-09-08 14:39:08:195 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,67:40]
2023-09-08 14:39:08:195 action-translator LogManager.java:25 qattr [@-1,7:17='intembebida',<0>,67:45].[@-1,19:24='intemb',<0>,67:57]
2023-09-08 14:39:08:195 action-translator LogManager.java:25 translate  $e = $floatembebida.floemb
2023-09-08 14:39:08:195 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,68:42]
2023-09-08 14:39:08:195 action-translator LogManager.java:25 qattr [@-1,7:19='floatembebida',<0>,68:47].[@-1,21:26='floemb',<0>,68:61]
2023-09-08 14:39:08:195 action-translator LogManager.java:25 translate  $e = $stringembebida.stremb
2023-09-08 14:39:08:195 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,69:43]
2023-09-08 14:39:08:195 action-translator LogManager.java:25 qattr [@-1,7:20='stringembebida',<0>,69:48].[@-1,22:27='stremb',<0>,69:63]
2023-09-08 14:39:08:195 action-translator LogManager.java:25 translate  $e = $funcionllamadacontrolConRetorno.flctlret
2023-09-08 14:39:08:195 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,70:60]
2023-09-08 14:39:08:195 action-translator LogManager.java:25 qattr [@-1,7:37='funcionllamadacontrolConRetorno',<0>,70:65].[@-1,39:46='flctlret',<0>,70:97]
2023-09-08 14:39:08:195 action-translator LogManager.java:25 translate  $e = $llamadastruct.llmstru
2023-09-08 14:39:08:195 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,71:42]
2023-09-08 14:39:08:195 action-translator LogManager.java:25 qattr [@-1,7:19='llamadastruct',<0>,71:47].[@-1,21:27='llmstru',<0>,71:61]
2023-09-08 14:39:08:195 action-translator LogManager.java:25 translate  $e = $llamadafuncionstructcontrolret.llmstrufunret
2023-09-08 14:39:08:195 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,72:59]
2023-09-08 14:39:08:195 action-translator LogManager.java:25 qattr [@-1,7:36='llamadafuncionstructcontrolret',<0>,72:64].[@-1,38:50='llmstrufunret',<0>,72:95]
2023-09-08 14:39:08:196 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 26)
2023-09-08 14:39:08:196 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:39:08:196 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,75:120]
2023-09-08 14:39:08:196 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,75:150].[@-1,37:41='start',<0>,75:155]
2023-09-08 14:39:08:196 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,75:173].[@-1,60:64='start',<0>,75:178]
2023-09-08 14:39:08:196 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,75:198].[@-1,85:85='e',<0>,75:203]
2023-09-08 14:39:08:196 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,75:207].[@-1,92:95='text',<0>,75:210]
2023-09-08 14:39:08:196 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,75:217].[@-1,105:105='e',<0>,75:223]
2023-09-08 14:39:08:197 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 25)
2023-09-08 14:39:08:197 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:39:08:197 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,76:149]
2023-09-08 14:39:08:197 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,76:179].[@-1,37:41='start',<0>,76:184]
2023-09-08 14:39:08:197 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,76:202].[@-1,60:64='start',<0>,76:207]
2023-09-08 14:39:08:197 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,76:227].[@-1,85:85='e',<0>,76:232]
2023-09-08 14:39:08:197 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,76:236].[@-1,92:95='text',<0>,76:239]
2023-09-08 14:39:08:197 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,76:246].[@-1,105:105='e',<0>,76:252]
2023-09-08 14:39:08:197 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2023-09-08 14:39:08:198 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:39:08:198 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,77:149]
2023-09-08 14:39:08:198 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,77:179].[@-1,37:41='start',<0>,77:184]
2023-09-08 14:39:08:198 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,77:202].[@-1,60:64='start',<0>,77:207]
2023-09-08 14:39:08:198 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,77:227].[@-1,85:85='e',<0>,77:232]
2023-09-08 14:39:08:198 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,77:236].[@-1,92:95='text',<0>,77:239]
2023-09-08 14:39:08:198 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,77:246].[@-1,105:105='e',<0>,77:252]
2023-09-08 14:39:08:198 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-09-08 14:39:08:198 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:39:08:198 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,78:154]
2023-09-08 14:39:08:198 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,78:184].[@-1,37:41='start',<0>,78:189]
2023-09-08 14:39:08:198 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,78:207].[@-1,60:64='start',<0>,78:212]
2023-09-08 14:39:08:198 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,78:232].[@-1,85:85='e',<0>,78:237]
2023-09-08 14:39:08:198 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,78:241].[@-1,92:95='text',<0>,78:244]
2023-09-08 14:39:08:198 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,78:251].[@-1,105:105='e',<0>,78:257]
2023-09-08 14:39:08:198 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-08 14:39:08:199 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:39:08:199 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,79:154]
2023-09-08 14:39:08:199 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,79:184].[@-1,37:41='start',<0>,79:189]
2023-09-08 14:39:08:199 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,79:207].[@-1,60:64='start',<0>,79:212]
2023-09-08 14:39:08:199 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,79:232].[@-1,85:85='e',<0>,79:237]
2023-09-08 14:39:08:199 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,79:241].[@-1,92:95='text',<0>,79:244]
2023-09-08 14:39:08:199 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,79:251].[@-1,105:105='e',<0>,79:257]
2023-09-08 14:39:08:199 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-08 14:39:08:199 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:39:08:199 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,80:151]
2023-09-08 14:39:08:199 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,80:181].[@-1,37:41='start',<0>,80:186]
2023-09-08 14:39:08:199 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,80:204].[@-1,60:64='start',<0>,80:209]
2023-09-08 14:39:08:199 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,80:229].[@-1,85:85='e',<0>,80:234]
2023-09-08 14:39:08:199 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,80:238].[@-1,92:95='text',<0>,80:241]
2023-09-08 14:39:08:200 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,80:248].[@-1,105:105='e',<0>,80:254]
2023-09-08 14:39:08:200 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-08 14:39:08:200 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:39:08:200 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,81:127]
2023-09-08 14:39:08:200 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,81:157].[@-1,37:41='start',<0>,81:162]
2023-09-08 14:39:08:200 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,81:180].[@-1,60:64='start',<0>,81:185]
2023-09-08 14:39:08:200 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,81:205].[@-1,85:85='e',<0>,81:210]
2023-09-08 14:39:08:200 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,81:214].[@-1,92:95='text',<0>,81:217]
2023-09-08 14:39:08:200 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,81:224].[@-1,105:105='e',<0>,81:230]
2023-09-08 14:39:08:200 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-08 14:39:08:200 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-08 14:39:08:200 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,82:126]
2023-09-08 14:39:08:200 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,82:156].[@-1,37:41='start',<0>,82:161]
2023-09-08 14:39:08:200 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,82:179].[@-1,60:64='start',<0>,82:184]
2023-09-08 14:39:08:200 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,82:204].[@-1,85:85='e',<0>,82:209]
2023-09-08 14:39:08:200 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,82:213].[@-1,92:95='text',<0>,82:216]
2023-09-08 14:39:08:200 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,82:223].[@-1,105:105='e',<0>,82:229]
2023-09-08 14:39:08:201 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 26)
2023-09-08 14:39:08:201 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 25)
2023-09-08 14:39:08:201 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2023-09-08 14:39:08:201 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-09-08 14:39:08:201 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-08 14:39:08:201 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-08 14:39:08:201 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-08 14:39:08:201 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-08 14:39:08:203 action-translator LogManager.java:25 translate  $myIfElse = instructions.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)
2023-09-08 14:39:08:204 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,215:43]
2023-09-08 14:39:08:204 action-translator LogManager.java:25 qattr [@-1,42:43='IF',<0>,215:83].[@-1,45:48='line',<0>,215:86]
2023-09-08 14:39:08:204 action-translator LogManager.java:25 qattr [@-1,52:53='IF',<0>,215:93].[@-1,55:57='pos',<0>,215:96]
2023-09-08 14:39:08:204 action-translator LogManager.java:25 qattr [@-1,61:64='expr',<0>,215:102].[@-1,66:66='e',<0>,215:107]
2023-09-08 14:39:08:204 action-translator LogManager.java:25 qattr [@-1,70:81='blockinterno',<0>,215:111].[@-1,83:88='blkint',<0>,215:124]
2023-09-08 14:39:08:205 action-translator LogManager.java:25 translate  $myIfElse = instructions.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)
2023-09-08 14:39:08:205 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,216:91]
2023-09-08 14:39:08:205 action-translator LogManager.java:25 qattr [@-1,46:47='IF',<0>,216:135].[@-1,49:52='line',<0>,216:138]
2023-09-08 14:39:08:205 action-translator LogManager.java:25 qattr [@-1,56:57='IF',<0>,216:145].[@-1,59:61='pos',<0>,216:148]
2023-09-08 14:39:08:205 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,216:154].[@-1,70:70='e',<0>,216:159]
2023-09-08 14:39:08:205 action-translator LogManager.java:25 qattr [@-1,74:77='ifop',<0>,216:163].[@-1,79:84='blkint',<0>,216:168]
2023-09-08 14:39:08:205 action-translator LogManager.java:25 qattr [@-1,89:94='elseop',<0>,216:178].[@-1,96:101='blkint',<0>,216:185]
2023-09-08 14:39:08:205 action-translator LogManager.java:25 translate  $myIfElse = instructions.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)
2023-09-08 14:39:08:206 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,217:64]
2023-09-08 14:39:08:206 action-translator LogManager.java:25 qattr [@-1,48:49='IF',<0>,217:110].[@-1,51:54='line',<0>,217:113]
2023-09-08 14:39:08:206 action-translator LogManager.java:25 qattr [@-1,58:59='IF',<0>,217:120].[@-1,61:63='pos',<0>,217:123]
2023-09-08 14:39:08:206 action-translator LogManager.java:25 qattr [@-1,67:70='expr',<0>,217:129].[@-1,72:72='e',<0>,217:134]
2023-09-08 14:39:08:206 action-translator LogManager.java:25 qattr [@-1,76:87='blockinterno',<0>,217:138].[@-1,89:94='blkint',<0>,217:151]
2023-09-08 14:39:08:206 action-translator LogManager.java:25 qattr [@-1,98:112='sentenciaifelse',<0>,217:160].[@-1,114:121='myIfElse',<0>,217:176]
2023-09-08 14:39:08:207 action-translator LogManager.java:25 translate 
    if ($DEFAULT != nil) {
        $mySwitch = instructions.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = instructions.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }

2023-09-08 14:39:08:207 action-translator LogManager.java:25 attr [@-1,11:17='DEFAULT',<0>,223:9]
2023-09-08 14:39:08:208 action-translator LogManager.java:25 attr [@-1,39:46='mySwitch',<0>,224:9]
2023-09-08 14:39:08:208 action-translator LogManager.java:25 qattr [@-1,90:95='SWITCH',<0>,224:60].[@-1,97:100='line',<0>,224:67]
2023-09-08 14:39:08:208 action-translator LogManager.java:25 qattr [@-1,104:109='SWITCH',<0>,224:74].[@-1,111:113='pos',<0>,224:81]
2023-09-08 14:39:08:208 action-translator LogManager.java:25 qattr [@-1,117:120='expr',<0>,224:87].[@-1,122:122='e',<0>,224:92]
2023-09-08 14:39:08:208 action-translator LogManager.java:25 qattr [@-1,126:134='blockcase',<0>,224:96].[@-1,136:142='blkcase',<0>,224:106]
2023-09-08 14:39:08:208 action-translator LogManager.java:25 qattr [@-1,146:157='blockinterno',<0>,224:116].[@-1,159:164='blkint',<0>,224:129]
2023-09-08 14:39:08:208 action-translator LogManager.java:25 attr [@-1,191:198='mySwitch',<0>,226:9]
2023-09-08 14:39:08:208 action-translator LogManager.java:25 qattr [@-1,235:240='SWITCH',<0>,226:53].[@-1,242:245='line',<0>,226:60]
2023-09-08 14:39:08:208 action-translator LogManager.java:25 qattr [@-1,249:254='SWITCH',<0>,226:67].[@-1,256:258='pos',<0>,226:74]
2023-09-08 14:39:08:208 action-translator LogManager.java:25 qattr [@-1,262:265='expr',<0>,226:80].[@-1,267:267='e',<0>,226:85]
2023-09-08 14:39:08:208 action-translator LogManager.java:25 qattr [@-1,271:279='blockcase',<0>,226:89].[@-1,281:287='blkcase',<0>,226:99]
2023-09-08 14:39:08:209 action-translator LogManager.java:25 translate 
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext

2023-09-08 14:39:08:209 action-translator LogManager.java:25 attr [@-1,7:13='blkcase',<0>,232:5]
2023-09-08 14:39:08:209 action-translator LogManager.java:25 translate 
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }

2023-09-08 14:39:08:209 action-translator LogManager.java:25 attr [@-1,100:106='blkcase',<0>,239:9]
2023-09-08 14:39:08:209 action-translator LogManager.java:25 attr [@-1,118:124='blkcase',<0>,239:27]
2023-09-08 14:39:08:210 action-translator LogManager.java:25 translate 
    $blocas=instructions.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)

2023-09-08 14:39:08:210 action-translator LogManager.java:25 attr [@-1,7:12='blocas',<0>,247:5]
2023-09-08 14:39:08:210 action-translator LogManager.java:25 qattr [@-1,51:54='CASE',<0>,247:49].[@-1,56:59='line',<0>,247:54]
2023-09-08 14:39:08:210 action-translator LogManager.java:25 qattr [@-1,63:66='CASE',<0>,247:61].[@-1,68:70='pos',<0>,247:66]
2023-09-08 14:39:08:210 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,247:72].[@-1,79:79='e',<0>,247:77]
2023-09-08 14:39:08:210 action-translator LogManager.java:25 qattr [@-1,83:94='blockinterno',<0>,247:81].[@-1,96:101='blkint',<0>,247:94]
2023-09-08 14:39:08:211 action-translator LogManager.java:25 translate  $whict = instructions.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)
2023-09-08 14:39:08:211 action-translator LogManager.java:25 attr [@-1,2:6='whict',<0>,252:46]
2023-09-08 14:39:08:211 action-translator LogManager.java:25 qattr [@-1,42:46='WHILE',<0>,252:86].[@-1,48:51='line',<0>,252:92]
2023-09-08 14:39:08:211 action-translator LogManager.java:25 qattr [@-1,55:59='WHILE',<0>,252:99].[@-1,61:63='pos',<0>,252:105]
2023-09-08 14:39:08:211 action-translator LogManager.java:25 qattr [@-1,67:70='expr',<0>,252:111].[@-1,72:72='e',<0>,252:116]
2023-09-08 14:39:08:211 action-translator LogManager.java:25 qattr [@-1,76:87='blockinterno',<0>,252:120].[@-1,89:94='blkint',<0>,252:133]
2023-09-08 14:39:08:211 action-translator LogManager.java:25 translate  $forct = instructions.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)
2023-09-08 14:39:08:213 action-translator LogManager.java:25 attr [@-1,2:6='forct',<0>,256:79]
2023-09-08 14:39:08:213 action-translator LogManager.java:25 qattr [@-1,45:47='FOR',<0>,256:122].[@-1,49:52='line',<0>,256:126]
2023-09-08 14:39:08:213 action-translator LogManager.java:25 qattr [@-1,56:58='FOR',<0>,256:133].[@-1,60:62='pos',<0>,256:137]
2023-09-08 14:39:08:213 action-translator LogManager.java:25 qattr [@-1,66:74='ID_VALIDO',<0>,256:143].[@-1,76:79='text',<0>,256:153]
2023-09-08 14:39:08:213 action-translator LogManager.java:25 qattr [@-1,83:86='left',<0>,256:160].[@-1,88:88='e',<0>,256:165]
2023-09-08 14:39:08:213 action-translator LogManager.java:25 qattr [@-1,92:96='right',<0>,256:169].[@-1,98:98='e',<0>,256:175]
2023-09-08 14:39:08:213 action-translator LogManager.java:25 qattr [@-1,101:112='blockinterno',<0>,256:178].[@-1,114:119='blkint',<0>,256:191]
2023-09-08 14:39:08:213 action-translator LogManager.java:25 translate  $forct = instructions.NewSentenciaForId($FOR.line, $FOR.pos, $op1.text, $op2.text, $blockinterno.blkint)
2023-09-08 14:39:08:213 action-translator LogManager.java:25 attr [@-1,2:6='forct',<0>,257:70]
2023-09-08 14:39:08:213 action-translator LogManager.java:25 qattr [@-1,42:44='FOR',<0>,257:110].[@-1,46:49='line',<0>,257:114]
2023-09-08 14:39:08:213 action-translator LogManager.java:25 qattr [@-1,53:55='FOR',<0>,257:121].[@-1,57:59='pos',<0>,257:125]
2023-09-08 14:39:08:213 action-translator LogManager.java:25 qattr [@-1,63:65='op1',<0>,257:131].[@-1,67:70='text',<0>,257:135]
2023-09-08 14:39:08:213 action-translator LogManager.java:25 qattr [@-1,74:76='op2',<0>,257:142].[@-1,78:81='text',<0>,257:146]
2023-09-08 14:39:08:213 action-translator LogManager.java:25 qattr [@-1,85:96='blockinterno',<0>,257:153].[@-1,98:103='blkint',<0>,257:166]
2023-09-08 14:39:08:214 action-translator LogManager.java:25 translate  $forct = instructions.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)
2023-09-08 14:39:08:214 action-translator LogManager.java:25 attr [@-1,2:6='forct',<0>,258:57]
2023-09-08 14:39:08:214 action-translator LogManager.java:25 qattr [@-1,46:48='FOR',<0>,258:101].[@-1,50:53='line',<0>,258:105]
2023-09-08 14:39:08:214 action-translator LogManager.java:25 qattr [@-1,57:59='FOR',<0>,258:112].[@-1,61:63='pos',<0>,258:116]
2023-09-08 14:39:08:214 action-translator LogManager.java:25 qattr [@-1,67:75='ID_VALIDO',<0>,258:122].[@-1,77:80='text',<0>,258:132]
2023-09-08 14:39:08:214 action-translator LogManager.java:25 qattr [@-1,84:87='expr',<0>,258:139].[@-1,89:89='e',<0>,258:144]
2023-09-08 14:39:08:214 action-translator LogManager.java:25 qattr [@-1,93:104='blockinterno',<0>,258:148].[@-1,106:111='blkint',<0>,258:161]
2023-09-08 14:39:08:214 action-translator LogManager.java:25 translate  
    $guct = instructions.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)

2023-09-08 14:39:08:214 action-translator LogManager.java:25 attr [@-1,8:11='guct',<0>,264:5]
2023-09-08 14:39:08:214 action-translator LogManager.java:25 qattr [@-1,47:51='GUARD',<0>,264:44].[@-1,53:56='line',<0>,264:50]
2023-09-08 14:39:08:214 action-translator LogManager.java:25 qattr [@-1,60:64='GUARD',<0>,264:57].[@-1,66:68='pos',<0>,264:63]
2023-09-08 14:39:08:214 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,264:69].[@-1,77:77='e',<0>,264:74]
2023-09-08 14:39:08:215 action-translator LogManager.java:25 qattr [@-1,81:92='blockinterno',<0>,264:78].[@-1,94:99='blkint',<0>,264:91]
2023-09-08 14:39:08:215 action-translator LogManager.java:25 translate $coct = instructions.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)
2023-09-08 14:39:08:215 action-translator LogManager.java:25 attr [@-1,1:4='coct',<0>,269:12]
2023-09-08 14:39:08:215 action-translator LogManager.java:25 qattr [@-1,47:54='CONTINUE',<0>,269:58].[@-1,56:59='line',<0>,269:67]
2023-09-08 14:39:08:215 action-translator LogManager.java:25 qattr [@-1,63:70='CONTINUE',<0>,269:74].[@-1,72:74='pos',<0>,269:83]
2023-09-08 14:39:08:215 action-translator LogManager.java:25 translate  $brkct = instructions.NewTransferenciaBreak($BREAK.line, $BREAK.pos)
2023-09-08 14:39:08:215 action-translator LogManager.java:25 attr [@-1,2:6='brkct',<0>,273:10]
2023-09-08 14:39:08:215 action-translator LogManager.java:25 qattr [@-1,46:50='BREAK',<0>,273:54].[@-1,52:55='line',<0>,273:60]
2023-09-08 14:39:08:215 action-translator LogManager.java:25 qattr [@-1,59:63='BREAK',<0>,273:67].[@-1,65:67='pos',<0>,273:73]
2023-09-08 14:39:08:215 action-translator LogManager.java:25 translate 
    $rect = instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);

2023-09-08 14:39:08:215 action-translator LogManager.java:25 setAttr [@-1,7:10='rect',<0>,279:5] [@-1,13:85=' instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e)',<0>,279:11]
2023-09-08 14:39:08:221 action-translator LogManager.java:25 translate  instructions.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e)
2023-09-08 14:39:08:221 action-translator LogManager.java:25 qattr [@-1,41:46='RETURN',<0>,278:41].[@-1,48:51='line',<0>,278:48]
2023-09-08 14:39:08:221 action-translator LogManager.java:25 qattr [@-1,55:60='RETURN',<0>,278:55].[@-1,62:64='pos',<0>,278:62]
2023-09-08 14:39:08:221 action-translator LogManager.java:25 qattr [@-1,68:69='op',<0>,278:68].[@-1,71:71='e',<0>,278:71]
2023-09-08 14:39:08:222 action-translator LogManager.java:25 translate 
    $rect = instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos);

2023-09-08 14:39:08:222 action-translator LogManager.java:25 setAttr [@-1,7:10='rect',<0>,283:5] [@-1,13:75=' instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos)',<0>,283:11]
2023-09-08 14:39:08:222 action-translator LogManager.java:25 translate  instructions.NewTransferenciaReturn($RETURN.line, $RETURN.pos)
2023-09-08 14:39:08:222 action-translator LogManager.java:25 qattr [@-1,38:43='RETURN',<0>,282:38].[@-1,45:48='line',<0>,282:45]
2023-09-08 14:39:08:222 action-translator LogManager.java:25 qattr [@-1,52:57='RETURN',<0>,282:52].[@-1,59:61='pos',<0>,282:59]
2023-09-08 14:39:08:222 action-translator LogManager.java:25 translate  $vect = instructions.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)
2023-09-08 14:39:08:222 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,290:89]
2023-09-08 14:39:08:222 action-translator LogManager.java:25 qattr [@-1,50:52='VAR',<0>,290:137].[@-1,54:57='line',<0>,290:141]
2023-09-08 14:39:08:222 action-translator LogManager.java:25 qattr [@-1,61:63='VAR',<0>,290:148].[@-1,65:67='pos',<0>,290:152]
2023-09-08 14:39:08:222 action-translator LogManager.java:25 qattr [@-1,71:79='ID_VALIDO',<0>,290:158].[@-1,81:84='text',<0>,290:168]
2023-09-08 14:39:08:223 action-translator LogManager.java:25 qattr [@-1,89:96='tipodato',<0>,290:176].[@-1,98:101='tipo',<0>,290:185]
2023-09-08 14:39:08:223 action-translator LogManager.java:25 qattr [@-1,105:115='blockparams',<0>,290:192].[@-1,117:122='blkpar',<0>,290:204]
2023-09-08 14:39:08:223 action-translator LogManager.java:25 translate  $vect = instructions.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)
2023-09-08 14:39:08:223 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,291:77]
2023-09-08 14:39:08:223 action-translator LogManager.java:25 qattr [@-1,53:55='VAR',<0>,291:128].[@-1,57:60='line',<0>,291:132]
2023-09-08 14:39:08:223 action-translator LogManager.java:25 qattr [@-1,64:66='VAR',<0>,291:139].[@-1,68:70='pos',<0>,291:143]
2023-09-08 14:39:08:223 action-translator LogManager.java:25 qattr [@-1,74:82='ID_VALIDO',<0>,291:149].[@-1,84:87='text',<0>,291:159]
2023-09-08 14:39:08:223 action-translator LogManager.java:25 qattr [@-1,92:99='tipodato',<0>,291:167].[@-1,101:104='tipo',<0>,291:176]
2023-09-08 14:39:08:223 action-translator LogManager.java:25 translate  $vect = instructions.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)
2023-09-08 14:39:08:223 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,292:79]
2023-09-08 14:39:08:223 action-translator LogManager.java:25 qattr [@-1,47:49='VAR',<0>,292:124].[@-1,51:54='line',<0>,292:128]
2023-09-08 14:39:08:223 action-translator LogManager.java:25 qattr [@-1,58:60='VAR',<0>,292:135].[@-1,62:64='pos',<0>,292:139]
2023-09-08 14:39:08:223 action-translator LogManager.java:25 qattr [@-1,68:71='prin',<0>,292:145].[@-1,73:76='text',<0>,292:150]
2023-09-08 14:39:08:223 action-translator LogManager.java:25 qattr [@-1,81:88='tipodato',<0>,292:158].[@-1,90:93='tipo',<0>,292:167]
2023-09-08 14:39:08:223 action-translator LogManager.java:25 qattr [@-1,97:100='secu',<0>,292:174].[@-1,102:105='text',<0>,292:179]
2023-09-08 14:39:08:223 action-translator LogManager.java:25 translate 
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext

2023-09-08 14:39:08:223 action-translator LogManager.java:25 attr [@-1,7:12='blkpar',<0>,296:5]
2023-09-08 14:39:08:223 action-translator LogManager.java:25 translate 
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }

2023-09-08 14:39:08:223 action-translator LogManager.java:25 attr [@-1,102:107='blkpar',<0>,303:9]
2023-09-08 14:39:08:223 action-translator LogManager.java:25 attr [@-1,119:124='blkpar',<0>,303:26]
2023-09-08 14:39:08:223 action-translator LogManager.java:25 translate 
    $blopas = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)

2023-09-08 14:39:08:224 action-translator LogManager.java:25 attr [@-1,7:12='blopas',<0>,311:5]
2023-09-08 14:39:08:224 action-translator LogManager.java:25 qattr [@-1,51:54='COMA',<0>,311:49].[@-1,56:59='line',<0>,311:54]
2023-09-08 14:39:08:224 action-translator LogManager.java:25 qattr [@-1,63:66='COMA',<0>,311:61].[@-1,68:70='pos',<0>,311:66]
2023-09-08 14:39:08:224 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,311:72].[@-1,79:79='e',<0>,311:77]
2023-09-08 14:39:08:225 action-translator LogManager.java:25 translate 
    $blopas = instructions.NewArregloParametro($expr.e)

2023-09-08 14:39:08:225 action-translator LogManager.java:25 attr [@-1,7:12='blopas',<0>,315:5]
2023-09-08 14:39:08:225 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,315:48].[@-1,55:55='e',<0>,315:53]
2023-09-08 14:39:08:225 action-translator LogManager.java:25 translate  $veadct = instructions.NewArregloAppend($ID_VALIDO.text , $expr.e)
2023-09-08 14:39:08:226 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,319:46]
2023-09-08 14:39:08:226 action-translator LogManager.java:25 qattr [@-1,42:50='ID_VALIDO',<0>,319:86].[@-1,52:55='text',<0>,319:96]
2023-09-08 14:39:08:226 action-translator LogManager.java:25 qattr [@-1,60:63='expr',<0>,319:104].[@-1,65:65='e',<0>,319:109]
2023-09-08 14:39:08:226 action-translator LogManager.java:25 translate  $veadct = instructions.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)
2023-09-08 14:39:08:226 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,320:91]
2023-09-08 14:39:08:226 action-translator LogManager.java:25 qattr [@-1,49:52='prin',<0>,320:138].[@-1,54:57='text',<0>,320:143]
2023-09-08 14:39:08:226 action-translator LogManager.java:25 qattr [@-1,62:64='pop',<0>,320:151].[@-1,66:66='e',<0>,320:155]
2023-09-08 14:39:08:226 action-translator LogManager.java:25 qattr [@-1,70:73='secu',<0>,320:159].[@-1,75:78='text',<0>,320:164]
2023-09-08 14:39:08:226 action-translator LogManager.java:25 qattr [@-1,82:84='sop',<0>,320:171].[@-1,86:86='e',<0>,320:175]
2023-09-08 14:39:08:226 action-translator LogManager.java:25 translate  $veadct = instructions.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) 
2023-09-08 14:39:08:226 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,322:2]
2023-09-08 14:39:08:226 action-translator LogManager.java:25 qattr [@-1,49:57='ID_VALIDO',<0>,322:49].[@-1,59:62='text',<0>,322:59]
2023-09-08 14:39:08:226 action-translator LogManager.java:25 qattr [@-1,66:68='op1',<0>,322:66].[@-1,70:70='e',<0>,322:70]
2023-09-08 14:39:08:226 action-translator LogManager.java:25 qattr [@-1,74:76='op2',<0>,322:74].[@-1,78:78='e',<0>,322:78]
2023-09-08 14:39:08:226 action-translator LogManager.java:25 qattr [@-1,82:99='listamatrizaddsubs',<0>,322:82].[@-1,101:110='blklimatas',<0>,322:101]
2023-09-08 14:39:08:226 action-translator LogManager.java:25 qattr [@-1,114:116='op3',<0>,322:114].[@-1,118:118='e',<0>,322:118]
2023-09-08 14:39:08:226 action-translator LogManager.java:25 translate  $veadct = instructions.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) 
2023-09-08 14:39:08:226 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,324:2]
2023-09-08 14:39:08:226 action-translator LogManager.java:25 qattr [@-1,45:53='ID_VALIDO',<0>,324:45].[@-1,55:58='text',<0>,324:55]
2023-09-08 14:39:08:227 action-translator LogManager.java:25 qattr [@-1,62:64='op1',<0>,324:62].[@-1,66:66='e',<0>,324:66]
2023-09-08 14:39:08:227 action-translator LogManager.java:25 qattr [@-1,70:72='op2',<0>,324:70].[@-1,74:74='e',<0>,324:74]
2023-09-08 14:39:08:227 action-translator LogManager.java:25 qattr [@-1,78:80='op3',<0>,324:78].[@-1,82:82='e',<0>,324:82]
2023-09-08 14:39:08:227 action-translator LogManager.java:25 translate  $veadct = instructions.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)
2023-09-08 14:39:08:227 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,325:52]
2023-09-08 14:39:08:227 action-translator LogManager.java:25 qattr [@-1,45:53='ID_VALIDO',<0>,325:95].[@-1,55:58='text',<0>,325:105]
2023-09-08 14:39:08:227 action-translator LogManager.java:25 qattr [@-1,63:65='pop',<0>,325:113].[@-1,67:67='e',<0>,325:117]
2023-09-08 14:39:08:227 action-translator LogManager.java:25 qattr [@-1,71:73='sop',<0>,325:121].[@-1,75:75='e',<0>,325:125]
2023-09-08 14:39:08:227 action-translator LogManager.java:25 translate  $vermct = instructions.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-09-08 14:39:08:227 action-translator LogManager.java:25 attr [@-1,2:7='vermct',<0>,328:46]
2023-09-08 14:39:08:227 action-translator LogManager.java:25 qattr [@-1,46:50='PUNTO',<0>,328:90].[@-1,52:55='line',<0>,328:96]
2023-09-08 14:39:08:227 action-translator LogManager.java:25 qattr [@-1,59:63='PUNTO',<0>,328:103].[@-1,65:67='pos',<0>,328:109]
2023-09-08 14:39:08:227 action-translator LogManager.java:25 qattr [@-1,71:79='ID_VALIDO',<0>,328:115].[@-1,81:84='text',<0>,328:125]
2023-09-08 14:39:08:227 action-translator LogManager.java:25 translate  $vermct = instructions.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)
2023-09-08 14:39:08:227 action-translator LogManager.java:25 attr [@-1,2:7='vermct',<0>,329:60]
2023-09-08 14:39:08:227 action-translator LogManager.java:25 qattr [@-1,45:49='PUNTO',<0>,329:103].[@-1,51:54='line',<0>,329:109]
2023-09-08 14:39:08:228 action-translator LogManager.java:25 qattr [@-1,58:62='PUNTO',<0>,329:116].[@-1,64:66='pos',<0>,329:122]
2023-09-08 14:39:08:228 action-translator LogManager.java:25 qattr [@-1,70:78='ID_VALIDO',<0>,329:128].[@-1,80:83='text',<0>,329:138]
2023-09-08 14:39:08:228 action-translator LogManager.java:25 qattr [@-1,87:90='expr',<0>,329:145].[@-1,92:92='e',<0>,329:150]
2023-09-08 14:39:08:228 action-translator LogManager.java:25 translate  $veemct = instructions.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-09-08 14:39:08:228 action-translator LogManager.java:25 attr [@-1,2:7='veemct',<0>,332:28]
2023-09-08 14:39:08:228 action-translator LogManager.java:25 qattr [@-1,43:47='PUNTO',<0>,332:69].[@-1,49:52='line',<0>,332:75]
2023-09-08 14:39:08:228 action-translator LogManager.java:25 qattr [@-1,56:60='PUNTO',<0>,332:82].[@-1,62:64='pos',<0>,332:88]
2023-09-08 14:39:08:228 action-translator LogManager.java:25 qattr [@-1,68:76='ID_VALIDO',<0>,332:94].[@-1,78:81='text',<0>,332:104]
2023-09-08 14:39:08:229 action-translator LogManager.java:25 translate  $vecnct = instructions.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-09-08 14:39:08:229 action-translator LogManager.java:25 attr [@-1,2:7='vecnct',<0>,335:26]
2023-09-08 14:39:08:229 action-translator LogManager.java:25 qattr [@-1,41:45='PUNTO',<0>,335:65].[@-1,47:50='line',<0>,335:71]
2023-09-08 14:39:08:229 action-translator LogManager.java:25 qattr [@-1,54:58='PUNTO',<0>,335:78].[@-1,60:62='pos',<0>,335:84]
2023-09-08 14:39:08:229 action-translator LogManager.java:25 qattr [@-1,66:74='ID_VALIDO',<0>,335:90].[@-1,76:79='text',<0>,335:100]
2023-09-08 14:39:08:229 action-translator LogManager.java:25 translate  $vepposct = instructions.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) 
2023-09-08 14:39:08:229 action-translator LogManager.java:25 attr [@-1,2:9='vepposct',<0>,339:2]
2023-09-08 14:39:08:229 action-translator LogManager.java:25 qattr [@-1,50:58='ID_VALIDO',<0>,339:50].[@-1,60:63='text',<0>,339:60]
2023-09-08 14:39:08:229 action-translator LogManager.java:25 qattr [@-1,67:69='op1',<0>,339:67].[@-1,71:71='e',<0>,339:71]
2023-09-08 14:39:08:229 action-translator LogManager.java:25 qattr [@-1,75:77='op2',<0>,339:75].[@-1,79:79='e',<0>,339:79]
2023-09-08 14:39:08:229 action-translator LogManager.java:25 qattr [@-1,83:100='listamatrizaddsubs',<0>,339:83].[@-1,102:111='blklimatas',<0>,339:102]
2023-09-08 14:39:08:229 action-translator LogManager.java:25 translate  $vepposct = instructions.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) 
2023-09-08 14:39:08:230 action-translator LogManager.java:25 attr [@-1,2:9='vepposct',<0>,341:2]
2023-09-08 14:39:08:230 action-translator LogManager.java:25 qattr [@-1,46:54='ID_VALIDO',<0>,341:46].[@-1,56:59='text',<0>,341:56]
2023-09-08 14:39:08:230 action-translator LogManager.java:25 qattr [@-1,63:65='op1',<0>,341:63].[@-1,67:67='e',<0>,341:67]
2023-09-08 14:39:08:230 action-translator LogManager.java:25 qattr [@-1,71:73='op2',<0>,341:71].[@-1,75:75='e',<0>,341:75]
2023-09-08 14:39:08:230 action-translator LogManager.java:25 translate  $vepposct = instructions.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)
2023-09-08 14:39:08:230 action-translator LogManager.java:25 attr [@-1,2:9='vepposct',<0>,342:36]
2023-09-08 14:39:08:230 action-translator LogManager.java:25 qattr [@-1,44:51='CORCHDER',<0>,342:78].[@-1,53:56='line',<0>,342:87]
2023-09-08 14:39:08:230 action-translator LogManager.java:25 qattr [@-1,60:67='CORCHDER',<0>,342:94].[@-1,69:71='pos',<0>,342:103]
2023-09-08 14:39:08:230 action-translator LogManager.java:25 qattr [@-1,75:83='ID_VALIDO',<0>,342:109].[@-1,85:88='text',<0>,342:119]
2023-09-08 14:39:08:230 action-translator LogManager.java:25 qattr [@-1,92:95='expr',<0>,342:126].[@-1,97:97='e',<0>,342:131]
2023-09-08 14:39:08:230 action-translator LogManager.java:25 translate 
    if ($DOS_PUNTOS != nil) {
        $matct = instructions.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        $matct = instructions.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }

2023-09-08 14:39:08:230 action-translator LogManager.java:25 attr [@-1,11:20='DOS_PUNTOS',<0>,348:9]
2023-09-08 14:39:08:230 action-translator LogManager.java:25 attr [@-1,42:46='matct',<0>,349:9]
2023-09-08 14:39:08:231 action-translator LogManager.java:25 qattr [@-1,85:87='VAR',<0>,349:52].[@-1,89:92='line',<0>,349:56]
2023-09-08 14:39:08:231 action-translator LogManager.java:25 qattr [@-1,96:98='VAR',<0>,349:63].[@-1,100:102='pos',<0>,349:67]
2023-09-08 14:39:08:231 action-translator LogManager.java:25 qattr [@-1,106:114='ID_VALIDO',<0>,349:73].[@-1,116:119='text',<0>,349:83]
2023-09-08 14:39:08:231 action-translator LogManager.java:25 qattr [@-1,123:132='tipomatriz',<0>,349:90].[@-1,134:140='tipomat',<0>,349:101]
2023-09-08 14:39:08:231 action-translator LogManager.java:25 qattr [@-1,144:152='defmatriz',<0>,349:111].[@-1,154:159='defmat',<0>,349:121]
2023-09-08 14:39:08:231 action-translator LogManager.java:25 attr [@-1,186:190='matct',<0>,351:9]
2023-09-08 14:39:08:231 action-translator LogManager.java:25 qattr [@-1,236:238='VAR',<0>,351:59].[@-1,240:243='line',<0>,351:63]
2023-09-08 14:39:08:231 action-translator LogManager.java:25 qattr [@-1,247:249='VAR',<0>,351:70].[@-1,251:253='pos',<0>,351:74]
2023-09-08 14:39:08:231 action-translator LogManager.java:25 qattr [@-1,257:265='ID_VALIDO',<0>,351:80].[@-1,267:270='text',<0>,351:90]
2023-09-08 14:39:08:231 action-translator LogManager.java:25 qattr [@-1,275:283='defmatriz',<0>,351:98].[@-1,285:290='defmat',<0>,351:108]
2023-09-08 14:39:08:231 action-translator LogManager.java:25 translate  
    $tipomat = instructions.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)

2023-09-08 14:39:08:231 action-translator LogManager.java:25 attr [@-1,8:14='tipomat',<0>,359:5]
2023-09-08 14:39:08:231 action-translator LogManager.java:25 qattr [@-1,51:58='CORCHIZQ',<0>,359:48].[@-1,60:63='line',<0>,359:57]
2023-09-08 14:39:08:231 action-translator LogManager.java:25 qattr [@-1,67:74='CORCHIZQ',<0>,359:64].[@-1,76:78='pos',<0>,359:73]
2023-09-08 14:39:08:231 action-translator LogManager.java:25 qattr [@-1,82:91='tipomatriz',<0>,359:79].[@-1,93:99='tipomat',<0>,359:90]
2023-09-08 14:39:08:231 action-translator LogManager.java:25 translate  
    $tipomat = instructions.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)

2023-09-08 14:39:08:231 action-translator LogManager.java:25 attr [@-1,8:14='tipomat',<0>,363:5]
2023-09-08 14:39:08:231 action-translator LogManager.java:25 qattr [@-1,46:53='CORCHIZQ',<0>,363:43].[@-1,55:58='line',<0>,363:52]
2023-09-08 14:39:08:232 action-translator LogManager.java:25 qattr [@-1,62:69='CORCHIZQ',<0>,363:59].[@-1,71:73='pos',<0>,363:68]
2023-09-08 14:39:08:232 action-translator LogManager.java:25 qattr [@-1,77:84='tipodato',<0>,363:74].[@-1,86:89='tipo',<0>,363:83]
2023-09-08 14:39:08:232 action-translator LogManager.java:25 translate  $defmat = $listavaloresmat.listvlamat
2023-09-08 14:39:08:232 action-translator LogManager.java:25 attr [@-1,2:7='defmat',<0>,368:20]
2023-09-08 14:39:08:232 action-translator LogManager.java:25 qattr [@-1,12:26='listavaloresmat',<0>,368:30].[@-1,28:37='listvlamat',<0>,368:46]
2023-09-08 14:39:08:232 action-translator LogManager.java:25 translate  $listvlamat = $listavaloresmat2.mylisttmatt
2023-09-08 14:39:08:232 action-translator LogManager.java:25 attr [@-1,2:11='listvlamat',<0>,372:39]
2023-09-08 14:39:08:232 action-translator LogManager.java:25 qattr [@-1,16:31='listavaloresmat2',<0>,372:53].[@-1,33:43='mylisttmatt',<0>,372:70]
2023-09-08 14:39:08:232 action-translator LogManager.java:25 translate  $listvlamat = $simplematriz.simmat
2023-09-08 14:39:08:232 action-translator LogManager.java:25 attr [@-1,2:11='listvlamat',<0>,373:17]
2023-09-08 14:39:08:232 action-translator LogManager.java:25 qattr [@-1,16:27='simplematriz',<0>,373:31].[@-1,29:34='simmat',<0>,373:44]
2023-09-08 14:39:08:232 action-translator LogManager.java:25 translate 
2023-09-08 14:39:08:232 action-translator LogManager.java:25 translate  $mylisttmatt = instructions.NewMatrizListaNivel($listavaloresmat.listvlamat)
2023-09-08 14:39:08:232 action-translator LogManager.java:25 attr [@-1,2:12='mylisttmatt',<0>,2:48]
2023-09-08 14:39:08:232 action-translator LogManager.java:25 qattr [@-1,50:64='listavaloresmat',<0>,2:96].[@-1,66:75='listvlamat',<0>,2:112]
2023-09-08 14:39:08:232 action-translator LogManager.java:25 translate  $mylisttmatt = instructions.NewMatrizListaExpresion($listaexpresions.blkparf)
2023-09-08 14:39:08:232 action-translator LogManager.java:25 attr [@-1,2:12='mylisttmatt',<0>,3:45]
2023-09-08 14:39:08:233 action-translator LogManager.java:25 qattr [@-1,54:68='listaexpresions',<0>,3:97].[@-1,70:76='blkparf',<0>,3:113]
2023-09-08 14:39:08:233 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-08 14:39:08:233 action-translator LogManager.java:25 translate  $mylisttmatt = instructions.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)
2023-09-08 14:39:08:233 action-translator LogManager.java:25 attr [@-1,2:12='mylisttmatt',<0>,6:115]
2023-09-08 14:39:08:233 action-translator LogManager.java:25 qattr [@-1,58:59='op',<0>,6:171].[@-1,61:71='mylisttmatt',<0>,6:174]
2023-09-08 14:39:08:233 action-translator LogManager.java:25 qattr [@-1,75:89='listavaloresmat',<0>,6:188].[@-1,91:100='listvlamat',<0>,6:204]
2023-09-08 14:39:08:233 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-08 14:39:08:233 action-translator LogManager.java:25 translate 
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext

2023-09-08 14:39:08:233 action-translator LogManager.java:25 attr [@-1,7:13='blkparf',<0>,384:5]
2023-09-08 14:39:08:233 action-translator LogManager.java:25 translate 
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }

2023-09-08 14:39:08:233 action-translator LogManager.java:25 attr [@-1,106:112='blkparf',<0>,391:9]
2023-09-08 14:39:08:233 action-translator LogManager.java:25 attr [@-1,124:130='blkparf',<0>,391:27]
2023-09-08 14:39:08:234 action-translator LogManager.java:25 translate 
    $funpar = instructions.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)

2023-09-08 14:39:08:234 action-translator LogManager.java:25 attr [@-1,7:12='funpar',<0>,399:5]
2023-09-08 14:39:08:234 action-translator LogManager.java:25 qattr [@-1,51:54='COMA',<0>,399:49].[@-1,56:59='line',<0>,399:54]
2023-09-08 14:39:08:234 action-translator LogManager.java:25 qattr [@-1,63:66='COMA',<0>,399:61].[@-1,68:70='pos',<0>,399:66]
2023-09-08 14:39:08:234 action-translator LogManager.java:25 qattr [@-1,74:77='expr',<0>,399:72].[@-1,79:79='e',<0>,399:77]
2023-09-08 14:39:08:234 action-translator LogManager.java:25 translate 
    $funpar = instructions.NewArregloParametro($expr.e)

2023-09-08 14:39:08:234 action-translator LogManager.java:25 attr [@-1,7:12='funpar',<0>,403:5]
2023-09-08 14:39:08:234 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,403:48].[@-1,55:55='e',<0>,403:53]
2023-09-08 14:39:08:234 action-translator LogManager.java:25 translate  $simmat = instructions.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)
2023-09-08 14:39:08:234 action-translator LogManager.java:25 attr [@-1,2:7='simmat',<0>,409:2]
2023-09-08 14:39:08:234 action-translator LogManager.java:25 qattr [@-1,44:53='tipomatriz',<0>,409:44].[@-1,55:61='tipomat',<0>,409:55]
2023-09-08 14:39:08:235 action-translator LogManager.java:25 qattr [@-1,65:66='op',<0>,409:65].[@-1,68:73='simmat',<0>,409:68]
2023-09-08 14:39:08:235 action-translator LogManager.java:25 qattr [@-1,77:82='NUMBER',<0>,409:77].[@-1,84:87='text',<0>,409:84]
2023-09-08 14:39:08:235 action-translator LogManager.java:25 qattr [@-1,91:96='NUMBER',<0>,409:91].[@-1,98:101='line',<0>,409:98]
2023-09-08 14:39:08:235 action-translator LogManager.java:25 qattr [@-1,104:109='NUMBER',<0>,409:104].[@-1,111:113='pos',<0>,409:111]
2023-09-08 14:39:08:235 action-translator LogManager.java:25 translate  $simmat = instructions.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)
2023-09-08 14:39:08:235 action-translator LogManager.java:25 attr [@-1,2:7='simmat',<0>,411:2]
2023-09-08 14:39:08:235 action-translator LogManager.java:25 qattr [@-1,44:53='tipomatriz',<0>,411:44].[@-1,55:61='tipomat',<0>,411:55]
2023-09-08 14:39:08:235 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,411:65].[@-1,70:70='e',<0>,411:70]
2023-09-08 14:39:08:235 action-translator LogManager.java:25 qattr [@-1,74:79='NUMBER',<0>,411:74].[@-1,81:84='text',<0>,411:81]
2023-09-08 14:39:08:235 action-translator LogManager.java:25 qattr [@-1,88:93='NUMBER',<0>,411:88].[@-1,95:98='line',<0>,411:95]
2023-09-08 14:39:08:235 action-translator LogManager.java:25 qattr [@-1,101:106='NUMBER',<0>,411:101].[@-1,108:110='pos',<0>,411:108]
2023-09-08 14:39:08:235 action-translator LogManager.java:25 translate 
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext

2023-09-08 14:39:08:235 action-translator LogManager.java:25 attr [@-1,7:16='blklimatas',<0>,416:5]
2023-09-08 14:39:08:236 action-translator LogManager.java:25 translate 
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }

2023-09-08 14:39:08:236 action-translator LogManager.java:25 attr [@-1,107:116='blklimatas',<0>,423:9]
2023-09-08 14:39:08:236 action-translator LogManager.java:25 attr [@-1,128:137='blklimatas',<0>,423:30]
2023-09-08 14:39:08:236 action-translator LogManager.java:25 translate 
    $lmas = instructions.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)

2023-09-08 14:39:08:236 action-translator LogManager.java:25 attr [@-1,7:10='lmas',<0>,431:5]
2023-09-08 14:39:08:236 action-translator LogManager.java:25 qattr [@-1,49:56='CORCHIZQ',<0>,431:47].[@-1,58:61='line',<0>,431:56]
2023-09-08 14:39:08:236 action-translator LogManager.java:25 qattr [@-1,65:72='CORCHIZQ',<0>,431:63].[@-1,74:76='pos',<0>,431:72]
2023-09-08 14:39:08:236 action-translator LogManager.java:25 qattr [@-1,80:83='expr',<0>,431:78].[@-1,85:85='e',<0>,431:83]
2023-09-08 14:39:08:236 action-translator LogManager.java:25 translate 
    $struck = instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt);

2023-09-08 14:39:08:236 action-translator LogManager.java:25 setAttr [@-1,7:12='struck',<0>,440:5] [@-1,15:106=' instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt)',<0>,440:13]
2023-09-08 14:39:08:236 action-translator LogManager.java:25 translate  instructions.NewStruck($STRUCT.line, $STRUCT.pos, $ID_VALIDO.text, $listaatributos.blkstlt)
2023-09-08 14:39:08:236 action-translator LogManager.java:25 qattr [@-1,25:30='STRUCT',<0>,439:25].[@-1,32:35='line',<0>,439:32]
2023-09-08 14:39:08:237 action-translator LogManager.java:25 qattr [@-1,39:44='STRUCT',<0>,439:39].[@-1,46:48='pos',<0>,439:46]
2023-09-08 14:39:08:237 action-translator LogManager.java:25 qattr [@-1,52:60='ID_VALIDO',<0>,439:52].[@-1,62:65='text',<0>,439:62]
2023-09-08 14:39:08:237 action-translator LogManager.java:25 qattr [@-1,69:82='listaatributos',<0>,439:69].[@-1,84:90='blkstlt',<0>,439:84]
2023-09-08 14:39:08:237 action-translator LogManager.java:25 translate 
    $blkstlt = []interface{}{}
    var listInt []IListaatributoContext

2023-09-08 14:39:08:237 action-translator LogManager.java:25 attr [@-1,7:13='blkstlt',<0>,445:5]
2023-09-08 14:39:08:237 action-translator LogManager.java:25 translate 
    listInt = localctx.(*ListaatributosContext).GetListatstr()
    for _, e := range listInt {
        $blkstlt = append($blkstlt, e.GetListatstr())
    }

2023-09-08 14:39:08:237 action-translator LogManager.java:25 attr [@-1,108:114='blkstlt',<0>,452:9]
2023-09-08 14:39:08:237 action-translator LogManager.java:25 attr [@-1,126:132='blkstlt',<0>,452:27]
2023-09-08 14:39:08:239 action-translator LogManager.java:25 translate 
    if $IG != nil{
        if $tip3.text != "" {
            $listatstr = instructions.NewStructAtributosConTE2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text, $expr.e)
        }else{                        
            $listatstr = instructions.NewStructAtributosConTE($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo, $expr.e)
        }        
    }else{ 
        if $tip3.text != "" {                        
            $listatstr = instructions.NewStructAtributosConT2($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip3.text) 
        }else{            
            $listatstr = instructions.NewStructAtributosConT($tip1.line, $tip1.pos, $tip1.text, $tip4.text, $tip2.tipo) 
        }
    }

2023-09-08 14:39:08:239 action-translator LogManager.java:25 attr [@-1,10:11='IG',<0>,460:8]
2023-09-08 14:39:08:240 action-translator LogManager.java:25 qattr [@-1,34:37='tip3',<0>,461:12].[@-1,39:42='text',<0>,461:17]
2023-09-08 14:39:08:240 action-translator LogManager.java:25 attr [@-1,66:74='listatstr',<0>,462:13]
2023-09-08 14:39:08:240 action-translator LogManager.java:25 qattr [@-1,117:120='tip1',<0>,462:64].[@-1,122:125='line',<0>,462:69]
2023-09-08 14:39:08:240 action-translator LogManager.java:25 qattr [@-1,129:132='tip1',<0>,462:76].[@-1,134:136='pos',<0>,462:81]
2023-09-08 14:39:08:241 action-translator LogManager.java:25 qattr [@-1,140:143='tip1',<0>,462:87].[@-1,145:148='text',<0>,462:92]
2023-09-08 14:39:08:241 action-translator LogManager.java:25 qattr [@-1,152:155='tip4',<0>,462:99].[@-1,157:160='text',<0>,462:104]
2023-09-08 14:39:08:241 action-translator LogManager.java:25 qattr [@-1,164:167='tip3',<0>,462:111].[@-1,169:172='text',<0>,462:116]
2023-09-08 14:39:08:242 action-translator LogManager.java:25 qattr [@-1,176:179='expr',<0>,462:123].[@-1,181:181='e',<0>,462:128]
2023-09-08 14:39:08:242 action-translator LogManager.java:25 attr [@-1,238:246='listatstr',<0>,464:13]
2023-09-08 14:39:08:242 action-translator LogManager.java:25 qattr [@-1,288:291='tip1',<0>,464:63].[@-1,293:296='line',<0>,464:68]
2023-09-08 14:39:08:242 action-translator LogManager.java:25 qattr [@-1,300:303='tip1',<0>,464:75].[@-1,305:307='pos',<0>,464:80]
2023-09-08 14:39:08:243 action-translator LogManager.java:25 qattr [@-1,311:314='tip1',<0>,464:86].[@-1,316:319='text',<0>,464:91]
2023-09-08 14:39:08:243 action-translator LogManager.java:25 qattr [@-1,323:326='tip4',<0>,464:98].[@-1,328:331='text',<0>,464:103]
2023-09-08 14:39:08:243 action-translator LogManager.java:25 qattr [@-1,335:338='tip2',<0>,464:110].[@-1,340:343='tipo',<0>,464:115]
2023-09-08 14:39:08:243 action-translator LogManager.java:25 qattr [@-1,347:350='expr',<0>,464:122].[@-1,352:352='e',<0>,464:127]
2023-09-08 14:39:08:243 action-translator LogManager.java:25 qattr [@-1,400:403='tip3',<0>,467:12].[@-1,405:408='text',<0>,467:17]
2023-09-08 14:39:08:243 action-translator LogManager.java:25 attr [@-1,456:464='listatstr',<0>,468:13]
2023-09-08 14:39:08:243 action-translator LogManager.java:25 qattr [@-1,506:509='tip1',<0>,468:63].[@-1,511:514='line',<0>,468:68]
2023-09-08 14:39:08:243 action-translator LogManager.java:25 qattr [@-1,518:521='tip1',<0>,468:75].[@-1,523:525='pos',<0>,468:80]
2023-09-08 14:39:08:243 action-translator LogManager.java:25 qattr [@-1,529:532='tip1',<0>,468:86].[@-1,534:537='text',<0>,468:91]
2023-09-08 14:39:08:244 action-translator LogManager.java:25 qattr [@-1,541:544='tip4',<0>,468:98].[@-1,546:549='text',<0>,468:103]
2023-09-08 14:39:08:244 action-translator LogManager.java:25 qattr [@-1,553:556='tip3',<0>,468:110].[@-1,558:561='text',<0>,468:115]
2023-09-08 14:39:08:245 action-translator LogManager.java:25 attr [@-1,607:615='listatstr',<0>,470:13]
2023-09-08 14:39:08:245 action-translator LogManager.java:25 qattr [@-1,656:659='tip1',<0>,470:62].[@-1,661:664='line',<0>,470:67]
2023-09-08 14:39:08:245 action-translator LogManager.java:25 qattr [@-1,668:671='tip1',<0>,470:74].[@-1,673:675='pos',<0>,470:79]
2023-09-08 14:39:08:245 action-translator LogManager.java:25 qattr [@-1,679:682='tip1',<0>,470:85].[@-1,684:687='text',<0>,470:90]
2023-09-08 14:39:08:245 action-translator LogManager.java:25 qattr [@-1,691:694='tip4',<0>,470:97].[@-1,696:699='text',<0>,470:102]
2023-09-08 14:39:08:245 action-translator LogManager.java:25 qattr [@-1,703:706='tip2',<0>,470:109].[@-1,708:711='tipo',<0>,470:114]
2023-09-08 14:39:08:245 action-translator LogManager.java:25 translate 
    if $IG != nil{
        $listatstr = instructions.NewStructAtributosConE($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text, $expr.e)
    }else{
        $listatstr = instructions.NewStructAtributos($tipo.line, $tipo.pos, $tipo.text, $ID_VALIDO.text)
    }

2023-09-08 14:39:08:246 action-translator LogManager.java:25 attr [@-1,10:11='IG',<0>,476:8]
2023-09-08 14:39:08:246 action-translator LogManager.java:25 attr [@-1,31:39='listatstr',<0>,477:9]
2023-09-08 14:39:08:246 action-translator LogManager.java:25 qattr [@-1,80:83='tipo',<0>,477:58].[@-1,85:88='line',<0>,477:63]
2023-09-08 14:39:08:246 action-translator LogManager.java:25 qattr [@-1,92:95='tipo',<0>,477:70].[@-1,97:99='pos',<0>,477:75]
2023-09-08 14:39:08:246 action-translator LogManager.java:25 qattr [@-1,103:106='tipo',<0>,477:81].[@-1,108:111='text',<0>,477:86]
2023-09-08 14:39:08:246 action-translator LogManager.java:25 qattr [@-1,115:123='ID_VALIDO',<0>,477:93].[@-1,125:128='text',<0>,477:103]
2023-09-08 14:39:08:246 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,477:110].[@-1,137:137='e',<0>,477:115]
2023-09-08 14:39:08:246 action-translator LogManager.java:25 attr [@-1,162:170='listatstr',<0>,479:9]
2023-09-08 14:39:08:246 action-translator LogManager.java:25 qattr [@-1,207:210='tipo',<0>,479:54].[@-1,212:215='line',<0>,479:59]
2023-09-08 14:39:08:246 action-translator LogManager.java:25 qattr [@-1,219:222='tipo',<0>,479:66].[@-1,224:226='pos',<0>,479:71]
2023-09-08 14:39:08:246 action-translator LogManager.java:25 qattr [@-1,230:233='tipo',<0>,479:77].[@-1,235:238='text',<0>,479:82]
2023-09-08 14:39:08:246 action-translator LogManager.java:25 qattr [@-1,242:250='ID_VALIDO',<0>,479:89].[@-1,252:255='text',<0>,479:99]
2023-09-08 14:39:08:247 action-translator LogManager.java:25 translate 
    if $MUTATING != nil{
        $listatstr = instructions.NewStruckFunctionMutating($funciondeclaracioncontrol.fdc)
    } else {
        $listatstr = instructions.NewStruckFunction($funciondeclaracioncontrol.fdc)
    }

2023-09-08 14:39:08:247 action-translator LogManager.java:25 attr [@-1,10:17='MUTATING',<0>,484:8]
2023-09-08 14:39:08:247 action-translator LogManager.java:25 attr [@-1,37:45='listatstr',<0>,485:9]
2023-09-08 14:39:08:247 action-translator LogManager.java:25 qattr [@-1,89:113='funciondeclaracioncontrol',<0>,485:61].[@-1,115:117='fdc',<0>,485:87]
2023-09-08 14:39:08:247 action-translator LogManager.java:25 attr [@-1,144:152='listatstr',<0>,487:9]
2023-09-08 14:39:08:247 action-translator LogManager.java:25 qattr [@-1,188:212='funciondeclaracioncontrol',<0>,487:53].[@-1,214:216='fdc',<0>,487:79]
2023-09-08 14:39:08:248 action-translator LogManager.java:25 translate 
    $strexpr = instructions.NewStruckVariable($op1.line, $op1.pos, $op.text, $op1.text, $op2.text, $ldupla.lduplist, true)

2023-09-08 14:39:08:248 action-translator LogManager.java:25 attr [@-1,7:13='strexpr',<0>,496:5]
2023-09-08 14:39:08:248 action-translator LogManager.java:25 qattr [@-1,49:51='op1',<0>,496:47].[@-1,53:56='line',<0>,496:51]
2023-09-08 14:39:08:248 action-translator LogManager.java:25 qattr [@-1,60:62='op1',<0>,496:58].[@-1,64:66='pos',<0>,496:62]
2023-09-08 14:39:08:248 action-translator LogManager.java:25 qattr [@-1,70:71='op',<0>,496:68].[@-1,73:76='text',<0>,496:71]
2023-09-08 14:39:08:248 action-translator LogManager.java:25 qattr [@-1,80:82='op1',<0>,496:78].[@-1,84:87='text',<0>,496:82]
2023-09-08 14:39:08:248 action-translator LogManager.java:25 qattr [@-1,91:93='op2',<0>,496:89].[@-1,95:98='text',<0>,496:93]
2023-09-08 14:39:08:248 action-translator LogManager.java:25 qattr [@-1,102:107='ldupla',<0>,496:100].[@-1,109:116='lduplist',<0>,496:107]
2023-09-08 14:39:08:249 action-translator LogManager.java:25 translate  
    $lduplist = instructions.NewStructListDuple($ID_VALIDO.text, $expr.e, $op.lduplist, true)

2023-09-08 14:39:08:249 action-translator LogManager.java:25 attr [@-1,8:15='lduplist',<0>,503:5]
2023-09-08 14:39:08:249 action-translator LogManager.java:25 qattr [@-1,52:60='ID_VALIDO',<0>,503:49].[@-1,62:65='text',<0>,503:59]
2023-09-08 14:39:08:249 action-translator LogManager.java:25 qattr [@-1,69:72='expr',<0>,503:66].[@-1,74:74='e',<0>,503:71]
2023-09-08 14:39:08:249 action-translator LogManager.java:25 qattr [@-1,78:79='op',<0>,503:75].[@-1,81:88='lduplist',<0>,503:78]
2023-09-08 14:39:08:249 action-translator LogManager.java:25 translate 
    $lduplist = instructions.NewStructDuple($ID_VALIDO.text, $expr.e, false)  

2023-09-08 14:39:08:249 action-translator LogManager.java:25 attr [@-1,7:14='lduplist',<0>,507:5]
2023-09-08 14:39:08:249 action-translator LogManager.java:25 qattr [@-1,47:55='ID_VALIDO',<0>,507:45].[@-1,57:60='text',<0>,507:55]
2023-09-08 14:39:08:249 action-translator LogManager.java:25 qattr [@-1,64:67='expr',<0>,507:62].[@-1,69:69='e',<0>,507:67]
2023-09-08 14:39:08:250 action-translator LogManager.java:25 translate 
    $llmstru = instructions.NewStruckLlamadaExp($op.line, $op.pos, $op.text, $op1.text)

2023-09-08 14:39:08:250 action-translator LogManager.java:25 attr [@-1,7:13='llmstru',<0>,515:5]
2023-09-08 14:39:08:250 action-translator LogManager.java:25 qattr [@-1,51:52='op',<0>,515:49].[@-1,54:57='line',<0>,515:52]
2023-09-08 14:39:08:250 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,515:59].[@-1,64:66='pos',<0>,515:62]
2023-09-08 14:39:08:250 action-translator LogManager.java:25 qattr [@-1,70:71='op',<0>,515:68].[@-1,73:76='text',<0>,515:71]
2023-09-08 14:39:08:250 action-translator LogManager.java:25 qattr [@-1,80:82='op1',<0>,515:78].[@-1,84:87='text',<0>,515:82]
2023-09-08 14:39:08:250 action-translator LogManager.java:25 translate 
    $llmstruasig = instructions.NewStruckAsignacionExpr($op.line, $op.pos, $op.text, $op1.text, $expr.e)

2023-09-08 14:39:08:250 action-translator LogManager.java:25 attr [@-1,7:17='llmstruasig',<0>,522:5]
2023-09-08 14:39:08:250 action-translator LogManager.java:25 qattr [@-1,59:60='op',<0>,522:57].[@-1,62:65='line',<0>,522:60]
2023-09-08 14:39:08:250 action-translator LogManager.java:25 qattr [@-1,69:70='op',<0>,522:67].[@-1,72:74='pos',<0>,522:70]
2023-09-08 14:39:08:250 action-translator LogManager.java:25 qattr [@-1,78:79='op',<0>,522:76].[@-1,81:84='text',<0>,522:79]
2023-09-08 14:39:08:251 action-translator LogManager.java:25 qattr [@-1,88:90='op1',<0>,522:86].[@-1,92:95='text',<0>,522:90]
2023-09-08 14:39:08:251 action-translator LogManager.java:25 qattr [@-1,99:102='expr',<0>,522:97].[@-1,104:104='e',<0>,522:102]
2023-09-08 14:39:08:251 action-translator LogManager.java:25 translate 
    $llmstrufun = instructions.NewStruckFuncionesControlP($op.line, $op.pos, $op.text, $op1.text, $listaparametrosllamada.lpll)

2023-09-08 14:39:08:251 action-translator LogManager.java:25 attr [@-1,7:16='llmstrufun',<0>,530:5]
2023-09-08 14:39:08:251 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,530:59].[@-1,64:67='line',<0>,530:62]
2023-09-08 14:39:08:251 action-translator LogManager.java:25 qattr [@-1,71:72='op',<0>,530:69].[@-1,74:76='pos',<0>,530:72]
2023-09-08 14:39:08:251 action-translator LogManager.java:25 qattr [@-1,80:81='op',<0>,530:78].[@-1,83:86='text',<0>,530:81]
2023-09-08 14:39:08:251 action-translator LogManager.java:25 qattr [@-1,90:92='op1',<0>,530:88].[@-1,94:97='text',<0>,530:92]
2023-09-08 14:39:08:251 action-translator LogManager.java:25 qattr [@-1,101:122='listaparametrosllamada',<0>,530:99].[@-1,124:127='lpll',<0>,530:122]
2023-09-08 14:39:08:251 action-translator LogManager.java:25 translate 
    $llmstrufun = instructions.NewStruckFuncionesControl($op.line, $op.pos, $op.text, $op1.text)

2023-09-08 14:39:08:251 action-translator LogManager.java:25 attr [@-1,7:16='llmstrufun',<0>,534:5]
2023-09-08 14:39:08:251 action-translator LogManager.java:25 qattr [@-1,60:61='op',<0>,534:58].[@-1,63:66='line',<0>,534:61]
2023-09-08 14:39:08:251 action-translator LogManager.java:25 qattr [@-1,70:71='op',<0>,534:68].[@-1,73:75='pos',<0>,534:71]
2023-09-08 14:39:08:252 action-translator LogManager.java:25 qattr [@-1,79:80='op',<0>,534:77].[@-1,82:85='text',<0>,534:80]
2023-09-08 14:39:08:252 action-translator LogManager.java:25 qattr [@-1,89:91='op1',<0>,534:87].[@-1,93:96='text',<0>,534:91]
2023-09-08 14:39:08:252 action-translator LogManager.java:25 translate 
    $llmstrufunret = instructions.NewStruckFuncionesControlPR($op.line, $op.pos, $op.text, $op1.text, $listaparametrosllamada.lpll)

2023-09-08 14:39:08:253 action-translator LogManager.java:25 attr [@-1,7:19='llmstrufunret',<0>,540:5]
2023-09-08 14:39:08:253 action-translator LogManager.java:25 qattr [@-1,65:66='op',<0>,540:63].[@-1,68:71='line',<0>,540:66]
2023-09-08 14:39:08:253 action-translator LogManager.java:25 qattr [@-1,75:76='op',<0>,540:73].[@-1,78:80='pos',<0>,540:76]
2023-09-08 14:39:08:253 action-translator LogManager.java:25 qattr [@-1,84:85='op',<0>,540:82].[@-1,87:90='text',<0>,540:85]
2023-09-08 14:39:08:253 action-translator LogManager.java:25 qattr [@-1,94:96='op1',<0>,540:92].[@-1,98:101='text',<0>,540:96]
2023-09-08 14:39:08:253 action-translator LogManager.java:25 qattr [@-1,105:126='listaparametrosllamada',<0>,540:103].[@-1,128:131='lpll',<0>,540:126]
2023-09-08 14:39:08:253 action-translator LogManager.java:25 translate 
    $llmstrufunret = instructions.NewStruckFuncionesControlR($op.line, $op.pos, $op.text, $op1.text)

2023-09-08 14:39:08:253 action-translator LogManager.java:25 attr [@-1,7:19='llmstrufunret',<0>,544:5]
2023-09-08 14:39:08:253 action-translator LogManager.java:25 qattr [@-1,64:65='op',<0>,544:62].[@-1,67:70='line',<0>,544:65]
2023-09-08 14:39:08:253 action-translator LogManager.java:25 qattr [@-1,74:75='op',<0>,544:72].[@-1,77:79='pos',<0>,544:75]
2023-09-08 14:39:08:253 action-translator LogManager.java:25 qattr [@-1,83:84='op',<0>,544:81].[@-1,86:89='text',<0>,544:84]
2023-09-08 14:39:08:253 action-translator LogManager.java:25 qattr [@-1,93:95='op1',<0>,544:91].[@-1,97:100='text',<0>,544:95]
2023-09-08 14:39:08:254 action-translator LogManager.java:25 translate 
    $fdc = instructions.NewFuncionesDeclaracionRP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $tipodato.tipo, $blockinterno.blkint)

2023-09-08 14:39:08:254 action-translator LogManager.java:25 attr [@-1,7:9='fdc',<0>,552:5]
2023-09-08 14:39:08:254 action-translator LogManager.java:25 qattr [@-1,53:61='ID_VALIDO',<0>,552:51].[@-1,63:66='line',<0>,552:61]
2023-09-08 14:39:08:254 action-translator LogManager.java:25 qattr [@-1,70:78='ID_VALIDO',<0>,552:68].[@-1,80:82='pos',<0>,552:78]
2023-09-08 14:39:08:255 action-translator LogManager.java:25 qattr [@-1,86:94='ID_VALIDO',<0>,552:84].[@-1,96:99='text',<0>,552:94]
2023-09-08 14:39:08:255 action-translator LogManager.java:25 qattr [@-1,103:116='listaparametro',<0>,552:101].[@-1,118:127='listparfun',<0>,552:116]
2023-09-08 14:39:08:255 action-translator LogManager.java:25 qattr [@-1,131:138='tipodato',<0>,552:129].[@-1,140:143='tipo',<0>,552:138]
2023-09-08 14:39:08:256 action-translator LogManager.java:25 qattr [@-1,147:158='blockinterno',<0>,552:145].[@-1,160:165='blkint',<0>,552:158]
2023-09-08 14:39:08:256 action-translator LogManager.java:25 translate 
    $fdc = instructions.NewFuncionesDeclaracionR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $blockinterno.blkint)

2023-09-08 14:39:08:256 action-translator LogManager.java:25 attr [@-1,7:9='fdc',<0>,556:5]
2023-09-08 14:39:08:257 action-translator LogManager.java:25 qattr [@-1,52:60='ID_VALIDO',<0>,556:50].[@-1,62:65='line',<0>,556:60]
2023-09-08 14:39:08:257 action-translator LogManager.java:25 qattr [@-1,69:77='ID_VALIDO',<0>,556:67].[@-1,79:81='pos',<0>,556:77]
2023-09-08 14:39:08:257 action-translator LogManager.java:25 qattr [@-1,85:93='ID_VALIDO',<0>,556:83].[@-1,95:98='text',<0>,556:93]
2023-09-08 14:39:08:258 action-translator LogManager.java:25 qattr [@-1,102:109='tipodato',<0>,556:100].[@-1,111:114='tipo',<0>,556:109]
2023-09-08 14:39:08:258 action-translator LogManager.java:25 qattr [@-1,118:129='blockinterno',<0>,556:116].[@-1,131:136='blkint',<0>,556:129]
2023-09-08 14:39:08:258 action-translator LogManager.java:25 translate 
   $fdc = instructions.NewFuncionesDeclaracionP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametro.listparfun, $blockinterno.blkint)

2023-09-08 14:39:08:259 action-translator LogManager.java:25 attr [@-1,6:8='fdc',<0>,560:4]
2023-09-08 14:39:08:259 action-translator LogManager.java:25 qattr [@-1,51:59='ID_VALIDO',<0>,560:49].[@-1,61:64='line',<0>,560:59]
2023-09-08 14:39:08:259 action-translator LogManager.java:25 qattr [@-1,68:76='ID_VALIDO',<0>,560:66].[@-1,78:80='pos',<0>,560:76]
2023-09-08 14:39:08:259 action-translator LogManager.java:25 qattr [@-1,84:92='ID_VALIDO',<0>,560:82].[@-1,94:97='text',<0>,560:92]
2023-09-08 14:39:08:260 action-translator LogManager.java:25 qattr [@-1,101:114='listaparametro',<0>,560:99].[@-1,116:125='listparfun',<0>,560:114]
2023-09-08 14:39:08:260 action-translator LogManager.java:25 qattr [@-1,129:140='blockinterno',<0>,560:127].[@-1,142:147='blkint',<0>,560:140]
2023-09-08 14:39:08:260 action-translator LogManager.java:25 translate 
    $fdc = instructions.NewFuncionesDeclaracion($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $blockinterno.blkint)

2023-09-08 14:39:08:261 action-translator LogManager.java:25 attr [@-1,7:9='fdc',<0>,564:5]
2023-09-08 14:39:08:261 action-translator LogManager.java:25 qattr [@-1,51:59='ID_VALIDO',<0>,564:49].[@-1,61:64='line',<0>,564:59]
2023-09-08 14:39:08:261 action-translator LogManager.java:25 qattr [@-1,68:76='ID_VALIDO',<0>,564:66].[@-1,78:80='pos',<0>,564:76]
2023-09-08 14:39:08:261 action-translator LogManager.java:25 qattr [@-1,84:92='ID_VALIDO',<0>,564:82].[@-1,94:97='text',<0>,564:92]
2023-09-08 14:39:08:261 action-translator LogManager.java:25 qattr [@-1,101:112='blockinterno',<0>,564:99].[@-1,114:119='blkint',<0>,564:112]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 translate 
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true, true, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true, $op3.listparfun )
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false, $op3.listparfun )
        }else {
            $listparfun = instructions.NewFuncionesListaParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false,$op3.listparfun )
        } 
    }      

2023-09-08 14:39:08:263 action-translator LogManager.java:25 attr [@-1,10:11='op',<0>,571:8]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 attr [@-1,34:38='INOUT',<0>,572:12]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 attr [@-1,62:71='listparfun',<0>,573:13]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 qattr [@-1,116:118='op2',<0>,573:67].[@-1,120:123='line',<0>,573:71]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 qattr [@-1,127:129='op2',<0>,573:78].[@-1,131:133='pos',<0>,573:82]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 qattr [@-1,137:138='op',<0>,573:88].[@-1,140:143='text',<0>,573:91]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 qattr [@-1,147:149='op2',<0>,573:98].[@-1,151:154='text',<0>,573:102]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 qattr [@-1,158:165='tipodato',<0>,573:109].[@-1,167:170='tipo',<0>,573:118]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 qattr [@-1,186:188='op3',<0>,573:137].[@-1,190:199='listparfun',<0>,573:141]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 attr [@-1,234:243='listparfun',<0>,575:13]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 qattr [@-1,288:290='op2',<0>,575:67].[@-1,292:295='line',<0>,575:71]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 qattr [@-1,299:301='op2',<0>,575:78].[@-1,303:305='pos',<0>,575:82]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 qattr [@-1,309:310='op',<0>,575:88].[@-1,312:315='text',<0>,575:91]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 qattr [@-1,319:321='op2',<0>,575:98].[@-1,323:326='text',<0>,575:102]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 qattr [@-1,330:337='tipodato',<0>,575:109].[@-1,339:342='tipo',<0>,575:118]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 qattr [@-1,359:361='op3',<0>,575:138].[@-1,363:372='listparfun',<0>,575:142]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 attr [@-1,413:417='INOUT',<0>,578:12]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 attr [@-1,441:450='listparfun',<0>,579:13]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 qattr [@-1,495:497='op2',<0>,579:67].[@-1,499:502='line',<0>,579:71]
2023-09-08 14:39:08:263 action-translator LogManager.java:25 qattr [@-1,506:508='op2',<0>,579:78].[@-1,510:512='pos',<0>,579:82]
2023-09-08 14:39:08:265 action-translator LogManager.java:25 qattr [@-1,520:522='op2',<0>,579:92].[@-1,524:527='text',<0>,579:96]
2023-09-08 14:39:08:265 action-translator LogManager.java:25 qattr [@-1,531:538='tipodato',<0>,579:103].[@-1,540:543='tipo',<0>,579:112]
2023-09-08 14:39:08:265 action-translator LogManager.java:25 qattr [@-1,560:562='op3',<0>,579:132].[@-1,564:573='listparfun',<0>,579:136]
2023-09-08 14:39:08:266 action-translator LogManager.java:25 attr [@-1,608:617='listparfun',<0>,581:13]
2023-09-08 14:39:08:266 action-translator LogManager.java:25 qattr [@-1,662:664='op2',<0>,581:67].[@-1,666:669='line',<0>,581:71]
2023-09-08 14:39:08:266 action-translator LogManager.java:25 qattr [@-1,673:675='op2',<0>,581:78].[@-1,677:679='pos',<0>,581:82]
2023-09-08 14:39:08:267 action-translator LogManager.java:25 qattr [@-1,687:689='op2',<0>,581:92].[@-1,691:694='text',<0>,581:96]
2023-09-08 14:39:08:267 action-translator LogManager.java:25 qattr [@-1,698:705='tipodato',<0>,581:103].[@-1,707:710='tipo',<0>,581:112]
2023-09-08 14:39:08:267 action-translator LogManager.java:25 qattr [@-1,727:729='op3',<0>,581:132].[@-1,731:740='listparfun',<0>,581:136]
2023-09-08 14:39:08:268 action-translator LogManager.java:25 translate 
    if $op != nil{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, true , true)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, $op.text, $op2.text, $tipodato.tipo, false, true)
        } 
    }else{
        if $INOUT != nil{
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, true, false)
        }else {
            $listparfun = instructions.NewFuncionesParametro($op2.line, $op2.pos, "", $op2.text, $tipodato.tipo, false, false)
    } 
    }
    

2023-09-08 14:39:08:268 action-translator LogManager.java:25 attr [@-1,10:11='op',<0>,587:8]
2023-09-08 14:39:08:268 action-translator LogManager.java:25 attr [@-1,34:38='INOUT',<0>,588:12]
2023-09-08 14:39:08:268 action-translator LogManager.java:25 attr [@-1,62:71='listparfun',<0>,589:13]
2023-09-08 14:39:08:268 action-translator LogManager.java:25 qattr [@-1,111:113='op2',<0>,589:62].[@-1,115:118='line',<0>,589:66]
2023-09-08 14:39:08:268 action-translator LogManager.java:25 qattr [@-1,122:124='op2',<0>,589:73].[@-1,126:128='pos',<0>,589:77]
2023-09-08 14:39:08:268 action-translator LogManager.java:25 qattr [@-1,132:133='op',<0>,589:83].[@-1,135:138='text',<0>,589:86]
2023-09-08 14:39:08:268 action-translator LogManager.java:25 qattr [@-1,142:144='op2',<0>,589:93].[@-1,146:149='text',<0>,589:97]
2023-09-08 14:39:08:268 action-translator LogManager.java:25 qattr [@-1,153:160='tipodato',<0>,589:104].[@-1,162:165='tipo',<0>,589:113]
2023-09-08 14:39:08:268 action-translator LogManager.java:25 attr [@-1,212:221='listparfun',<0>,591:13]
2023-09-08 14:39:08:268 action-translator LogManager.java:25 qattr [@-1,261:263='op2',<0>,591:62].[@-1,265:268='line',<0>,591:66]
2023-09-08 14:39:08:269 action-translator LogManager.java:25 qattr [@-1,272:274='op2',<0>,591:73].[@-1,276:278='pos',<0>,591:77]
2023-09-08 14:39:08:269 action-translator LogManager.java:25 qattr [@-1,282:283='op',<0>,591:83].[@-1,285:288='text',<0>,591:86]
2023-09-08 14:39:08:269 action-translator LogManager.java:25 qattr [@-1,292:294='op2',<0>,591:93].[@-1,296:299='text',<0>,591:97]
2023-09-08 14:39:08:269 action-translator LogManager.java:25 qattr [@-1,303:310='tipodato',<0>,591:104].[@-1,312:315='tipo',<0>,591:113]
2023-09-08 14:39:08:269 action-translator LogManager.java:25 attr [@-1,368:372='INOUT',<0>,594:12]
2023-09-08 14:39:08:269 action-translator LogManager.java:25 attr [@-1,396:405='listparfun',<0>,595:13]
2023-09-08 14:39:08:269 action-translator LogManager.java:25 qattr [@-1,445:447='op2',<0>,595:62].[@-1,449:452='line',<0>,595:66]
2023-09-08 14:39:08:269 action-translator LogManager.java:25 qattr [@-1,456:458='op2',<0>,595:73].[@-1,460:462='pos',<0>,595:77]
2023-09-08 14:39:08:269 action-translator LogManager.java:25 qattr [@-1,470:472='op2',<0>,595:87].[@-1,474:477='text',<0>,595:91]
2023-09-08 14:39:08:269 action-translator LogManager.java:25 qattr [@-1,481:488='tipodato',<0>,595:98].[@-1,490:493='tipo',<0>,595:107]
2023-09-08 14:39:08:269 action-translator LogManager.java:25 attr [@-1,540:549='listparfun',<0>,597:13]
2023-09-08 14:39:08:269 action-translator LogManager.java:25 qattr [@-1,589:591='op2',<0>,597:62].[@-1,593:596='line',<0>,597:66]
2023-09-08 14:39:08:269 action-translator LogManager.java:25 qattr [@-1,600:602='op2',<0>,597:73].[@-1,604:606='pos',<0>,597:77]
2023-09-08 14:39:08:269 action-translator LogManager.java:25 qattr [@-1,614:616='op2',<0>,597:87].[@-1,618:621='text',<0>,597:91]
2023-09-08 14:39:08:269 action-translator LogManager.java:25 qattr [@-1,625:632='tipodato',<0>,597:98].[@-1,634:637='tipo',<0>,597:107]
2023-09-08 14:39:08:270 action-translator LogManager.java:25 translate 
    $flctl = instructions.NewFuncionesControlP($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametrosllamada.lpll)

2023-09-08 14:39:08:270 action-translator LogManager.java:25 attr [@-1,7:11='flctl',<0>,606:5]
2023-09-08 14:39:08:270 action-translator LogManager.java:25 qattr [@-1,50:58='ID_VALIDO',<0>,606:48].[@-1,60:63='line',<0>,606:58]
2023-09-08 14:39:08:270 action-translator LogManager.java:25 qattr [@-1,67:75='ID_VALIDO',<0>,606:65].[@-1,77:79='pos',<0>,606:75]
2023-09-08 14:39:08:270 action-translator LogManager.java:25 qattr [@-1,83:91='ID_VALIDO',<0>,606:81].[@-1,93:96='text',<0>,606:91]
2023-09-08 14:39:08:270 action-translator LogManager.java:25 qattr [@-1,100:121='listaparametrosllamada',<0>,606:98].[@-1,123:126='lpll',<0>,606:121]
2023-09-08 14:39:08:270 action-translator LogManager.java:25 translate 
    $flctl = instructions.NewFuncionesControl($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )

2023-09-08 14:39:08:270 action-translator LogManager.java:25 attr [@-1,7:11='flctl',<0>,610:5]
2023-09-08 14:39:08:270 action-translator LogManager.java:25 qattr [@-1,49:57='ID_VALIDO',<0>,610:47].[@-1,59:62='line',<0>,610:57]
2023-09-08 14:39:08:271 action-translator LogManager.java:25 qattr [@-1,66:74='ID_VALIDO',<0>,610:64].[@-1,76:78='pos',<0>,610:74]
2023-09-08 14:39:08:271 action-translator LogManager.java:25 qattr [@-1,82:90='ID_VALIDO',<0>,610:80].[@-1,92:95='text',<0>,610:90]
2023-09-08 14:39:08:271 action-translator LogManager.java:25 translate 
    $flctlret = instructions.NewFuncionesControlPR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $listaparametrosllamada.lpll)

2023-09-08 14:39:08:271 action-translator LogManager.java:25 attr [@-1,7:14='flctlret',<0>,616:5]
2023-09-08 14:39:08:271 action-translator LogManager.java:25 qattr [@-1,54:62='ID_VALIDO',<0>,616:52].[@-1,64:67='line',<0>,616:62]
2023-09-08 14:39:08:271 action-translator LogManager.java:25 qattr [@-1,71:79='ID_VALIDO',<0>,616:69].[@-1,81:83='pos',<0>,616:79]
2023-09-08 14:39:08:271 action-translator LogManager.java:25 qattr [@-1,87:95='ID_VALIDO',<0>,616:85].[@-1,97:100='text',<0>,616:95]
2023-09-08 14:39:08:271 action-translator LogManager.java:25 qattr [@-1,104:125='listaparametrosllamada',<0>,616:102].[@-1,127:130='lpll',<0>,616:125]
2023-09-08 14:39:08:271 action-translator LogManager.java:25 translate 
    $flctlret = instructions.NewFuncionesControlR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )

2023-09-08 14:39:08:271 action-translator LogManager.java:25 attr [@-1,7:14='flctlret',<0>,620:5]
2023-09-08 14:39:08:271 action-translator LogManager.java:25 qattr [@-1,53:61='ID_VALIDO',<0>,620:51].[@-1,63:66='line',<0>,620:61]
2023-09-08 14:39:08:271 action-translator LogManager.java:25 qattr [@-1,70:78='ID_VALIDO',<0>,620:68].[@-1,80:82='pos',<0>,620:78]
2023-09-08 14:39:08:271 action-translator LogManager.java:25 qattr [@-1,86:94='ID_VALIDO',<0>,620:84].[@-1,96:99='text',<0>,620:94]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 translate 
    $lpll = instructions.NewFuncionesLlamadaList1($DIRME.line, $DIRME.pos, $ID_VALIDO.text, $op2.lpll)    

2023-09-08 14:39:08:272 action-translator LogManager.java:25 attr [@-1,7:10='lpll',<0>,626:5]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,53:57='DIRME',<0>,626:51].[@-1,59:62='line',<0>,626:57]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,66:70='DIRME',<0>,626:64].[@-1,72:74='pos',<0>,626:70]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,78:86='ID_VALIDO',<0>,626:76].[@-1,88:91='text',<0>,626:86]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,95:97='op2',<0>,626:93].[@-1,99:102='lpll',<0>,626:97]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 translate 
    $lpll = instructions.NewFuncionesLlamadaList2($DIRME.line, $DIRME.pos, $ID_VALIDO.text)    

2023-09-08 14:39:08:272 action-translator LogManager.java:25 attr [@-1,7:10='lpll',<0>,630:5]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,53:57='DIRME',<0>,630:51].[@-1,59:62='line',<0>,630:57]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,66:70='DIRME',<0>,630:64].[@-1,72:74='pos',<0>,630:70]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,78:86='ID_VALIDO',<0>,630:76].[@-1,88:91='text',<0>,630:86]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 translate 
    if $op != nil{
        $lpll = instructions.NewFuncionesLlamadaList3($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e, $op2.lpll)
    }else{
        $lpll = instructions.NewFuncionesLlamadaList4($COMA.line, $COMA.pos, $expr.e, $op2.lpll)
    }

2023-09-08 14:39:08:272 action-translator LogManager.java:25 attr [@-1,10:11='op',<0>,634:8]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 attr [@-1,31:34='lpll',<0>,635:9]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,77:85='ID_VALIDO',<0>,635:55].[@-1,87:90='line',<0>,635:65]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,94:102='ID_VALIDO',<0>,635:72].[@-1,104:106='pos',<0>,635:82]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,110:118='ID_VALIDO',<0>,635:88].[@-1,120:123='text',<0>,635:98]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,127:130='expr',<0>,635:105].[@-1,132:132='e',<0>,635:110]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,136:138='op2',<0>,635:114].[@-1,140:143='lpll',<0>,635:118]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 attr [@-1,168:171='lpll',<0>,637:9]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,214:217='COMA',<0>,637:55].[@-1,219:222='line',<0>,637:60]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,226:229='COMA',<0>,637:67].[@-1,231:233='pos',<0>,637:72]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,237:240='expr',<0>,637:78].[@-1,242:242='e',<0>,637:83]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,246:248='op2',<0>,637:87].[@-1,250:253='lpll',<0>,637:91]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 translate 
    if $op != nil{
        $lpll = instructions.NewFuncionesLlamadaList5($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
    }else{
        $lpll = instructions.NewFuncionesLlamadaList6($expr.e)
    }     

2023-09-08 14:39:08:272 action-translator LogManager.java:25 attr [@-1,10:11='op',<0>,642:8]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 attr [@-1,31:34='lpll',<0>,643:9]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,77:85='ID_VALIDO',<0>,643:55].[@-1,87:90='line',<0>,643:65]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,94:102='ID_VALIDO',<0>,643:72].[@-1,104:106='pos',<0>,643:82]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,110:118='ID_VALIDO',<0>,643:88].[@-1,120:123='text',<0>,643:98]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,127:130='expr',<0>,643:105].[@-1,132:132='e',<0>,643:110]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 attr [@-1,157:160='lpll',<0>,645:9]
2023-09-08 14:39:08:272 action-translator LogManager.java:25 qattr [@-1,203:206='expr',<0>,645:55].[@-1,208:208='e',<0>,645:60]
2023-09-08 14:39:08:273 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$listaexpresions.blkparf)
2023-09-08 14:39:08:273 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,655:40]
2023-09-08 14:39:08:273 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,655:70].[@-1,38:41='line',<0>,655:76]
2023-09-08 14:39:08:273 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,655:82].[@-1,50:52='pos',<0>,655:88]
2023-09-08 14:39:08:273 action-translator LogManager.java:25 qattr [@-1,55:69='listaexpresions',<0>,655:93].[@-1,71:77='blkparf',<0>,655:109]
2023-09-08 14:39:08:273 action-translator LogManager.java:25 translate  $intemb = instructions.NewFuncionIntEmbebida($expr.e)
2023-09-08 14:39:08:273 action-translator LogManager.java:25 attr [@-1,2:7='intemb',<0>,658:27]
2023-09-08 14:39:08:273 action-translator LogManager.java:25 qattr [@-1,47:50='expr',<0>,658:72].[@-1,52:52='e',<0>,658:77]
2023-09-08 14:39:08:273 action-translator LogManager.java:25 translate  $floemb = instructions.NewFuncionFloatEmbebida($expr.e)
2023-09-08 14:39:08:273 action-translator LogManager.java:25 attr [@-1,2:7='floemb',<0>,661:29]
2023-09-08 14:39:08:273 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,661:76].[@-1,54:54='e',<0>,661:81]
2023-09-08 14:39:08:273 action-translator LogManager.java:25 translate  $stremb = instructions.NewFuncionStringEmbebida($expr.e)
2023-09-08 14:39:08:273 action-translator LogManager.java:25 attr [@-1,2:7='stremb',<0>,664:30]
2023-09-08 14:39:08:273 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,664:78].[@-1,55:55='e',<0>,664:83]
2023-09-08 14:39:08:630 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-09-08 14:39:08:630 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-09-08 14:39:08:715 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

2023-09-08 14:39:08:715 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions"
    import "strings"

