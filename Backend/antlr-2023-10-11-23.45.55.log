2023-10-11 23:45:53:722 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACT (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NULO (BLOCK (ALT 'nil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGO (BLOCK (ALT '...'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNCION (BLOCK (ALT 'func'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE CADENA (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (RULE ID_VALIDO (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CHARACTER (BLOCK (ALT '\'' (BLOCK (ALT ESCAPE) (ALT (~ (SET ['\\\r\n])))) '\''))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [\\'tnr]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IG (BLOCK (ALT '='))) (RULE DOS_PUNTOS (BLOCK (ALT ':'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE CIERRE_INTE (BLOCK (ALT '?'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE SUMA (BLOCK (ALT '+='))) (RULE RESTA (BLOCK (ALT '-='))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE RETORNO (BLOCK (ALT '->'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DIRME (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-10-11 23:45:53:734 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE STRING (BLOCK (ALT 'String'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE CHARACT (BLOCK (ALT 'Character'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE NULO (BLOCK (ALT 'nil'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE RANGO (BLOCK (ALT '...'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE FUNCION (BLOCK (ALT 'func'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE INOUT (BLOCK (ALT 'inout'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE REPEATING (BLOCK (ALT 'repeating'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE MUTATING (BLOCK (ALT 'mutating'))) (RULE SELF (BLOCK (ALT 'self'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE CADENA (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET '"'))))) '"'))) (RULE ID_VALIDO (BLOCK (ALT (BLOCK (ALT [a-zA-Z_])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE CHARACTER (BLOCK (ALT '\'' (BLOCK (ALT ESCAPE) (ALT (~ (SET ['\\\r\n])))) '\''))) (RULE ESCAPE (RULEMODIFIERS fragment) (BLOCK (ALT '\\' [\\'tnr]))) (RULE WS (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \t\r\n])))) skip))) (RULE IG (BLOCK (ALT '='))) (RULE DOS_PUNTOS (BLOCK (ALT ':'))) (RULE PUNTOCOMA (BLOCK (ALT ';'))) (RULE CIERRE_INTE (BLOCK (ALT '?'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE SUMA (BLOCK (ALT '+='))) (RULE RESTA (BLOCK (ALT '-='))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE RETORNO (BLOCK (ALT '->'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE GUIONBAJO (BLOCK (ALT '_'))) (RULE CORCHIZQ (BLOCK (ALT '['))) (RULE CORCHDER (BLOCK (ALT ']'))) (RULE DIRME (BLOCK (ALT '&'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-10-11 23:45:54:395 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"
   
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $matrizcontrol.matct}) (ALT funciondeclaracioncontrol { $inst = $funciondeclaracioncontrol.fdc}) (ALT funcionllamadacontrol { $inst = $funcionllamadacontrol.flctl}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $matrizcontrol.matct}) (ALT funcionllamadacontrol { $insint = $funcionllamadacontrol.flctl}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr { $decvbl = datosprimitivos.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = datosprimitivos.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = datosprimitivos.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = datosprimitivos.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = datosprimitivos.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = sentencias.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = sentencias.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = sentencias.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = sentencias.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}) (ALT stringembebida { $e = $stringembebida.stremb}) (ALT funcionllamadacontrolConRetorno { $e = $funcionllamadacontrolConRetorno.flctlret}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = sentencias.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = sentencias.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = sentencias.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = sentencias.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = sentencias.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=sentencias.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = sentencias.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR (= op1 ID_VALIDO) IN (= op2 ID_VALIDO) LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForId($FOR.line, $FOR.pos, $op1.text, $op2.text, $blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = sentencias.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = sentencias.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = sentencias.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN (= op expr) {
    $rect = sentencias.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}) (ALT RETURN {
    $rect = sentencias.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = datoscompuestos.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = datoscompuestos.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = datoscompuestos.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = datoscompuestos.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = datoscompuestos.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = datoscompuestos.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = datoscompuestos.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs IG (= op3 expr) { $veadct = datoscompuestos.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER IG (= op3 expr) { $veadct = datoscompuestos.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = datoscompuestos.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = datoscompuestos.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = datoscompuestos.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = datoscompuestos.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = datoscompuestos.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs { $vepposct = datoscompuestos.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER { $vepposct = datoscompuestos.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) }) (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = datoscompuestos.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE matrizcontrol (returns interfaces.Instruction matct) (BLOCK (ALT VAR ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS tipomatriz))) IG defmatriz {
    if ($DOS_PUNTOS != nil) {
        $matct = datoscompuestos.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        fmt.Println("Nada")
        //$matct = datoscompuestos.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }
}))) (RULE tipomatriz (returns interfaces.Expression tipomat) (BLOCK (ALT CORCHIZQ tipomatriz CORCHDER { 
    $tipomat = datoscompuestos.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)
}) (ALT CORCHIZQ tipodato CORCHDER { 
    $tipomat = datoscompuestos.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)
}))) (RULE defmatriz (returns interfaces.Instruction defmat) (BLOCK (ALT listavaloresmat { $defmat = $listavaloresmat.listvlamat}))) (RULE listavaloresmat (returns interfaces.Instruction listvlamat) (BLOCK (ALT CORCHIZQ listavaloresmat2 CORCHDER { $listvlamat = $listavaloresmat2.mylisttmatt}) (ALT simplematriz { $listvlamat = $simplematriz.simmat}))) (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (= op listavaloresmat2) COMA listavaloresmat { $mylisttmatt = datoscompuestos.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}) (ALT listavaloresmat { $mylisttmatt = datoscompuestos.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT listaexpresions { $mylisttmatt = datoscompuestos.NewMatrizListaExpresion($listaexpresions.blkparf)}))) (RULE listaexpresions (returns []interface{} blkparf) (@ init {
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= funpar listaexpresion)))) {
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }
}))) (RULE listaexpresion (returns interfaces.Expression funpar) (BLOCK (ALT COMA expr {
    $funpar = datoscompuestos.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $funpar = datoscompuestos.NewArregloParametro($expr.e)
}))) (RULE simplematriz (returns interfaces.Instruction simmat) (BLOCK (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS (= op simplematriz) COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = datoscompuestos.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}) (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS expr COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = datoscompuestos.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}))) (RULE listamatrizaddsubs (returns []interface{} blklimatas) (@ init {
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= lmas listamatrizaddsub)))) {
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }
}))) (RULE listamatrizaddsub (returns interfaces.Expression lmas) (BLOCK (ALT CORCHIZQ expr CORCHDER {
    $lmas = datoscompuestos.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)
}))) (RULE funciondeclaracioncontrol (returns interfaces.Instruction fdc) (BLOCK (ALT FUNCION ID_VALIDO PARIZQ PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = funciones.NewFuncionesDeclaracionR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER LLAVEIZQ blockinterno LLAVEDER {
    $fdc = funciones.NewFuncionesDeclaracion($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $blockinterno.blkint)
}))) (RULE funcionllamadacontrol (returns interfaces.Instruction flctl) (BLOCK (ALT ID_VALIDO PARIZQ PARDER {
    $flctl = funciones.NewFuncionesControl($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE funcionllamadacontrolConRetorno (returns interfaces.Expression flctlret) (BLOCK (ALT ID_VALIDO PARIZQ PARDER {
    $flctlret = funciones.NewFuncionesControlR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listaexpresions PARDER { $prnt = funciones.NewPrint($PRINT.line,$PRINT.pos,$listaexpresions.blkparf)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = funciones.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = funciones.NewFuncionFloatEmbebida($expr.e)}))) (RULE stringembebida (returns interfaces.Expression stremb) (BLOCK (ALT STRING PARIZQ expr PARDER { $stremb = funciones.NewFuncionStringEmbebida($expr.e)})))))
2023-10-11 23:45:54:402 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"
   
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $matrizcontrol.matct}) (ALT funciondeclaracioncontrol { $inst = $funciondeclaracioncontrol.fdc}) (ALT funcionllamadacontrol { $inst = $funcionllamadacontrol.flctl}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $matrizcontrol.matct}) (ALT funcionllamadacontrol { $insint = $funcionllamadacontrol.flctl}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr { $decvbl = datosprimitivos.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = datosprimitivos.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = datosprimitivos.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = datosprimitivos.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = datosprimitivos.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = sentencias.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = sentencias.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = sentencias.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = sentencias.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}) (ALT stringembebida { $e = $stringembebida.stremb}) (ALT funcionllamadacontrolConRetorno { $e = $funcionllamadacontrolConRetorno.flctlret}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = sentencias.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = sentencias.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = sentencias.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = sentencias.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = sentencias.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=sentencias.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = sentencias.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR (= op1 ID_VALIDO) IN (= op2 ID_VALIDO) LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForId($FOR.line, $FOR.pos, $op1.text, $op2.text, $blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = sentencias.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = sentencias.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = sentencias.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN (= op expr) {
    $rect = sentencias.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}) (ALT RETURN {
    $rect = sentencias.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = datoscompuestos.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = datoscompuestos.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = datoscompuestos.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = datoscompuestos.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = datoscompuestos.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = datoscompuestos.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = datoscompuestos.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs IG (= op3 expr) { $veadct = datoscompuestos.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER IG (= op3 expr) { $veadct = datoscompuestos.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = datoscompuestos.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = datoscompuestos.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = datoscompuestos.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = datoscompuestos.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = datoscompuestos.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs { $vepposct = datoscompuestos.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER { $vepposct = datoscompuestos.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) }) (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = datoscompuestos.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE matrizcontrol (returns interfaces.Instruction matct) (BLOCK (ALT VAR ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS tipomatriz))) IG defmatriz {
    if ($DOS_PUNTOS != nil) {
        $matct = datoscompuestos.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        fmt.Println("Nada")
        //$matct = datoscompuestos.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }
}))) (RULE tipomatriz (returns interfaces.Expression tipomat) (BLOCK (ALT CORCHIZQ tipomatriz CORCHDER { 
    $tipomat = datoscompuestos.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)
}) (ALT CORCHIZQ tipodato CORCHDER { 
    $tipomat = datoscompuestos.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)
}))) (RULE defmatriz (returns interfaces.Instruction defmat) (BLOCK (ALT listavaloresmat { $defmat = $listavaloresmat.listvlamat}))) (RULE listavaloresmat (returns interfaces.Instruction listvlamat) (BLOCK (ALT CORCHIZQ listavaloresmat2 CORCHDER { $listvlamat = $listavaloresmat2.mylisttmatt}) (ALT simplematriz { $listvlamat = $simplematriz.simmat}))) (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (= op listavaloresmat2) COMA listavaloresmat { $mylisttmatt = datoscompuestos.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}) (ALT listavaloresmat { $mylisttmatt = datoscompuestos.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT listaexpresions { $mylisttmatt = datoscompuestos.NewMatrizListaExpresion($listaexpresions.blkparf)}))) (RULE listaexpresions (returns []interface{} blkparf) (@ init {
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= funpar listaexpresion)))) {
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }
}))) (RULE listaexpresion (returns interfaces.Expression funpar) (BLOCK (ALT COMA expr {
    $funpar = datoscompuestos.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $funpar = datoscompuestos.NewArregloParametro($expr.e)
}))) (RULE simplematriz (returns interfaces.Instruction simmat) (BLOCK (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS (= op simplematriz) COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = datoscompuestos.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}) (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS expr COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = datoscompuestos.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}))) (RULE listamatrizaddsubs (returns []interface{} blklimatas) (@ init {
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= lmas listamatrizaddsub)))) {
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }
}))) (RULE listamatrizaddsub (returns interfaces.Expression lmas) (BLOCK (ALT CORCHIZQ expr CORCHDER {
    $lmas = datoscompuestos.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)
}))) (RULE funciondeclaracioncontrol (returns interfaces.Instruction fdc) (BLOCK (ALT FUNCION ID_VALIDO PARIZQ PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = funciones.NewFuncionesDeclaracionR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER LLAVEIZQ blockinterno LLAVEDER {
    $fdc = funciones.NewFuncionesDeclaracion($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $blockinterno.blkint)
}))) (RULE funcionllamadacontrol (returns interfaces.Instruction flctl) (BLOCK (ALT ID_VALIDO PARIZQ PARDER {
    $flctl = funciones.NewFuncionesControl($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE funcionllamadacontrolConRetorno (returns interfaces.Expression flctlret) (BLOCK (ALT ID_VALIDO PARIZQ PARDER {
    $flctlret = funciones.NewFuncionesControlR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listaexpresions PARDER { $prnt = funciones.NewPrint($PRINT.line,$PRINT.pos,$listaexpresions.blkparf)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = funciones.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = funciones.NewFuncionFloatEmbebida($expr.e)}))) (RULE stringembebida (returns interfaces.Expression stremb) (BLOCK (ALT STRING PARIZQ expr PARDER { $stremb = funciones.NewFuncionStringEmbebida($expr.e)})))))
2023-10-11 23:45:54:405 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"
   
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $inst = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $inst = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $inst = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $inst = $switchcontrol.mySwitch}) (ALT whilecontrol { $inst = $whilecontrol.whict}) (ALT forcontrol { $inst = $forcontrol.forct}) (ALT guardcontrol { $inst = $guardcontrol.guct}) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $vectorcontrol.vect }) (ALT vectoragregar { $inst = $vectoragregar.veadct }) (ALT vectorremover { $inst = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $inst = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $inst = $matrizcontrol.matct}) (ALT funciondeclaracioncontrol { $inst = $funciondeclaracioncontrol.fdc}) (ALT funcionllamadacontrol { $inst = $funcionllamadacontrol.flctl}))) (RULE blockinterno (returns []interface{} blkint) (@ init {
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= insint instructionint)))) {
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    }))) (RULE instructionint (returns interfaces.Instruction insint) (BLOCK (ALT declavarible (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declavarible.decvbl}) (ALT declaconstante (? (BLOCK (ALT PUNTOCOMA))) { $insint = $declaconstante.deccon}) (ALT asignacionvariable (? (BLOCK (ALT PUNTOCOMA))) { $insint = $asignacionvariable.asgvbl}) (ALT sentenciaifelse { $insint = $sentenciaifelse.myIfElse}) (ALT switchcontrol { $insint = $switchcontrol.mySwitch}) (ALT whilecontrol { $insint = $whilecontrol.whict}) (ALT forcontrol { $insint = $forcontrol.forct}) (ALT guardcontrol { $insint = $guardcontrol.guct}) (ALT continuee (? (BLOCK (ALT PUNTOCOMA))) { $insint = $continuee.coct}) (ALT breakk (? (BLOCK (ALT PUNTOCOMA))) { $insint = $breakk.brkct}) (ALT retornos (? (BLOCK (ALT PUNTOCOMA))) { $insint = $retornos.rect }) (ALT vectorcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorcontrol.vect }) (ALT vectoragregar (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectoragregar.veadct }) (ALT vectorremover (? (BLOCK (ALT PUNTOCOMA))) { $insint = $vectorremover.vermct }) (ALT printstmt (? (BLOCK (ALT PUNTOCOMA))) { $insint = $printstmt.prnt}) (ALT matrizcontrol (? (BLOCK (ALT PUNTOCOMA))) { $insint = $matrizcontrol.matct}) (ALT funcionllamadacontrol { $insint = $funcionllamadacontrol.flctl}))) (RULE declavarible (returns interfaces.Instruction decvbl) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS tipodato IG expr { $decvbl = datosprimitivos.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT VAR ID_VALIDO IG expr {$decvbl = datosprimitivos.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)}) (ALT VAR ID_VALIDO DOS_PUNTOS tipodato CIERRE_INTE {$decvbl = datosprimitivos.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)}))) (RULE declaconstante (returns interfaces.Instruction deccon) (BLOCK (ALT LET ID_VALIDO DOS_PUNTOS tipodato IG expr {$deccon = datosprimitivos.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)}) (ALT LET ID_VALIDO IG expr {$deccon = datosprimitivos.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)}))) (RULE asignacionvariable (returns interfaces.Instruction asgvbl) (BLOCK (ALT ID_VALIDO IG expr { $asgvbl = sentencias.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO SUMA expr { $asgvbl = sentencias.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}) (ALT ID_VALIDO RESTA expr { $asgvbl = sentencias.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE tipodato (returns environment.TipoExpresion tipo) (BLOCK (ALT INT { $tipo = environment.INTEGER }) (ALT FLOAT { $tipo = environment.FLOAT }) (ALT STRING { $tipo = environment.STRING }) (ALT BOOL { $tipo = environment.BOOLEAN }) (ALT CHARACT { $tipo = environment.CHARACTER }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (= left expr) (= op MODULO) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT SUB NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT CADENA {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT CHARACTER { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT ID_VALIDO {
        id := $ID_VALIDO.text
        $e = sentencias.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT NULO {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT vectorvacio { $e = $vectorvacio.veemct}) (ALT vectorcount { $e = $vectorcount.vecnct}) (ALT vectoraccess { $e = $vectoraccess.vepposct}) (ALT intembebida { $e = $intembebida.intemb}) (ALT floatembebida { $e = $floatembebida.floemb}) (ALT stringembebida { $e = $stringembebida.stremb}) (ALT funcionllamadacontrolConRetorno { $e = $funcionllamadacontrolConRetorno.flctlret}))) (RULE sentenciaifelse (returns interfaces.Instruction myIfElse) (BLOCK (ALT IF expr LLAVEIZQ blockinterno LLAVEDER { $myIfElse = sentencias.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)}) (ALT IF expr LLAVEIZQ (= ifop blockinterno) LLAVEDER ELSE LLAVEIZQ (= elseop blockinterno) LLAVEDER { $myIfElse = sentencias.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)}) (ALT IF expr LLAVEIZQ blockinterno LLAVEDER ELSE sentenciaifelse { $myIfElse = sentencias.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)}))) (RULE switchcontrol (returns interfaces.Instruction mySwitch) (BLOCK (ALT SWITCH expr LLAVEIZQ blockcase (? (BLOCK (ALT DEFAULT DOS_PUNTOS blockinterno))) LLAVEDER {
    if ($DEFAULT != nil) {
        $mySwitch = sentencias.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = sentencias.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }
}))) (RULE blockcase (returns []interface{} blkcase) (@ init {
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blocas bloquecase)))) {
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }
}))) (RULE bloquecase (returns interfaces.Instruction blocas) (BLOCK (ALT CASE expr DOS_PUNTOS blockinterno {
    $blocas=sentencias.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)
}))) (RULE whilecontrol (returns interfaces.Instruction whict) (BLOCK (ALT WHILE expr LLAVEIZQ blockinterno LLAVEDER { $whict = sentencias.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)}))) (RULE forcontrol (returns interfaces.Instruction forct) (BLOCK (ALT FOR ID_VALIDO IN (= left expr) RANGO (= right expr) LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)}) (ALT FOR (= op1 ID_VALIDO) IN (= op2 ID_VALIDO) LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForId($FOR.line, $FOR.pos, $op1.text, $op2.text, $blockinterno.blkint)}) (ALT FOR ID_VALIDO IN expr LLAVEIZQ blockinterno LLAVEDER { $forct = sentencias.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)}))) (RULE guardcontrol (returns interfaces.Instruction guct) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ blockinterno LLAVEDER { 
    $guct = sentencias.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)
}))) (RULE continuee (returns interfaces.Instruction coct) (BLOCK (ALT CONTINUE {$coct = sentencias.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE breakk (returns interfaces.Instruction brkct) (BLOCK (ALT BREAK { $brkct = sentencias.NewTransferenciaBreak($BREAK.line, $BREAK.pos)}))) (RULE retornos (returns interfaces.Instruction rect) (BLOCK (ALT RETURN (= op expr) {
    $rect = sentencias.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);
}) (ALT RETURN {
    $rect = sentencias.NewTransferenciaReturn($RETURN.line, $RETURN.pos);
}))) (RULE vectorcontrol (returns interfaces.Instruction vect) (BLOCK (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ blockparams CORCHDER { $vect = datoscompuestos.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)}) (ALT VAR ID_VALIDO DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG CORCHIZQ CORCHDER { $vect = datoscompuestos.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)}) (ALT VAR (= prin ID_VALIDO) DOS_PUNTOS CORCHIZQ tipodato CORCHDER IG (= secu ID_VALIDO) { $vect = datoscompuestos.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)}))) (RULE blockparams (returns []interface{} blkpar) (@ init {
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= blopas bloqueparams)))) {
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }
}))) (RULE bloqueparams (returns interfaces.Expression blopas) (BLOCK (ALT COMA expr {
    $blopas = datoscompuestos.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $blopas = datoscompuestos.NewArregloParametro($expr.e)
}))) (RULE vectoragregar (returns interfaces.Instruction veadct) (BLOCK (ALT ID_VALIDO PUNTO APPEND PARIZQ expr PARDER { $veadct = datoscompuestos.NewArregloAppend($ID_VALIDO.text , $expr.e)}) (ALT (= prin ID_VALIDO) CORCHIZQ (= pop expr) CORCHDER IG (= secu ID_VALIDO) CORCHIZQ (= sop expr) CORCHDER { $veadct = datoscompuestos.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)}) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs IG (= op3 expr) { $veadct = datoscompuestos.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER IG (= op3 expr) { $veadct = datoscompuestos.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) }) (ALT ID_VALIDO CORCHIZQ (= pop expr) CORCHDER IG (= sop expr) { $veadct = datoscompuestos.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)}))) (RULE vectorremover (returns interfaces.Instruction vermct) (BLOCK (ALT ID_VALIDO PUNTO REMOVELAST PARIZQ PARDER { $vermct = datoscompuestos.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}) (ALT ID_VALIDO PUNTO REMOVE PARIZQ AT DOS_PUNTOS expr PARDER { $vermct = datoscompuestos.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)}))) (RULE vectorvacio (returns interfaces.Expression veemct) (BLOCK (ALT ID_VALIDO PUNTO ISEMPTY { $veemct = datoscompuestos.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectorcount (returns interfaces.Expression vecnct) (BLOCK (ALT ID_VALIDO PUNTO COUNT { $vecnct = datoscompuestos.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)}))) (RULE vectoraccess (returns interfaces.Expression vepposct) (BLOCK (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER listamatrizaddsubs { $vepposct = datoscompuestos.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) }) (ALT ID_VALIDO CORCHIZQ (= op1 expr) CORCHDER CORCHIZQ (= op2 expr) CORCHDER { $vepposct = datoscompuestos.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) }) (ALT ID_VALIDO CORCHIZQ expr CORCHDER { $vepposct = datoscompuestos.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)}))) (RULE matrizcontrol (returns interfaces.Instruction matct) (BLOCK (ALT VAR ID_VALIDO (? (BLOCK (ALT DOS_PUNTOS tipomatriz))) IG defmatriz {
    if ($DOS_PUNTOS != nil) {
        $matct = datoscompuestos.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        fmt.Println("Nada")
        //$matct = datoscompuestos.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }
}))) (RULE tipomatriz (returns interfaces.Expression tipomat) (BLOCK (ALT CORCHIZQ tipomatriz CORCHDER { 
    $tipomat = datoscompuestos.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)
}) (ALT CORCHIZQ tipodato CORCHDER { 
    $tipomat = datoscompuestos.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)
}))) (RULE defmatriz (returns interfaces.Instruction defmat) (BLOCK (ALT listavaloresmat { $defmat = $listavaloresmat.listvlamat}))) (RULE listavaloresmat (returns interfaces.Instruction listvlamat) (BLOCK (ALT CORCHIZQ listavaloresmat2 CORCHDER { $listvlamat = $listavaloresmat2.mylisttmatt}) (ALT simplematriz { $listvlamat = $simplematriz.simmat}))) (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (= op listavaloresmat2) COMA listavaloresmat { $mylisttmatt = datoscompuestos.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}) (ALT listavaloresmat { $mylisttmatt = datoscompuestos.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT listaexpresions { $mylisttmatt = datoscompuestos.NewMatrizListaExpresion($listaexpresions.blkparf)}))) (RULE listaexpresions (returns []interface{} blkparf) (@ init {
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= funpar listaexpresion)))) {
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }
}))) (RULE listaexpresion (returns interfaces.Expression funpar) (BLOCK (ALT COMA expr {
    $funpar = datoscompuestos.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)
}) (ALT expr {
    $funpar = datoscompuestos.NewArregloParametro($expr.e)
}))) (RULE simplematriz (returns interfaces.Instruction simmat) (BLOCK (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS (= op simplematriz) COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = datoscompuestos.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}) (ALT tipomatriz PARIZQ REPEATING DOS_PUNTOS expr COMA COUNT DOS_PUNTOS NUMBER PARDER { $simmat = datoscompuestos.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)}))) (RULE listamatrizaddsubs (returns []interface{} blklimatas) (@ init {
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext
}) (BLOCK (ALT (+ (BLOCK (ALT (+= lmas listamatrizaddsub)))) {
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }
}))) (RULE listamatrizaddsub (returns interfaces.Expression lmas) (BLOCK (ALT CORCHIZQ expr CORCHDER {
    $lmas = datoscompuestos.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)
}))) (RULE funciondeclaracioncontrol (returns interfaces.Instruction fdc) (BLOCK (ALT FUNCION ID_VALIDO PARIZQ PARDER RETORNO tipodato LLAVEIZQ blockinterno LLAVEDER {
    $fdc = funciones.NewFuncionesDeclaracionR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $blockinterno.blkint)
}) (ALT FUNCION ID_VALIDO PARIZQ PARDER LLAVEIZQ blockinterno LLAVEDER {
    $fdc = funciones.NewFuncionesDeclaracion($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $blockinterno.blkint)
}))) (RULE funcionllamadacontrol (returns interfaces.Instruction flctl) (BLOCK (ALT ID_VALIDO PARIZQ PARDER {
    $flctl = funciones.NewFuncionesControl($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE funcionllamadacontrolConRetorno (returns interfaces.Expression flctlret) (BLOCK (ALT ID_VALIDO PARIZQ PARDER {
    $flctlret = funciones.NewFuncionesControlR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )
}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ listaexpresions PARDER { $prnt = funciones.NewPrint($PRINT.line,$PRINT.pos,$listaexpresions.blkparf)}))) (RULE intembebida (returns interfaces.Expression intemb) (BLOCK (ALT INT PARIZQ expr PARDER { $intemb = funciones.NewFuncionIntEmbebida($expr.e)}))) (RULE floatembebida (returns interfaces.Expression floemb) (BLOCK (ALT FLOAT PARIZQ expr PARDER { $floemb = funciones.NewFuncionFloatEmbebida($expr.e)}))) (RULE stringembebida (returns interfaces.Expression stremb) (BLOCK (ALT STRING PARIZQ expr PARDER { $stremb = funciones.NewFuncionStringEmbebida($expr.e)})))))
2023-10-11 23:45:54:405 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"
   
}) RULES)
2023-10-11 23:45:54:448 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op=NOT<tokenIndex=583> right=expr<tokenIndex=587,p=25> { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) } 
        | PARIZQ<tokenIndex=741> expr<tokenIndex=743> PARDER<tokenIndex=745> { $e = $expr.e } 
        | SUB<tokenIndex=751> NUMBER<tokenIndex=753>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    } 
        | NUMBER<tokenIndex=759>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | CADENA<tokenIndex=765>
    {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=771> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=777> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        | CHARACTER<tokenIndex=783> 
    { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    } 
        | ID_VALIDO<tokenIndex=788>
    {
        id := $ID_VALIDO.text
        $e = sentencias.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    } 
        | NULO<tokenIndex=793> {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)} 
        | vectorvacio<tokenIndex=799> { $e = $vectorvacio.veemct} 
        | vectorcount<tokenIndex=805> { $e = $vectorcount.vecnct} 
        | vectoraccess<tokenIndex=811> { $e = $vectoraccess.vepposct} 
        | intembebida<tokenIndex=817> { $e = $intembebida.intemb} 
        | floatembebida<tokenIndex=823> { $e = $floatembebida.floemb} 
        | stringembebida<tokenIndex=829> { $e = $stringembebida.stremb} 
        | funcionllamadacontrolConRetorno<tokenIndex=835> { $e = $funcionllamadacontrolConRetorno.flctlret} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 24)}?<p=24> op=MODULO<tokenIndex=599> right=expr<tokenIndex=603,p=25> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 23)}?<p=23> op=(MUL<tokenIndex=616>|DIV<tokenIndex=618>) right=expr<tokenIndex=623,p=24> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 22)}?<p=22> op=(ADD<tokenIndex=636>|SUB<tokenIndex=638>) right=expr<tokenIndex=643,p=23> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=(MAY_IG<tokenIndex=656>|MAYOR<tokenIndex=658>) right=expr<tokenIndex=663,p=22> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=(MEN_IG<tokenIndex=676>|MENOR<tokenIndex=678>) right=expr<tokenIndex=683,p=21> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(IG_IG<tokenIndex=696>|DIF<tokenIndex=698>) right=expr<tokenIndex=703,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=AND<tokenIndex=715> right=expr<tokenIndex=719,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=OR<tokenIndex=731> right=expr<tokenIndex=735,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-10-11 23:45:54:468 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 583)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 587) (= p 25)))) { $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 741))) (expr (ELEMENT_OPTIONS (= tokenIndex 743))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 745))) { $e = $expr.e }) (ALT (SUB (ELEMENT_OPTIONS (= tokenIndex 751))) (NUMBER (ELEMENT_OPTIONS (= tokenIndex 753))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 759))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (CADENA (ELEMENT_OPTIONS (= tokenIndex 765))) {
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 771))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 777))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }) (ALT (CHARACTER (ELEMENT_OPTIONS (= tokenIndex 783))) { 
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    }) (ALT (ID_VALIDO (ELEMENT_OPTIONS (= tokenIndex 788))) {
        id := $ID_VALIDO.text
        $e = sentencias.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    }) (ALT (NULO (ELEMENT_OPTIONS (= tokenIndex 793))) {$e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)}) (ALT (vectorvacio (ELEMENT_OPTIONS (= tokenIndex 799))) { $e = $vectorvacio.veemct}) (ALT (vectorcount (ELEMENT_OPTIONS (= tokenIndex 805))) { $e = $vectorcount.vecnct}) (ALT (vectoraccess (ELEMENT_OPTIONS (= tokenIndex 811))) { $e = $vectoraccess.vepposct}) (ALT (intembebida (ELEMENT_OPTIONS (= tokenIndex 817))) { $e = $intembebida.intemb}) (ALT (floatembebida (ELEMENT_OPTIONS (= tokenIndex 823))) { $e = $floatembebida.floemb}) (ALT (stringembebida (ELEMENT_OPTIONS (= tokenIndex 829))) { $e = $stringembebida.stremb}) (ALT (funcionllamadacontrolConRetorno (ELEMENT_OPTIONS (= tokenIndex 835))) { $e = $funcionllamadacontrolConRetorno.flctlret})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 24)}? (ELEMENT_OPTIONS (= p 24))) (= op (MODULO (ELEMENT_OPTIONS (= tokenIndex 599)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 603) (= p 25)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 23)}? (ELEMENT_OPTIONS (= p 23))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 616))) (DIV (ELEMENT_OPTIONS (= tokenIndex 618))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 623) (= p 24)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 22)}? (ELEMENT_OPTIONS (= p 22))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 636))) (SUB (ELEMENT_OPTIONS (= tokenIndex 638))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 643) (= p 23)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 656))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 658))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 663) (= p 22)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 676))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 678))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 683) (= p 21)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 696))) (DIF (ELEMENT_OPTIONS (= tokenIndex 698))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 703) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 715)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 719) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 731)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 735) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-10-11 23:45:54:469 left-recursion LogManager.java:25 listavaloresmat2 returns [interfaces.Instruction mylisttmatt]
    :   ( {} listavaloresmat<tokenIndex=1676> { $mylisttmatt = datoscompuestos.NewMatrizListaNivel($listavaloresmat.listvlamat)} 
        | listaexpresions<tokenIndex=1682> { $mylisttmatt = datoscompuestos.NewMatrizListaExpresion($listaexpresions.blkparf)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1668> listavaloresmat<tokenIndex=1670> { $mylisttmatt = datoscompuestos.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}
        )*
    ;
2023-10-11 23:45:54:471 grammar LogManager.java:25 added: (RULE listavaloresmat2 (returns interfaces.Instruction mylisttmatt) (BLOCK (ALT (BLOCK (ALT {} (listavaloresmat (ELEMENT_OPTIONS (= tokenIndex 1676))) { $mylisttmatt = datoscompuestos.NewMatrizListaNivel($listavaloresmat.listvlamat)}) (ALT (listaexpresions (ELEMENT_OPTIONS (= tokenIndex 1682))) { $mylisttmatt = datoscompuestos.NewMatrizListaExpresion($listaexpresions.blkparf)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1668))) (listavaloresmat (ELEMENT_OPTIONS (= tokenIndex 1670))) { $mylisttmatt = datoscompuestos.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)}))))))
2023-10-11 23:45:54:490 grammar LogManager.java:25 import INT=1
2023-10-11 23:45:54:490 grammar LogManager.java:25 import FLOAT=2
2023-10-11 23:45:54:491 grammar LogManager.java:25 import STRING=3
2023-10-11 23:45:54:491 grammar LogManager.java:25 import BOOL=4
2023-10-11 23:45:54:491 grammar LogManager.java:25 import CHARACT=5
2023-10-11 23:45:54:492 grammar LogManager.java:25 import TRU=6
2023-10-11 23:45:54:492 grammar LogManager.java:25 import FAL=7
2023-10-11 23:45:54:492 grammar LogManager.java:25 import VAR=8
2023-10-11 23:45:54:492 grammar LogManager.java:25 import LET=9
2023-10-11 23:45:54:492 grammar LogManager.java:25 import NULO=10
2023-10-11 23:45:54:493 grammar LogManager.java:25 import IF=11
2023-10-11 23:45:54:493 grammar LogManager.java:25 import ELSE=12
2023-10-11 23:45:54:493 grammar LogManager.java:25 import SWITCH=13
2023-10-11 23:45:54:493 grammar LogManager.java:25 import CASE=14
2023-10-11 23:45:54:493 grammar LogManager.java:25 import DEFAULT=15
2023-10-11 23:45:54:493 grammar LogManager.java:25 import BREAK=16
2023-10-11 23:45:54:493 grammar LogManager.java:25 import CONTINUE=17
2023-10-11 23:45:54:494 grammar LogManager.java:25 import FOR=18
2023-10-11 23:45:54:494 grammar LogManager.java:25 import IN=19
2023-10-11 23:45:54:494 grammar LogManager.java:25 import RANGO=20
2023-10-11 23:45:54:494 grammar LogManager.java:25 import WHILE=21
2023-10-11 23:45:54:495 grammar LogManager.java:25 import GUARD=22
2023-10-11 23:45:54:495 grammar LogManager.java:25 import RETURN=23
2023-10-11 23:45:54:495 grammar LogManager.java:25 import FUNCION=24
2023-10-11 23:45:54:495 grammar LogManager.java:25 import PRINT=25
2023-10-11 23:45:54:495 grammar LogManager.java:25 import INOUT=26
2023-10-11 23:45:54:495 grammar LogManager.java:25 import APPEND=27
2023-10-11 23:45:54:497 grammar LogManager.java:25 import REMOVE=28
2023-10-11 23:45:54:497 grammar LogManager.java:25 import REMOVELAST=29
2023-10-11 23:45:54:497 grammar LogManager.java:25 import COUNT=30
2023-10-11 23:45:54:498 grammar LogManager.java:25 import ISEMPTY=31
2023-10-11 23:45:54:498 grammar LogManager.java:25 import AT=32
2023-10-11 23:45:54:498 grammar LogManager.java:25 import REPEATING=33
2023-10-11 23:45:54:498 grammar LogManager.java:25 import STRUCT=34
2023-10-11 23:45:54:498 grammar LogManager.java:25 import MUTATING=35
2023-10-11 23:45:54:499 grammar LogManager.java:25 import SELF=36
2023-10-11 23:45:54:499 grammar LogManager.java:25 import NUMBER=37
2023-10-11 23:45:54:499 grammar LogManager.java:25 import CADENA=38
2023-10-11 23:45:54:499 grammar LogManager.java:25 import ID_VALIDO=39
2023-10-11 23:45:54:500 grammar LogManager.java:25 import CHARACTER=40
2023-10-11 23:45:54:500 grammar LogManager.java:25 import WS=41
2023-10-11 23:45:54:500 grammar LogManager.java:25 import IG=42
2023-10-11 23:45:54:500 grammar LogManager.java:25 import DOS_PUNTOS=43
2023-10-11 23:45:54:500 grammar LogManager.java:25 import PUNTOCOMA=44
2023-10-11 23:45:54:501 grammar LogManager.java:25 import CIERRE_INTE=45
2023-10-11 23:45:54:501 grammar LogManager.java:25 import PARIZQ=46
2023-10-11 23:45:54:501 grammar LogManager.java:25 import PARDER=47
2023-10-11 23:45:54:501 grammar LogManager.java:25 import DIF=48
2023-10-11 23:45:54:501 grammar LogManager.java:25 import IG_IG=49
2023-10-11 23:45:54:501 grammar LogManager.java:25 import NOT=50
2023-10-11 23:45:54:502 grammar LogManager.java:25 import OR=51
2023-10-11 23:45:54:502 grammar LogManager.java:25 import AND=52
2023-10-11 23:45:54:502 grammar LogManager.java:25 import MAY_IG=53
2023-10-11 23:45:54:502 grammar LogManager.java:25 import MEN_IG=54
2023-10-11 23:45:54:502 grammar LogManager.java:25 import MAYOR=55
2023-10-11 23:45:54:503 grammar LogManager.java:25 import MENOR=56
2023-10-11 23:45:54:503 grammar LogManager.java:25 import MODULO=57
2023-10-11 23:45:54:503 grammar LogManager.java:25 import MUL=58
2023-10-11 23:45:54:503 grammar LogManager.java:25 import DIV=59
2023-10-11 23:45:54:503 grammar LogManager.java:25 import ADD=60
2023-10-11 23:45:54:503 grammar LogManager.java:25 import SUB=61
2023-10-11 23:45:54:503 grammar LogManager.java:25 import SUMA=62
2023-10-11 23:45:54:503 grammar LogManager.java:25 import RESTA=63
2023-10-11 23:45:54:504 grammar LogManager.java:25 import LLAVEIZQ=64
2023-10-11 23:45:54:504 grammar LogManager.java:25 import LLAVEDER=65
2023-10-11 23:45:54:504 grammar LogManager.java:25 import RETORNO=66
2023-10-11 23:45:54:504 grammar LogManager.java:25 import COMA=67
2023-10-11 23:45:54:504 grammar LogManager.java:25 import PUNTO=68
2023-10-11 23:45:54:505 grammar LogManager.java:25 import GUIONBAJO=69
2023-10-11 23:45:54:505 grammar LogManager.java:25 import CORCHIZQ=70
2023-10-11 23:45:54:505 grammar LogManager.java:25 import CORCHDER=71
2023-10-11 23:45:54:505 grammar LogManager.java:25 import DIRME=72
2023-10-11 23:45:54:505 grammar LogManager.java:25 import WHITESPACE=73
2023-10-11 23:45:54:505 grammar LogManager.java:25 import COMMENT=74
2023-10-11 23:45:54:505 grammar LogManager.java:25 import LINE_COMMENT=75
2023-10-11 23:45:54:505 grammar LogManager.java:25 import 'Int'=1
2023-10-11 23:45:54:507 grammar LogManager.java:25 import 'Float'=2
2023-10-11 23:45:54:507 grammar LogManager.java:25 import 'String'=3
2023-10-11 23:45:54:507 grammar LogManager.java:25 import 'Bool'=4
2023-10-11 23:45:54:507 grammar LogManager.java:25 import 'Character'=5
2023-10-11 23:45:54:507 grammar LogManager.java:25 import 'true'=6
2023-10-11 23:45:54:508 grammar LogManager.java:25 import 'false'=7
2023-10-11 23:45:54:508 grammar LogManager.java:25 import 'var'=8
2023-10-11 23:45:54:508 grammar LogManager.java:25 import 'let'=9
2023-10-11 23:45:54:508 grammar LogManager.java:25 import 'nil'=10
2023-10-11 23:45:54:509 grammar LogManager.java:25 import 'if'=11
2023-10-11 23:45:54:509 grammar LogManager.java:25 import 'else'=12
2023-10-11 23:45:54:509 grammar LogManager.java:25 import 'switch'=13
2023-10-11 23:45:54:509 grammar LogManager.java:25 import 'case'=14
2023-10-11 23:45:54:510 grammar LogManager.java:25 import 'default'=15
2023-10-11 23:45:54:510 grammar LogManager.java:25 import 'break'=16
2023-10-11 23:45:54:510 grammar LogManager.java:25 import 'continue'=17
2023-10-11 23:45:54:510 grammar LogManager.java:25 import 'for'=18
2023-10-11 23:45:54:510 grammar LogManager.java:25 import 'in'=19
2023-10-11 23:45:54:511 grammar LogManager.java:25 import '...'=20
2023-10-11 23:45:54:511 grammar LogManager.java:25 import 'while'=21
2023-10-11 23:45:54:511 grammar LogManager.java:25 import 'guard'=22
2023-10-11 23:45:54:511 grammar LogManager.java:25 import 'return'=23
2023-10-11 23:45:54:511 grammar LogManager.java:25 import 'func'=24
2023-10-11 23:45:54:512 grammar LogManager.java:25 import 'print'=25
2023-10-11 23:45:54:512 grammar LogManager.java:25 import 'inout'=26
2023-10-11 23:45:54:512 grammar LogManager.java:25 import 'append'=27
2023-10-11 23:45:54:512 grammar LogManager.java:25 import 'remove'=28
2023-10-11 23:45:54:512 grammar LogManager.java:25 import 'removeLast'=29
2023-10-11 23:45:54:512 grammar LogManager.java:25 import 'count'=30
2023-10-11 23:45:54:513 grammar LogManager.java:25 import 'isEmpty'=31
2023-10-11 23:45:54:513 grammar LogManager.java:25 import 'at'=32
2023-10-11 23:45:54:513 grammar LogManager.java:25 import 'repeating'=33
2023-10-11 23:45:54:513 grammar LogManager.java:25 import 'struct'=34
2023-10-11 23:45:54:513 grammar LogManager.java:25 import 'mutating'=35
2023-10-11 23:45:54:513 grammar LogManager.java:25 import 'self'=36
2023-10-11 23:45:54:513 grammar LogManager.java:25 import '='=42
2023-10-11 23:45:54:513 grammar LogManager.java:25 import ':'=43
2023-10-11 23:45:54:513 grammar LogManager.java:25 import ';'=44
2023-10-11 23:45:54:514 grammar LogManager.java:25 import '?'=45
2023-10-11 23:45:54:514 grammar LogManager.java:25 import '('=46
2023-10-11 23:45:54:514 grammar LogManager.java:25 import ')'=47
2023-10-11 23:45:54:514 grammar LogManager.java:25 import '!='=48
2023-10-11 23:45:54:514 grammar LogManager.java:25 import '=='=49
2023-10-11 23:45:54:514 grammar LogManager.java:25 import '!'=50
2023-10-11 23:45:54:514 grammar LogManager.java:25 import '||'=51
2023-10-11 23:45:54:514 grammar LogManager.java:25 import '&&'=52
2023-10-11 23:45:54:514 grammar LogManager.java:25 import '>='=53
2023-10-11 23:45:54:514 grammar LogManager.java:25 import '<='=54
2023-10-11 23:45:54:514 grammar LogManager.java:25 import '>'=55
2023-10-11 23:45:54:514 grammar LogManager.java:25 import '<'=56
2023-10-11 23:45:54:514 grammar LogManager.java:25 import '%'=57
2023-10-11 23:45:54:515 grammar LogManager.java:25 import '*'=58
2023-10-11 23:45:54:515 grammar LogManager.java:25 import '/'=59
2023-10-11 23:45:54:515 grammar LogManager.java:25 import '+'=60
2023-10-11 23:45:54:515 grammar LogManager.java:25 import '-'=61
2023-10-11 23:45:54:515 grammar LogManager.java:25 import '+='=62
2023-10-11 23:45:54:515 grammar LogManager.java:25 import '-='=63
2023-10-11 23:45:54:515 grammar LogManager.java:25 import '{'=64
2023-10-11 23:45:54:515 grammar LogManager.java:25 import '}'=65
2023-10-11 23:45:54:515 grammar LogManager.java:25 import '->'=66
2023-10-11 23:45:54:515 grammar LogManager.java:25 import ','=67
2023-10-11 23:45:54:515 grammar LogManager.java:25 import '.'=68
2023-10-11 23:45:54:515 grammar LogManager.java:25 import '_'=69
2023-10-11 23:45:54:515 grammar LogManager.java:25 import '['=70
2023-10-11 23:45:54:515 grammar LogManager.java:25 import ']'=71
2023-10-11 23:45:54:515 grammar LogManager.java:25 import '&'=72
2023-10-11 23:45:54:517 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, STRING=3, BOOL=4, CHARACT=5, TRU=6, FAL=7, VAR=8, LET=9, NULO=10, IF=11, ELSE=12, SWITCH=13, CASE=14, DEFAULT=15, BREAK=16, CONTINUE=17, FOR=18, IN=19, RANGO=20, WHILE=21, GUARD=22, RETURN=23, FUNCION=24, PRINT=25, INOUT=26, APPEND=27, REMOVE=28, REMOVELAST=29, COUNT=30, ISEMPTY=31, AT=32, REPEATING=33, STRUCT=34, MUTATING=35, SELF=36, NUMBER=37, CADENA=38, ID_VALIDO=39, CHARACTER=40, WS=41, IG=42, DOS_PUNTOS=43, PUNTOCOMA=44, CIERRE_INTE=45, PARIZQ=46, PARDER=47, DIF=48, IG_IG=49, NOT=50, OR=51, AND=52, MAY_IG=53, MEN_IG=54, MAYOR=55, MENOR=56, MODULO=57, MUL=58, DIV=59, ADD=60, SUB=61, SUMA=62, RESTA=63, LLAVEIZQ=64, LLAVEDER=65, RETORNO=66, COMA=67, PUNTO=68, GUIONBAJO=69, CORCHIZQ=70, CORCHDER=71, DIRME=72, WHITESPACE=73, COMMENT=74, LINE_COMMENT=75, 'Int'=1, 'Float'=2, 'String'=3, 'Bool'=4, 'Character'=5, 'true'=6, 'false'=7, 'var'=8, 'let'=9, 'nil'=10, 'if'=11, 'else'=12, 'switch'=13, 'case'=14, 'default'=15, 'break'=16, 'continue'=17, 'for'=18, 'in'=19, '...'=20, 'while'=21, 'guard'=22, 'return'=23, 'func'=24, 'print'=25, 'inout'=26, 'append'=27, 'remove'=28, 'removeLast'=29, 'count'=30, 'isEmpty'=31, 'at'=32, 'repeating'=33, 'struct'=34, 'mutating'=35, 'self'=36, '='=42, ':'=43, ';'=44, '?'=45, '('=46, ')'=47, '!='=48, '=='=49, '!'=50, '||'=51, '&&'=52, '>='=53, '<='=54, '>'=55, '<'=56, '%'=57, '*'=58, '/'=59, '+'=60, '-'=61, '+='=62, '-='=63, '{'=64, '}'=65, '->'=66, ','=67, '.'=68, '_'=69, '['=70, ']'=71, '&'=72}
2023-10-11 23:45:54:518 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, STRING=3, BOOL=4, CHARACT=5, TRU=6, FAL=7, VAR=8, LET=9, NULO=10, IF=11, ELSE=12, SWITCH=13, CASE=14, DEFAULT=15, BREAK=16, CONTINUE=17, FOR=18, IN=19, RANGO=20, WHILE=21, GUARD=22, RETURN=23, FUNCION=24, PRINT=25, INOUT=26, APPEND=27, REMOVE=28, REMOVELAST=29, COUNT=30, ISEMPTY=31, AT=32, REPEATING=33, STRUCT=34, MUTATING=35, SELF=36, NUMBER=37, CADENA=38, ID_VALIDO=39, CHARACTER=40, WS=41, IG=42, DOS_PUNTOS=43, PUNTOCOMA=44, CIERRE_INTE=45, PARIZQ=46, PARDER=47, DIF=48, IG_IG=49, NOT=50, OR=51, AND=52, MAY_IG=53, MEN_IG=54, MAYOR=55, MENOR=56, MODULO=57, MUL=58, DIV=59, ADD=60, SUB=61, SUMA=62, RESTA=63, LLAVEIZQ=64, LLAVEDER=65, RETORNO=66, COMA=67, PUNTO=68, GUIONBAJO=69, CORCHIZQ=70, CORCHDER=71, DIRME=72, WHITESPACE=73, COMMENT=74, LINE_COMMENT=75}
2023-10-11 23:45:54:518 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'String'=3, 'Bool'=4, 'Character'=5, 'true'=6, 'false'=7, 'var'=8, 'let'=9, 'nil'=10, 'if'=11, 'else'=12, 'switch'=13, 'case'=14, 'default'=15, 'break'=16, 'continue'=17, 'for'=18, 'in'=19, '...'=20, 'while'=21, 'guard'=22, 'return'=23, 'func'=24, 'print'=25, 'inout'=26, 'append'=27, 'remove'=28, 'removeLast'=29, 'count'=30, 'isEmpty'=31, 'at'=32, 'repeating'=33, 'struct'=34, 'mutating'=35, 'self'=36, '='=42, ':'=43, ';'=44, '?'=45, '('=46, ')'=47, '!='=48, '=='=49, '!'=50, '||'=51, '&&'=52, '>='=53, '<='=54, '>'=55, '<'=56, '%'=57, '*'=58, '/'=59, '+'=60, '-'=61, '+='=62, '-='=63, '{'=64, '}'=65, '->'=66, ','=67, '.'=68, '_'=69, '['=70, ']'=71, '&'=72}
2023-10-11 23:45:54:560 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-10-11 23:45:54:561 LL1 LogManager.java:25 look=[{8..9, 11, 13, 18, 21..22, 24..25, 39}, <EOF>]
2023-10-11 23:45:54:561 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:561 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-10-11 23:45:54:561 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 39}]
2023-10-11 23:45:54:562 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:562 LL1 LogManager.java:25 
DECISION 2 in rule instruction
2023-10-11 23:45:54:562 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 39}]
2023-10-11 23:45:54:562 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:562 LL1 LogManager.java:25 
DECISION 3 in rule instruction
2023-10-11 23:45:54:562 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 39}]
2023-10-11 23:45:54:562 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:562 LL1 LogManager.java:25 
DECISION 4 in rule instruction
2023-10-11 23:45:54:564 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 39}]
2023-10-11 23:45:54:564 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:564 LL1 LogManager.java:25 
DECISION 5 in rule instruction
2023-10-11 23:45:54:564 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 39}]
2023-10-11 23:45:54:564 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:564 LL1 LogManager.java:25 
DECISION 6 in rule instruction
2023-10-11 23:45:54:565 LL1 LogManager.java:25 look=[44, {<EOF>, 8..9, 11, 13, 18, 21..22, 24..25, 39}]
2023-10-11 23:45:54:565 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:565 LL1 LogManager.java:25 
DECISION 7 in rule instruction
2023-10-11 23:45:54:565 LL1 LogManager.java:25 look=[8, 9, 39, 11, 13, 21, 18, 22, 8, 39, 39, 25, 8, 24, 39]
2023-10-11 23:45:54:565 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:565 LL1 LogManager.java:25 
DECISION 8 in rule blockinterno
2023-10-11 23:45:54:565 LL1 LogManager.java:25 look=[{8..9, 11, 13, 16..18, 21..23, 25, 39}, {14..15, 65}]
2023-10-11 23:45:54:565 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:565 LL1 LogManager.java:25 
DECISION 9 in rule instructionint
2023-10-11 23:45:54:565 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-11 23:45:54:565 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:566 LL1 LogManager.java:25 
DECISION 10 in rule instructionint
2023-10-11 23:45:54:566 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-11 23:45:54:566 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:566 LL1 LogManager.java:25 
DECISION 11 in rule instructionint
2023-10-11 23:45:54:566 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-11 23:45:54:566 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:566 LL1 LogManager.java:25 
DECISION 12 in rule instructionint
2023-10-11 23:45:54:567 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-11 23:45:54:567 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:567 LL1 LogManager.java:25 
DECISION 13 in rule instructionint
2023-10-11 23:45:54:567 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-11 23:45:54:567 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:567 LL1 LogManager.java:25 
DECISION 14 in rule instructionint
2023-10-11 23:45:54:568 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-11 23:45:54:568 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:568 LL1 LogManager.java:25 
DECISION 15 in rule instructionint
2023-10-11 23:45:54:569 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-11 23:45:54:569 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:569 LL1 LogManager.java:25 
DECISION 16 in rule instructionint
2023-10-11 23:45:54:569 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-11 23:45:54:569 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:569 LL1 LogManager.java:25 
DECISION 17 in rule instructionint
2023-10-11 23:45:54:570 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-11 23:45:54:570 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:570 LL1 LogManager.java:25 
DECISION 18 in rule instructionint
2023-10-11 23:45:54:570 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-11 23:45:54:570 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:571 LL1 LogManager.java:25 
DECISION 19 in rule instructionint
2023-10-11 23:45:54:571 LL1 LogManager.java:25 look=[44, {8..9, 11, 13..18, 21..23, 25, 39, 65}]
2023-10-11 23:45:54:571 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:571 LL1 LogManager.java:25 
DECISION 20 in rule instructionint
2023-10-11 23:45:54:571 LL1 LogManager.java:25 look=[8, 9, 39, 11, 13, 21, 18, 22, 17, 16, 23, 8, 39, 39, 25, 8, 39]
2023-10-11 23:45:54:571 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:571 LL1 LogManager.java:25 
DECISION 21 in rule declavarible
2023-10-11 23:45:54:571 LL1 LogManager.java:25 look=[8, 8, 8]
2023-10-11 23:45:54:571 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:571 LL1 LogManager.java:25 
DECISION 22 in rule declaconstante
2023-10-11 23:45:54:572 LL1 LogManager.java:25 look=[9, 9]
2023-10-11 23:45:54:572 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:572 LL1 LogManager.java:25 
DECISION 23 in rule asignacionvariable
2023-10-11 23:45:54:572 LL1 LogManager.java:25 look=[39, 39, 39]
2023-10-11 23:45:54:572 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:572 LL1 LogManager.java:25 
DECISION 24 in rule tipodato
2023-10-11 23:45:54:572 LL1 LogManager.java:25 look=[1, 2, 3, 4, 5]
2023-10-11 23:45:54:572 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:572 LL1 LogManager.java:25 
DECISION 25 in rule expr
2023-10-11 23:45:54:572 LL1 LogManager.java:25 look=[50, 46, 61, 37, 38, 6, 7, 40, 39, 10, 39, 39, 39, 1, 2, 3, 39]
2023-10-11 23:45:54:572 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:572 LL1 LogManager.java:25 
DECISION 26 in rule expr
2023-10-11 23:45:54:572 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null, null]
2023-10-11 23:45:54:572 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:572 LL1 LogManager.java:25 
DECISION 27 in rule expr
2023-10-11 23:45:54:572 LL1 LogManager.java:25 look=[null, null]
2023-10-11 23:45:54:572 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:572 LL1 LogManager.java:25 
DECISION 28 in rule sentenciaifelse
2023-10-11 23:45:54:572 LL1 LogManager.java:25 look=[11, 11, 11]
2023-10-11 23:45:54:572 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:574 LL1 LogManager.java:25 
DECISION 29 in rule switchcontrol
2023-10-11 23:45:54:574 LL1 LogManager.java:25 look=[15, 65]
2023-10-11 23:45:54:574 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:574 LL1 LogManager.java:25 
DECISION 30 in rule blockcase
2023-10-11 23:45:54:574 LL1 LogManager.java:25 look=[14, {15, 65}]
2023-10-11 23:45:54:574 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:574 LL1 LogManager.java:25 
DECISION 31 in rule forcontrol
2023-10-11 23:45:54:574 LL1 LogManager.java:25 look=[18, 18, 18]
2023-10-11 23:45:54:574 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:574 LL1 LogManager.java:25 
DECISION 32 in rule retornos
2023-10-11 23:45:54:574 LL1 LogManager.java:25 look=[23, 23]
2023-10-11 23:45:54:574 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:574 LL1 LogManager.java:25 
DECISION 33 in rule vectorcontrol
2023-10-11 23:45:54:574 LL1 LogManager.java:25 look=[8, 8, 8]
2023-10-11 23:45:54:574 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:575 LL1 LogManager.java:25 
DECISION 34 in rule blockparams
2023-10-11 23:45:54:575 LL1 LogManager.java:25 look=[{1..3, 6..7, 10, 37..40, 46, 50, 61, 67}, 71]
2023-10-11 23:45:54:575 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:575 LL1 LogManager.java:25 
DECISION 35 in rule bloqueparams
2023-10-11 23:45:54:575 LL1 LogManager.java:25 look=[67, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-10-11 23:45:54:575 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:575 LL1 LogManager.java:25 
DECISION 36 in rule vectoragregar
2023-10-11 23:45:54:575 LL1 LogManager.java:25 look=[39, 39, 39, 39, 39]
2023-10-11 23:45:54:575 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:575 LL1 LogManager.java:25 
DECISION 37 in rule vectorremover
2023-10-11 23:45:54:575 LL1 LogManager.java:25 look=[39, 39]
2023-10-11 23:45:54:575 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:575 LL1 LogManager.java:25 
DECISION 38 in rule vectoraccess
2023-10-11 23:45:54:575 LL1 LogManager.java:25 look=[39, 39, 39]
2023-10-11 23:45:54:575 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:575 LL1 LogManager.java:25 
DECISION 39 in rule matrizcontrol
2023-10-11 23:45:54:575 LL1 LogManager.java:25 look=[43, 42]
2023-10-11 23:45:54:575 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:575 LL1 LogManager.java:25 
DECISION 40 in rule tipomatriz
2023-10-11 23:45:54:575 LL1 LogManager.java:25 look=[70, 70]
2023-10-11 23:45:54:575 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:575 LL1 LogManager.java:25 
DECISION 41 in rule listavaloresmat
2023-10-11 23:45:54:575 LL1 LogManager.java:25 look=[70, 70]
2023-10-11 23:45:54:575 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:575 LL1 LogManager.java:25 
DECISION 42 in rule listavaloresmat2
2023-10-11 23:45:54:576 LL1 LogManager.java:25 look=[70, {1..3, 6..7, 10, 37..40, 46, 50, 61, 67}]
2023-10-11 23:45:54:576 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:576 LL1 LogManager.java:25 
DECISION 43 in rule listavaloresmat2
2023-10-11 23:45:54:576 LL1 LogManager.java:25 look=[null, 71]
2023-10-11 23:45:54:576 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:576 LL1 LogManager.java:25 
DECISION 44 in rule listaexpresions
2023-10-11 23:45:54:576 LL1 LogManager.java:25 look=[{1..3, 6..7, 10, 37..40, 46, 50, 61, 67}, null]
2023-10-11 23:45:54:576 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:576 LL1 LogManager.java:25 
DECISION 45 in rule listaexpresion
2023-10-11 23:45:54:576 LL1 LogManager.java:25 look=[67, {1..3, 6..7, 10, 37..40, 46, 50, 61}]
2023-10-11 23:45:54:576 LL1 LogManager.java:25 LL(1)? true
2023-10-11 23:45:54:576 LL1 LogManager.java:25 
DECISION 46 in rule simplematriz
2023-10-11 23:45:54:577 LL1 LogManager.java:25 look=[70, 70]
2023-10-11 23:45:54:577 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:577 LL1 LogManager.java:25 
DECISION 47 in rule listamatrizaddsubs
2023-10-11 23:45:54:577 LL1 LogManager.java:25 look=[70, null]
2023-10-11 23:45:54:577 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:577 LL1 LogManager.java:25 
DECISION 48 in rule funciondeclaracioncontrol
2023-10-11 23:45:54:577 LL1 LogManager.java:25 look=[24, 24]
2023-10-11 23:45:54:577 LL1 LogManager.java:25 LL(1)? false
2023-10-11 23:45:54:582 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"
   

2023-10-11 23:45:54:594 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-10-11 23:45:54:594 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,22:9]
2023-10-11 23:45:54:595 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,22:17].[@-1,28:30='blk',<0>,22:23]
2023-10-11 23:45:54:595 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-10-11 23:45:54:595 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,28:5]
2023-10-11 23:45:54:597 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-10-11 23:45:54:597 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,35:13]
2023-10-11 23:45:54:597 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,35:27]
2023-10-11 23:45:54:598 action-translator LogManager.java:25 translate  $inst = $declavarible.decvbl
2023-10-11 23:45:54:598 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:30]
2023-10-11 23:45:54:599 action-translator LogManager.java:25 qattr [@-1,10:21='declavarible',<0>,42:38].[@-1,23:28='decvbl',<0>,42:51]
2023-10-11 23:45:54:599 action-translator LogManager.java:25 translate  $inst = $declaconstante.deccon
2023-10-11 23:45:54:599 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:32]
2023-10-11 23:45:54:599 action-translator LogManager.java:25 qattr [@-1,10:23='declaconstante',<0>,43:40].[@-1,25:30='deccon',<0>,43:55]
2023-10-11 23:45:54:599 action-translator LogManager.java:25 translate  $inst = $asignacionvariable.asgvbl
2023-10-11 23:45:54:599 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:36]
2023-10-11 23:45:54:599 action-translator LogManager.java:25 qattr [@-1,10:27='asignacionvariable',<0>,44:44].[@-1,29:34='asgvbl',<0>,44:63]
2023-10-11 23:45:54:599 action-translator LogManager.java:25 translate  $inst = $sentenciaifelse.myIfElse
2023-10-11 23:45:54:599 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:20]
2023-10-11 23:45:54:599 action-translator LogManager.java:25 qattr [@-1,10:24='sentenciaifelse',<0>,45:28].[@-1,26:33='myIfElse',<0>,45:44]
2023-10-11 23:45:54:599 action-translator LogManager.java:25 translate  $inst = $switchcontrol.mySwitch
2023-10-11 23:45:54:599 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:18]
2023-10-11 23:45:54:599 action-translator LogManager.java:25 qattr [@-1,10:22='switchcontrol',<0>,46:26].[@-1,24:31='mySwitch',<0>,46:40]
2023-10-11 23:45:54:599 action-translator LogManager.java:25 translate  $inst = $whilecontrol.whict
2023-10-11 23:45:54:599 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:17]
2023-10-11 23:45:54:600 action-translator LogManager.java:25 qattr [@-1,10:21='whilecontrol',<0>,47:25].[@-1,23:27='whict',<0>,47:38]
2023-10-11 23:45:54:600 action-translator LogManager.java:25 translate  $inst = $forcontrol.forct
2023-10-11 23:45:54:600 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:15]
2023-10-11 23:45:54:600 action-translator LogManager.java:25 qattr [@-1,10:19='forcontrol',<0>,48:23].[@-1,21:25='forct',<0>,48:34]
2023-10-11 23:45:54:600 action-translator LogManager.java:25 translate  $inst = $guardcontrol.guct
2023-10-11 23:45:54:600 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,49:17]
2023-10-11 23:45:54:600 action-translator LogManager.java:25 qattr [@-1,10:21='guardcontrol',<0>,49:25].[@-1,23:26='guct',<0>,49:38]
2023-10-11 23:45:54:600 action-translator LogManager.java:25 translate  $inst = $vectorcontrol.vect 
2023-10-11 23:45:54:600 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,50:31]
2023-10-11 23:45:54:600 action-translator LogManager.java:25 qattr [@-1,10:22='vectorcontrol',<0>,50:39].[@-1,24:27='vect',<0>,50:53]
2023-10-11 23:45:54:600 action-translator LogManager.java:25 translate  $inst = $vectoragregar.veadct 
2023-10-11 23:45:54:601 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,51:19]
2023-10-11 23:45:54:601 action-translator LogManager.java:25 qattr [@-1,10:22='vectoragregar',<0>,51:27].[@-1,24:29='veadct',<0>,51:41]
2023-10-11 23:45:54:601 action-translator LogManager.java:25 translate  $inst = $vectorremover.vermct 
2023-10-11 23:45:54:601 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,52:19]
2023-10-11 23:45:54:601 action-translator LogManager.java:25 qattr [@-1,10:22='vectorremover',<0>,52:27].[@-1,24:29='vermct',<0>,52:41]
2023-10-11 23:45:54:601 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-10-11 23:45:54:601 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,53:27]
2023-10-11 23:45:54:601 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,53:35].[@-1,20:23='prnt',<0>,53:45]
2023-10-11 23:45:54:601 action-translator LogManager.java:25 translate  $inst = $matrizcontrol.matct
2023-10-11 23:45:54:601 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,54:31]
2023-10-11 23:45:54:601 action-translator LogManager.java:25 qattr [@-1,10:22='matrizcontrol',<0>,54:39].[@-1,24:28='matct',<0>,54:53]
2023-10-11 23:45:54:601 action-translator LogManager.java:25 translate  $inst = $funciondeclaracioncontrol.fdc
2023-10-11 23:45:54:601 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,56:30]
2023-10-11 23:45:54:601 action-translator LogManager.java:25 qattr [@-1,10:34='funciondeclaracioncontrol',<0>,56:38].[@-1,36:38='fdc',<0>,56:64]
2023-10-11 23:45:54:601 action-translator LogManager.java:25 translate  $inst = $funcionllamadacontrol.flctl
2023-10-11 23:45:54:601 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,57:26]
2023-10-11 23:45:54:601 action-translator LogManager.java:25 qattr [@-1,10:30='funcionllamadacontrol',<0>,57:34].[@-1,32:36='flctl',<0>,57:56]
2023-10-11 23:45:54:602 action-translator LogManager.java:25 translate 
    $blkint = []interface{}{}
    var listInt []IInstructionintContext
  
2023-10-11 23:45:54:602 action-translator LogManager.java:25 attr [@-1,7:12='blkint',<0>,66:5]
2023-10-11 23:45:54:602 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockinternoContext).GetInsint()
        for _, e := range listInt {
            $blkint = append($blkint, e.GetInsint())
        }
    
2023-10-11 23:45:54:602 action-translator LogManager.java:25 attr [@-1,115:120='blkint',<0>,73:13]
2023-10-11 23:45:54:602 action-translator LogManager.java:25 attr [@-1,132:137='blkint',<0>,73:30]
2023-10-11 23:45:54:603 action-translator LogManager.java:25 translate  $insint = $declavarible.decvbl
2023-10-11 23:45:54:603 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,81:30]
2023-10-11 23:45:54:603 action-translator LogManager.java:25 qattr [@-1,12:23='declavarible',<0>,81:40].[@-1,25:30='decvbl',<0>,81:53]
2023-10-11 23:45:54:604 action-translator LogManager.java:25 translate  $insint = $declaconstante.deccon
2023-10-11 23:45:54:604 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,82:32]
2023-10-11 23:45:54:605 action-translator LogManager.java:25 qattr [@-1,12:25='declaconstante',<0>,82:42].[@-1,27:32='deccon',<0>,82:57]
2023-10-11 23:45:54:605 action-translator LogManager.java:25 translate  $insint = $asignacionvariable.asgvbl
2023-10-11 23:45:54:605 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,83:36]
2023-10-11 23:45:54:605 action-translator LogManager.java:25 qattr [@-1,12:29='asignacionvariable',<0>,83:46].[@-1,31:36='asgvbl',<0>,83:65]
2023-10-11 23:45:54:605 action-translator LogManager.java:25 translate  $insint = $sentenciaifelse.myIfElse
2023-10-11 23:45:54:605 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,84:20]
2023-10-11 23:45:54:605 action-translator LogManager.java:25 qattr [@-1,12:26='sentenciaifelse',<0>,84:30].[@-1,28:35='myIfElse',<0>,84:46]
2023-10-11 23:45:54:605 action-translator LogManager.java:25 translate  $insint = $switchcontrol.mySwitch
2023-10-11 23:45:54:605 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,85:18]
2023-10-11 23:45:54:605 action-translator LogManager.java:25 qattr [@-1,12:24='switchcontrol',<0>,85:28].[@-1,26:33='mySwitch',<0>,85:42]
2023-10-11 23:45:54:605 action-translator LogManager.java:25 translate  $insint = $whilecontrol.whict
2023-10-11 23:45:54:605 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,86:17]
2023-10-11 23:45:54:606 action-translator LogManager.java:25 qattr [@-1,12:23='whilecontrol',<0>,86:27].[@-1,25:29='whict',<0>,86:40]
2023-10-11 23:45:54:606 action-translator LogManager.java:25 translate  $insint = $forcontrol.forct
2023-10-11 23:45:54:606 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,87:15]
2023-10-11 23:45:54:606 action-translator LogManager.java:25 qattr [@-1,12:21='forcontrol',<0>,87:25].[@-1,23:27='forct',<0>,87:36]
2023-10-11 23:45:54:606 action-translator LogManager.java:25 translate  $insint = $guardcontrol.guct
2023-10-11 23:45:54:606 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,88:17]
2023-10-11 23:45:54:606 action-translator LogManager.java:25 qattr [@-1,12:23='guardcontrol',<0>,88:27].[@-1,25:28='guct',<0>,88:40]
2023-10-11 23:45:54:607 action-translator LogManager.java:25 translate  $insint = $continuee.coct
2023-10-11 23:45:54:607 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,89:27]
2023-10-11 23:45:54:607 action-translator LogManager.java:25 qattr [@-1,12:20='continuee',<0>,89:37].[@-1,22:25='coct',<0>,89:47]
2023-10-11 23:45:54:607 action-translator LogManager.java:25 translate  $insint = $breakk.brkct
2023-10-11 23:45:54:607 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,90:24]
2023-10-11 23:45:54:607 action-translator LogManager.java:25 qattr [@-1,12:17='breakk',<0>,90:34].[@-1,19:23='brkct',<0>,90:41]
2023-10-11 23:45:54:607 action-translator LogManager.java:25 translate  $insint = $retornos.rect 
2023-10-11 23:45:54:607 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,91:26]
2023-10-11 23:45:54:607 action-translator LogManager.java:25 qattr [@-1,12:19='retornos',<0>,91:36].[@-1,21:24='rect',<0>,91:45]
2023-10-11 23:45:54:608 action-translator LogManager.java:25 translate  $insint = $vectorcontrol.vect 
2023-10-11 23:45:54:608 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,92:31]
2023-10-11 23:45:54:609 action-translator LogManager.java:25 qattr [@-1,12:24='vectorcontrol',<0>,92:41].[@-1,26:29='vect',<0>,92:55]
2023-10-11 23:45:54:609 action-translator LogManager.java:25 translate  $insint = $vectoragregar.veadct 
2023-10-11 23:45:54:609 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,93:32]
2023-10-11 23:45:54:609 action-translator LogManager.java:25 qattr [@-1,12:24='vectoragregar',<0>,93:42].[@-1,26:31='veadct',<0>,93:56]
2023-10-11 23:45:54:609 action-translator LogManager.java:25 translate  $insint = $vectorremover.vermct 
2023-10-11 23:45:54:609 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,94:31]
2023-10-11 23:45:54:610 action-translator LogManager.java:25 qattr [@-1,12:24='vectorremover',<0>,94:41].[@-1,26:31='vermct',<0>,94:55]
2023-10-11 23:45:54:610 action-translator LogManager.java:25 translate  $insint = $printstmt.prnt
2023-10-11 23:45:54:610 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,95:27]
2023-10-11 23:45:54:610 action-translator LogManager.java:25 qattr [@-1,12:20='printstmt',<0>,95:37].[@-1,22:25='prnt',<0>,95:47]
2023-10-11 23:45:54:610 action-translator LogManager.java:25 translate  $insint = $matrizcontrol.matct
2023-10-11 23:45:54:610 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,96:31]
2023-10-11 23:45:54:610 action-translator LogManager.java:25 qattr [@-1,12:24='matrizcontrol',<0>,96:41].[@-1,26:30='matct',<0>,96:55]
2023-10-11 23:45:54:610 action-translator LogManager.java:25 translate  $insint = $funcionllamadacontrol.flctl
2023-10-11 23:45:54:610 action-translator LogManager.java:25 attr [@-1,2:7='insint',<0>,97:26]
2023-10-11 23:45:54:610 action-translator LogManager.java:25 qattr [@-1,12:32='funcionllamadacontrol',<0>,97:36].[@-1,34:38='flctl',<0>,97:58]
2023-10-11 23:45:54:611 action-translator LogManager.java:25 translate  $decvbl = datosprimitivos.NewVariableDeclaration($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)
2023-10-11 23:45:54:611 action-translator LogManager.java:25 attr [@-1,2:7='decvbl',<0>,111:46]
2023-10-11 23:45:54:611 action-translator LogManager.java:25 qattr [@-1,51:53='VAR',<0>,111:95].[@-1,55:58='line',<0>,111:99]
2023-10-11 23:45:54:612 action-translator LogManager.java:25 qattr [@-1,62:64='VAR',<0>,111:106].[@-1,66:68='pos',<0>,111:110]
2023-10-11 23:45:54:612 action-translator LogManager.java:25 qattr [@-1,72:80='ID_VALIDO',<0>,111:116].[@-1,82:85='text',<0>,111:126]
2023-10-11 23:45:54:612 action-translator LogManager.java:25 qattr [@-1,89:96='tipodato',<0>,111:133].[@-1,98:101='tipo',<0>,111:142]
2023-10-11 23:45:54:612 action-translator LogManager.java:25 qattr [@-1,105:108='expr',<0>,111:149].[@-1,110:110='e',<0>,111:154]
2023-10-11 23:45:54:612 action-translator LogManager.java:25 translate $decvbl = datosprimitivos.NewVariableDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text, $expr.e)
2023-10-11 23:45:54:612 action-translator LogManager.java:25 attr [@-1,1:6='decvbl',<0>,112:25]
2023-10-11 23:45:54:612 action-translator LogManager.java:25 qattr [@-1,57:59='VAR',<0>,112:81].[@-1,61:64='line',<0>,112:85]
2023-10-11 23:45:54:612 action-translator LogManager.java:25 qattr [@-1,68:70='VAR',<0>,112:92].[@-1,72:74='pos',<0>,112:96]
2023-10-11 23:45:54:613 action-translator LogManager.java:25 qattr [@-1,78:86='ID_VALIDO',<0>,112:102].[@-1,88:91='text',<0>,112:112]
2023-10-11 23:45:54:613 action-translator LogManager.java:25 qattr [@-1,95:98='expr',<0>,112:119].[@-1,100:100='e',<0>,112:124]
2023-10-11 23:45:54:613 action-translator LogManager.java:25 translate $decvbl = datosprimitivos.NewVariableDeclaracionSinExp($VAR.line, $VAR.pos, $ID_VALIDO.text, $tipodato.tipo)
2023-10-11 23:45:54:613 action-translator LogManager.java:25 attr [@-1,1:6='decvbl',<0>,113:49]
2023-10-11 23:45:54:613 action-translator LogManager.java:25 qattr [@-1,56:58='VAR',<0>,113:104].[@-1,60:63='line',<0>,113:108]
2023-10-11 23:45:54:613 action-translator LogManager.java:25 qattr [@-1,67:69='VAR',<0>,113:115].[@-1,71:73='pos',<0>,113:119]
2023-10-11 23:45:54:613 action-translator LogManager.java:25 qattr [@-1,77:85='ID_VALIDO',<0>,113:125].[@-1,87:90='text',<0>,113:135]
2023-10-11 23:45:54:613 action-translator LogManager.java:25 qattr [@-1,94:101='tipodato',<0>,113:142].[@-1,103:106='tipo',<0>,113:151]
2023-10-11 23:45:54:613 action-translator LogManager.java:25 translate $deccon = datosprimitivos.NewConstanteDeclaration($LET.line, $LET.pos, $ID_VALIDO.text, $tipodato.tipo, $expr.e)
2023-10-11 23:45:54:613 action-translator LogManager.java:25 attr [@-1,1:6='deccon',<0>,118:45]
2023-10-11 23:45:54:613 action-translator LogManager.java:25 qattr [@-1,51:53='LET',<0>,118:95].[@-1,55:58='line',<0>,118:99]
2023-10-11 23:45:54:613 action-translator LogManager.java:25 qattr [@-1,62:64='LET',<0>,118:106].[@-1,66:68='pos',<0>,118:110]
2023-10-11 23:45:54:613 action-translator LogManager.java:25 qattr [@-1,72:80='ID_VALIDO',<0>,118:116].[@-1,82:85='text',<0>,118:126]
2023-10-11 23:45:54:613 action-translator LogManager.java:25 qattr [@-1,89:96='tipodato',<0>,118:133].[@-1,98:101='tipo',<0>,118:142]
2023-10-11 23:45:54:613 action-translator LogManager.java:25 qattr [@-1,105:108='expr',<0>,118:149].[@-1,110:110='e',<0>,118:154]
2023-10-11 23:45:54:613 action-translator LogManager.java:25 translate $deccon = datosprimitivos.NewConstanteDeclaracionSinTipo($LET.line, $LET.pos, $ID_VALIDO.text, $expr.e)
2023-10-11 23:45:54:613 action-translator LogManager.java:25 attr [@-1,1:6='deccon',<0>,119:25]
2023-10-11 23:45:54:613 action-translator LogManager.java:25 qattr [@-1,58:60='LET',<0>,119:82].[@-1,62:65='line',<0>,119:86]
2023-10-11 23:45:54:613 action-translator LogManager.java:25 qattr [@-1,69:71='LET',<0>,119:93].[@-1,73:75='pos',<0>,119:97]
2023-10-11 23:45:54:613 action-translator LogManager.java:25 qattr [@-1,79:87='ID_VALIDO',<0>,119:103].[@-1,89:92='text',<0>,119:113]
2023-10-11 23:45:54:614 action-translator LogManager.java:25 qattr [@-1,96:99='expr',<0>,119:120].[@-1,101:101='e',<0>,119:125]
2023-10-11 23:45:54:614 action-translator LogManager.java:25 translate  $asgvbl = sentencias.NewAsignacionVariable($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-10-11 23:45:54:614 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,124:22]
2023-10-11 23:45:54:614 action-translator LogManager.java:25 qattr [@-1,45:53='ID_VALIDO',<0>,124:65].[@-1,55:58='line',<0>,124:75]
2023-10-11 23:45:54:614 action-translator LogManager.java:25 qattr [@-1,62:70='ID_VALIDO',<0>,124:82].[@-1,72:74='pos',<0>,124:92]
2023-10-11 23:45:54:614 action-translator LogManager.java:25 qattr [@-1,78:86='ID_VALIDO',<0>,124:98].[@-1,88:91='text',<0>,124:108]
2023-10-11 23:45:54:614 action-translator LogManager.java:25 qattr [@-1,95:98='expr',<0>,124:115].[@-1,100:100='e',<0>,124:120]
2023-10-11 23:45:54:614 action-translator LogManager.java:25 translate  $asgvbl = sentencias.NewAsignacionSuma($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-10-11 23:45:54:614 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,125:24]
2023-10-11 23:45:54:614 action-translator LogManager.java:25 qattr [@-1,41:49='ID_VALIDO',<0>,125:63].[@-1,51:54='line',<0>,125:73]
2023-10-11 23:45:54:614 action-translator LogManager.java:25 qattr [@-1,58:66='ID_VALIDO',<0>,125:80].[@-1,68:70='pos',<0>,125:90]
2023-10-11 23:45:54:614 action-translator LogManager.java:25 qattr [@-1,74:82='ID_VALIDO',<0>,125:96].[@-1,84:87='text',<0>,125:106]
2023-10-11 23:45:54:614 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,125:113].[@-1,96:96='e',<0>,125:118]
2023-10-11 23:45:54:615 action-translator LogManager.java:25 translate  $asgvbl = sentencias.NewAsignacionResta($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $expr.e)
2023-10-11 23:45:54:615 action-translator LogManager.java:25 attr [@-1,2:7='asgvbl',<0>,126:25]
2023-10-11 23:45:54:615 action-translator LogManager.java:25 qattr [@-1,42:50='ID_VALIDO',<0>,126:65].[@-1,52:55='line',<0>,126:75]
2023-10-11 23:45:54:615 action-translator LogManager.java:25 qattr [@-1,59:67='ID_VALIDO',<0>,126:82].[@-1,69:71='pos',<0>,126:92]
2023-10-11 23:45:54:615 action-translator LogManager.java:25 qattr [@-1,75:83='ID_VALIDO',<0>,126:98].[@-1,85:88='text',<0>,126:108]
2023-10-11 23:45:54:615 action-translator LogManager.java:25 qattr [@-1,92:95='expr',<0>,126:115].[@-1,97:97='e',<0>,126:120]
2023-10-11 23:45:54:615 action-translator LogManager.java:25 translate  $tipo = environment.INTEGER 
2023-10-11 23:45:54:615 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,131:8]
2023-10-11 23:45:54:615 action-translator LogManager.java:25 translate  $tipo = environment.FLOAT 
2023-10-11 23:45:54:615 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,132:10]
2023-10-11 23:45:54:615 action-translator LogManager.java:25 translate  $tipo = environment.STRING 
2023-10-11 23:45:54:615 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,133:11]
2023-10-11 23:45:54:615 action-translator LogManager.java:25 translate  $tipo = environment.BOOLEAN 
2023-10-11 23:45:54:615 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,134:9]
2023-10-11 23:45:54:615 action-translator LogManager.java:25 translate  $tipo = environment.CHARACTER 
2023-10-11 23:45:54:615 action-translator LogManager.java:25 attr [@-1,2:5='tipo',<0>,135:12]
2023-10-11 23:45:54:618 action-translator LogManager.java:25 translate 
2023-10-11 23:45:54:618 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($right.start.GetLine(), $right.start.GetColumn(), $right.e, $op.text, $right.e) 
2023-10-11 23:45:54:618 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:70]
2023-10-11 23:45:54:618 action-translator LogManager.java:25 qattr [@-1,32:36='right',<0>,2:100].[@-1,38:42='start',<0>,2:106]
2023-10-11 23:45:54:618 action-translator LogManager.java:25 qattr [@-1,56:60='right',<0>,2:124].[@-1,62:66='start',<0>,2:130]
2023-10-11 23:45:54:619 action-translator LogManager.java:25 qattr [@-1,82:86='right',<0>,2:150].[@-1,88:88='e',<0>,2:156]
2023-10-11 23:45:54:619 action-translator LogManager.java:25 qattr [@-1,92:93='op',<0>,2:160].[@-1,95:98='text',<0>,2:163]
2023-10-11 23:45:54:619 action-translator LogManager.java:25 qattr [@-1,102:106='right',<0>,2:170].[@-1,108:108='e',<0>,2:176]
2023-10-11 23:45:54:619 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-10-11 23:45:54:619 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:79]
2023-10-11 23:45:54:619 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,3:84].[@-1,12:12='e',<0>,3:89]
2023-10-11 23:45:54:619 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,-num,environment.INTEGER)
        }
    
2023-10-11 23:45:54:619 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,6:30].[@-1,39:42='text',<0>,6:37]
2023-10-11 23:45:54:619 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,7:43].[@-1,102:105='text',<0>,7:50]
2023-10-11 23:45:54:619 action-translator LogManager.java:25 attr [@-1,377:377='e',<0>,16:13]
2023-10-11 23:45:54:619 action-translator LogManager.java:25 qattr [@-1,407:412='NUMBER',<0>,16:43].[@-1,414:417='line',<0>,16:50]
2023-10-11 23:45:54:619 action-translator LogManager.java:25 qattr [@-1,420:425='NUMBER',<0>,16:56].[@-1,427:429='pos',<0>,16:63]
2023-10-11 23:45:54:619 action-translator LogManager.java:25 qattr [@-1,510:515='NUMBER',<0>,18:37].[@-1,517:520='text',<0>,18:44]
2023-10-11 23:45:54:619 action-translator LogManager.java:25 attr [@-1,613:613='e',<0>,22:13]
2023-10-11 23:45:54:619 action-translator LogManager.java:25 qattr [@-1,643:648='NUMBER',<0>,22:43].[@-1,650:653='line',<0>,22:50]
2023-10-11 23:45:54:619 action-translator LogManager.java:25 qattr [@-1,656:661='NUMBER',<0>,22:56].[@-1,663:665='pos',<0>,22:63]
2023-10-11 23:45:54:619 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        num2 := fmt.Sprintf("%.6f", num)
            num3,err := strconv.ParseFloat(num2, 64);
            if err!= nil{
                fmt.Println(err)
            }
	        $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num3,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }            
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-10-11 23:45:54:620 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,27:30].[@-1,39:42='text',<0>,27:37]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,28:43].[@-1,102:105='text',<0>,28:50]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 attr [@-1,374:374='e',<0>,37:10]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 qattr [@-1,404:409='NUMBER',<0>,37:40].[@-1,411:414='line',<0>,37:47]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 qattr [@-1,417:422='NUMBER',<0>,37:53].[@-1,424:426='pos',<0>,37:60]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 qattr [@-1,506:511='NUMBER',<0>,39:37].[@-1,513:516='text',<0>,39:44]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 attr [@-1,621:621='e',<0>,43:13]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 qattr [@-1,651:656='NUMBER',<0>,43:43].[@-1,658:661='line',<0>,43:50]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 qattr [@-1,664:669='NUMBER',<0>,43:56].[@-1,671:673='pos',<0>,43:63]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 translate 
        str := $CADENA.text
        $e = expressions.NewPrimitive($CADENA.line, $CADENA.pos, str[1:len(str)-1],environment.STRING)
    
2023-10-11 23:45:54:620 action-translator LogManager.java:25 qattr [@-1,18:23='CADENA',<0>,48:16].[@-1,25:28='text',<0>,48:23]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,49:9]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 qattr [@-1,70:75='CADENA',<0>,49:39].[@-1,77:80='line',<0>,49:46]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 qattr [@-1,84:89='CADENA',<0>,49:53].[@-1,91:93='pos',<0>,49:60]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-10-11 23:45:54:620 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,51:32]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,51:62].[@-1,36:39='line',<0>,51:66]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,51:73].[@-1,47:49='pos',<0>,51:77]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-10-11 23:45:54:620 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,52:32]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,52:62].[@-1,36:39='line',<0>,52:66]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,52:73].[@-1,47:49='pos',<0>,52:77]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 translate  
        str := $CHARACTER.text
        $e = expressions.NewPrimitive($CHARACTER.line, $CHARACTER.pos, str[1:len(str)-1], environment.CHARACTER) 
    
2023-10-11 23:45:54:620 action-translator LogManager.java:25 qattr [@-1,19:27='CHARACTER',<0>,55:16].[@-1,29:32='text',<0>,55:26]
2023-10-11 23:45:54:620 action-translator LogManager.java:25 attr [@-1,44:44='e',<0>,56:9]
2023-10-11 23:45:54:621 action-translator LogManager.java:25 qattr [@-1,74:82='CHARACTER',<0>,56:39].[@-1,84:87='line',<0>,56:49]
2023-10-11 23:45:54:621 action-translator LogManager.java:25 qattr [@-1,91:99='CHARACTER',<0>,56:56].[@-1,101:103='pos',<0>,56:66]
2023-10-11 23:45:54:621 action-translator LogManager.java:25 translate 
        id := $ID_VALIDO.text
        $e = sentencias.NewCallid($ID_VALIDO.line,$ID_VALIDO.pos,id)
    
2023-10-11 23:45:54:621 action-translator LogManager.java:25 qattr [@-1,17:25='ID_VALIDO',<0>,60:15].[@-1,27:30='text',<0>,60:25]
2023-10-11 23:45:54:621 action-translator LogManager.java:25 attr [@-1,42:42='e',<0>,61:9]
2023-10-11 23:45:54:621 action-translator LogManager.java:25 qattr [@-1,68:76='ID_VALIDO',<0>,61:35].[@-1,78:81='line',<0>,61:45]
2023-10-11 23:45:54:621 action-translator LogManager.java:25 qattr [@-1,84:92='ID_VALIDO',<0>,61:51].[@-1,94:96='pos',<0>,61:61]
2023-10-11 23:45:54:621 action-translator LogManager.java:25 translate $e = expressions.NewPrimitive($NULO.line, $NULO.pos, $NULO.text,environment.NULL)
2023-10-11 23:45:54:621 action-translator LogManager.java:25 attr [@-1,1:1='e',<0>,63:32]
2023-10-11 23:45:54:621 action-translator LogManager.java:25 qattr [@-1,31:34='NULO',<0>,63:62].[@-1,36:39='line',<0>,63:67]
2023-10-11 23:45:54:621 action-translator LogManager.java:25 qattr [@-1,43:46='NULO',<0>,63:74].[@-1,48:50='pos',<0>,63:79]
2023-10-11 23:45:54:621 action-translator LogManager.java:25 qattr [@-1,54:57='NULO',<0>,63:85].[@-1,59:62='text',<0>,63:90]
2023-10-11 23:45:54:621 action-translator LogManager.java:25 translate  $e = $vectorvacio.veemct
2023-10-11 23:45:54:621 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,64:40]
2023-10-11 23:45:54:621 action-translator LogManager.java:25 qattr [@-1,7:17='vectorvacio',<0>,64:45].[@-1,19:24='veemct',<0>,64:57]
2023-10-11 23:45:54:621 action-translator LogManager.java:25 translate  $e = $vectorcount.vecnct
2023-10-11 23:45:54:621 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,65:40]
2023-10-11 23:45:54:621 action-translator LogManager.java:25 qattr [@-1,7:17='vectorcount',<0>,65:45].[@-1,19:24='vecnct',<0>,65:57]
2023-10-11 23:45:54:622 action-translator LogManager.java:25 translate  $e = $vectoraccess.vepposct
2023-10-11 23:45:54:622 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,66:41]
2023-10-11 23:45:54:622 action-translator LogManager.java:25 qattr [@-1,7:18='vectoraccess',<0>,66:46].[@-1,20:27='vepposct',<0>,66:59]
2023-10-11 23:45:54:622 action-translator LogManager.java:25 translate  $e = $intembebida.intemb
2023-10-11 23:45:54:622 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,67:40]
2023-10-11 23:45:54:622 action-translator LogManager.java:25 qattr [@-1,7:17='intembebida',<0>,67:45].[@-1,19:24='intemb',<0>,67:57]
2023-10-11 23:45:54:622 action-translator LogManager.java:25 translate  $e = $floatembebida.floemb
2023-10-11 23:45:54:622 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,68:42]
2023-10-11 23:45:54:622 action-translator LogManager.java:25 qattr [@-1,7:19='floatembebida',<0>,68:47].[@-1,21:26='floemb',<0>,68:61]
2023-10-11 23:45:54:622 action-translator LogManager.java:25 translate  $e = $stringembebida.stremb
2023-10-11 23:45:54:622 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,69:43]
2023-10-11 23:45:54:622 action-translator LogManager.java:25 qattr [@-1,7:20='stringembebida',<0>,69:48].[@-1,22:27='stremb',<0>,69:63]
2023-10-11 23:45:54:622 action-translator LogManager.java:25 translate  $e = $funcionllamadacontrolConRetorno.flctlret
2023-10-11 23:45:54:622 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,70:60]
2023-10-11 23:45:54:622 action-translator LogManager.java:25 qattr [@-1,7:37='funcionllamadacontrolConRetorno',<0>,70:65].[@-1,39:46='flctlret',<0>,70:97]
2023-10-11 23:45:54:622 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2023-10-11 23:45:54:623 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-11 23:45:54:623 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,73:120]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,73:150].[@-1,37:41='start',<0>,73:155]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,73:173].[@-1,60:64='start',<0>,73:178]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,73:198].[@-1,85:85='e',<0>,73:203]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,73:207].[@-1,92:95='text',<0>,73:210]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,73:217].[@-1,105:105='e',<0>,73:223]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-10-11 23:45:54:623 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-11 23:45:54:623 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,74:149]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,74:179].[@-1,37:41='start',<0>,74:184]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,74:202].[@-1,60:64='start',<0>,74:207]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,74:227].[@-1,85:85='e',<0>,74:232]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,74:236].[@-1,92:95='text',<0>,74:239]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,74:246].[@-1,105:105='e',<0>,74:252]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-10-11 23:45:54:623 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-11 23:45:54:623 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,75:149]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,75:179].[@-1,37:41='start',<0>,75:184]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,75:202].[@-1,60:64='start',<0>,75:207]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,75:227].[@-1,85:85='e',<0>,75:232]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,75:236].[@-1,92:95='text',<0>,75:239]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,75:246].[@-1,105:105='e',<0>,75:252]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-10-11 23:45:54:623 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-11 23:45:54:623 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,76:154]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,76:184].[@-1,37:41='start',<0>,76:189]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,76:207].[@-1,60:64='start',<0>,76:212]
2023-10-11 23:45:54:623 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,76:232].[@-1,85:85='e',<0>,76:237]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,76:241].[@-1,92:95='text',<0>,76:244]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,76:251].[@-1,105:105='e',<0>,76:257]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-10-11 23:45:54:624 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-11 23:45:54:624 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,77:154]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,77:184].[@-1,37:41='start',<0>,77:189]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,77:207].[@-1,60:64='start',<0>,77:212]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,77:232].[@-1,85:85='e',<0>,77:237]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,77:241].[@-1,92:95='text',<0>,77:244]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,77:251].[@-1,105:105='e',<0>,77:257]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-10-11 23:45:54:624 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-11 23:45:54:624 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,78:151]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,78:181].[@-1,37:41='start',<0>,78:186]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,78:204].[@-1,60:64='start',<0>,78:209]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,78:229].[@-1,85:85='e',<0>,78:234]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,78:238].[@-1,92:95='text',<0>,78:241]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,78:248].[@-1,105:105='e',<0>,78:254]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-10-11 23:45:54:624 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-11 23:45:54:624 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,79:127]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,79:157].[@-1,37:41='start',<0>,79:162]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,79:180].[@-1,60:64='start',<0>,79:185]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,79:205].[@-1,85:85='e',<0>,79:210]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,79:214].[@-1,92:95='text',<0>,79:217]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,79:224].[@-1,105:105='e',<0>,79:230]
2023-10-11 23:45:54:624 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-10-11 23:45:54:625 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-10-11 23:45:54:625 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,80:126]
2023-10-11 23:45:54:625 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,80:156].[@-1,37:41='start',<0>,80:161]
2023-10-11 23:45:54:625 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,80:179].[@-1,60:64='start',<0>,80:184]
2023-10-11 23:45:54:625 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,80:204].[@-1,85:85='e',<0>,80:209]
2023-10-11 23:45:54:625 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,80:213].[@-1,92:95='text',<0>,80:216]
2023-10-11 23:45:54:625 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,80:223].[@-1,105:105='e',<0>,80:229]
2023-10-11 23:45:54:625 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 24)
2023-10-11 23:45:54:625 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 23)
2023-10-11 23:45:54:625 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-10-11 23:45:54:625 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-10-11 23:45:54:625 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-10-11 23:45:54:625 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-10-11 23:45:54:625 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-10-11 23:45:54:625 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-10-11 23:45:54:627 action-translator LogManager.java:25 translate  $myIfElse = sentencias.NewSentenciaIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint)
2023-10-11 23:45:54:627 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,222:43]
2023-10-11 23:45:54:627 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,222:81].[@-1,43:46='line',<0>,222:84]
2023-10-11 23:45:54:627 action-translator LogManager.java:25 qattr [@-1,50:51='IF',<0>,222:91].[@-1,53:55='pos',<0>,222:94]
2023-10-11 23:45:54:627 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,222:100].[@-1,64:64='e',<0>,222:105]
2023-10-11 23:45:54:627 action-translator LogManager.java:25 qattr [@-1,68:79='blockinterno',<0>,222:109].[@-1,81:86='blkint',<0>,222:122]
2023-10-11 23:45:54:627 action-translator LogManager.java:25 translate  $myIfElse = sentencias.NewSentenciaIfElse($IF.line, $IF.pos, $expr.e, $ifop.blkint , $elseop.blkint)
2023-10-11 23:45:54:627 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,223:91]
2023-10-11 23:45:54:627 action-translator LogManager.java:25 qattr [@-1,44:45='IF',<0>,223:133].[@-1,47:50='line',<0>,223:136]
2023-10-11 23:45:54:627 action-translator LogManager.java:25 qattr [@-1,54:55='IF',<0>,223:143].[@-1,57:59='pos',<0>,223:146]
2023-10-11 23:45:54:628 action-translator LogManager.java:25 qattr [@-1,63:66='expr',<0>,223:152].[@-1,68:68='e',<0>,223:157]
2023-10-11 23:45:54:628 action-translator LogManager.java:25 qattr [@-1,72:75='ifop',<0>,223:161].[@-1,77:82='blkint',<0>,223:166]
2023-10-11 23:45:54:628 action-translator LogManager.java:25 qattr [@-1,87:92='elseop',<0>,223:176].[@-1,94:99='blkint',<0>,223:183]
2023-10-11 23:45:54:628 action-translator LogManager.java:25 translate  $myIfElse = sentencias.NewSentenciaIfElseIf($IF.line, $IF.pos, $expr.e, $blockinterno.blkint, $sentenciaifelse.myIfElse)
2023-10-11 23:45:54:629 action-translator LogManager.java:25 attr [@-1,2:9='myIfElse',<0>,224:64]
2023-10-11 23:45:54:629 action-translator LogManager.java:25 qattr [@-1,46:47='IF',<0>,224:108].[@-1,49:52='line',<0>,224:111]
2023-10-11 23:45:54:629 action-translator LogManager.java:25 qattr [@-1,56:57='IF',<0>,224:118].[@-1,59:61='pos',<0>,224:121]
2023-10-11 23:45:54:629 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,224:127].[@-1,70:70='e',<0>,224:132]
2023-10-11 23:45:54:629 action-translator LogManager.java:25 qattr [@-1,74:85='blockinterno',<0>,224:136].[@-1,87:92='blkint',<0>,224:149]
2023-10-11 23:45:54:629 action-translator LogManager.java:25 qattr [@-1,96:110='sentenciaifelse',<0>,224:158].[@-1,112:119='myIfElse',<0>,224:174]
2023-10-11 23:45:54:630 action-translator LogManager.java:25 translate 
    if ($DEFAULT != nil) {
        $mySwitch = sentencias.NewSentenciaSwitchDefault($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase, $blockinterno.blkint)
    } else {
        $mySwitch = sentencias.NewSentenciaSwitch($SWITCH.line, $SWITCH.pos, $expr.e, $blockcase.blkcase)
    }

2023-10-11 23:45:54:630 action-translator LogManager.java:25 attr [@-1,11:17='DEFAULT',<0>,231:9]
2023-10-11 23:45:54:630 action-translator LogManager.java:25 attr [@-1,39:46='mySwitch',<0>,232:9]
2023-10-11 23:45:54:630 action-translator LogManager.java:25 qattr [@-1,88:93='SWITCH',<0>,232:58].[@-1,95:98='line',<0>,232:65]
2023-10-11 23:45:54:630 action-translator LogManager.java:25 qattr [@-1,102:107='SWITCH',<0>,232:72].[@-1,109:111='pos',<0>,232:79]
2023-10-11 23:45:54:630 action-translator LogManager.java:25 qattr [@-1,115:118='expr',<0>,232:85].[@-1,120:120='e',<0>,232:90]
2023-10-11 23:45:54:630 action-translator LogManager.java:25 qattr [@-1,124:132='blockcase',<0>,232:94].[@-1,134:140='blkcase',<0>,232:104]
2023-10-11 23:45:54:630 action-translator LogManager.java:25 qattr [@-1,144:155='blockinterno',<0>,232:114].[@-1,157:162='blkint',<0>,232:127]
2023-10-11 23:45:54:630 action-translator LogManager.java:25 attr [@-1,189:196='mySwitch',<0>,234:9]
2023-10-11 23:45:54:630 action-translator LogManager.java:25 qattr [@-1,231:236='SWITCH',<0>,234:51].[@-1,238:241='line',<0>,234:58]
2023-10-11 23:45:54:630 action-translator LogManager.java:25 qattr [@-1,245:250='SWITCH',<0>,234:65].[@-1,252:254='pos',<0>,234:72]
2023-10-11 23:45:54:630 action-translator LogManager.java:25 qattr [@-1,258:261='expr',<0>,234:78].[@-1,263:263='e',<0>,234:83]
2023-10-11 23:45:54:630 action-translator LogManager.java:25 qattr [@-1,267:275='blockcase',<0>,234:87].[@-1,277:283='blkcase',<0>,234:97]
2023-10-11 23:45:54:631 action-translator LogManager.java:25 translate 
    $blkcase = []interface{}{}
    var listInt []IBloquecaseContext

2023-10-11 23:45:54:631 action-translator LogManager.java:25 attr [@-1,7:13='blkcase',<0>,241:5]
2023-10-11 23:45:54:631 action-translator LogManager.java:25 translate 
    listInt = localctx.(*BlockcaseContext).GetBlocas()
    for _, e := range listInt {
        $blkcase = append($blkcase, e.GetBlocas())
    }

2023-10-11 23:45:54:631 action-translator LogManager.java:25 attr [@-1,100:106='blkcase',<0>,248:9]
2023-10-11 23:45:54:631 action-translator LogManager.java:25 attr [@-1,118:124='blkcase',<0>,248:27]
2023-10-11 23:45:54:632 action-translator LogManager.java:25 translate 
    $blocas=sentencias.NewSentenciaSwitchCase($CASE.line ,$CASE.pos, $expr.e, $blockinterno.blkint)

2023-10-11 23:45:54:632 action-translator LogManager.java:25 attr [@-1,7:12='blocas',<0>,256:5]
2023-10-11 23:45:54:632 action-translator LogManager.java:25 qattr [@-1,49:52='CASE',<0>,256:47].[@-1,54:57='line',<0>,256:52]
2023-10-11 23:45:54:632 action-translator LogManager.java:25 qattr [@-1,61:64='CASE',<0>,256:59].[@-1,66:68='pos',<0>,256:64]
2023-10-11 23:45:54:632 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,256:70].[@-1,77:77='e',<0>,256:75]
2023-10-11 23:45:54:632 action-translator LogManager.java:25 qattr [@-1,81:92='blockinterno',<0>,256:79].[@-1,94:99='blkint',<0>,256:92]
2023-10-11 23:45:54:632 action-translator LogManager.java:25 translate  $whict = sentencias.NewSentenciaWhile($WHILE.line, $WHILE.pos, $expr.e, $blockinterno.blkint)
2023-10-11 23:45:54:633 action-translator LogManager.java:25 attr [@-1,2:6='whict',<0>,262:46]
2023-10-11 23:45:54:633 action-translator LogManager.java:25 qattr [@-1,40:44='WHILE',<0>,262:84].[@-1,46:49='line',<0>,262:90]
2023-10-11 23:45:54:633 action-translator LogManager.java:25 qattr [@-1,53:57='WHILE',<0>,262:97].[@-1,59:61='pos',<0>,262:103]
2023-10-11 23:45:54:633 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,262:109].[@-1,70:70='e',<0>,262:114]
2023-10-11 23:45:54:633 action-translator LogManager.java:25 qattr [@-1,74:85='blockinterno',<0>,262:118].[@-1,87:92='blkint',<0>,262:131]
2023-10-11 23:45:54:633 action-translator LogManager.java:25 translate  $forct = sentencias.NewSentenciaForRango($FOR.line, $FOR.pos, $ID_VALIDO.text, $left.e, $right.e,$blockinterno.blkint)
2023-10-11 23:45:54:633 action-translator LogManager.java:25 attr [@-1,2:6='forct',<0>,266:79]
2023-10-11 23:45:54:633 action-translator LogManager.java:25 qattr [@-1,43:45='FOR',<0>,266:120].[@-1,47:50='line',<0>,266:124]
2023-10-11 23:45:54:633 action-translator LogManager.java:25 qattr [@-1,54:56='FOR',<0>,266:131].[@-1,58:60='pos',<0>,266:135]
2023-10-11 23:45:54:633 action-translator LogManager.java:25 qattr [@-1,64:72='ID_VALIDO',<0>,266:141].[@-1,74:77='text',<0>,266:151]
2023-10-11 23:45:54:633 action-translator LogManager.java:25 qattr [@-1,81:84='left',<0>,266:158].[@-1,86:86='e',<0>,266:163]
2023-10-11 23:45:54:633 action-translator LogManager.java:25 qattr [@-1,90:94='right',<0>,266:167].[@-1,96:96='e',<0>,266:173]
2023-10-11 23:45:54:633 action-translator LogManager.java:25 qattr [@-1,99:110='blockinterno',<0>,266:176].[@-1,112:117='blkint',<0>,266:189]
2023-10-11 23:45:54:633 action-translator LogManager.java:25 translate  $forct = sentencias.NewSentenciaForId($FOR.line, $FOR.pos, $op1.text, $op2.text, $blockinterno.blkint)
2023-10-11 23:45:54:633 action-translator LogManager.java:25 attr [@-1,2:6='forct',<0>,267:70]
2023-10-11 23:45:54:634 action-translator LogManager.java:25 qattr [@-1,40:42='FOR',<0>,267:108].[@-1,44:47='line',<0>,267:112]
2023-10-11 23:45:54:634 action-translator LogManager.java:25 qattr [@-1,51:53='FOR',<0>,267:119].[@-1,55:57='pos',<0>,267:123]
2023-10-11 23:45:54:634 action-translator LogManager.java:25 qattr [@-1,61:63='op1',<0>,267:129].[@-1,65:68='text',<0>,267:133]
2023-10-11 23:45:54:634 action-translator LogManager.java:25 qattr [@-1,72:74='op2',<0>,267:140].[@-1,76:79='text',<0>,267:144]
2023-10-11 23:45:54:634 action-translator LogManager.java:25 qattr [@-1,83:94='blockinterno',<0>,267:151].[@-1,96:101='blkint',<0>,267:164]
2023-10-11 23:45:54:634 action-translator LogManager.java:25 translate  $forct = sentencias.NewSentenciaForCadena($FOR.line, $FOR.pos, $ID_VALIDO.text, $expr.e, $blockinterno.blkint)
2023-10-11 23:45:54:634 action-translator LogManager.java:25 attr [@-1,2:6='forct',<0>,268:57]
2023-10-11 23:45:54:634 action-translator LogManager.java:25 qattr [@-1,44:46='FOR',<0>,268:99].[@-1,48:51='line',<0>,268:103]
2023-10-11 23:45:54:634 action-translator LogManager.java:25 qattr [@-1,55:57='FOR',<0>,268:110].[@-1,59:61='pos',<0>,268:114]
2023-10-11 23:45:54:634 action-translator LogManager.java:25 qattr [@-1,65:73='ID_VALIDO',<0>,268:120].[@-1,75:78='text',<0>,268:130]
2023-10-11 23:45:54:634 action-translator LogManager.java:25 qattr [@-1,82:85='expr',<0>,268:137].[@-1,87:87='e',<0>,268:142]
2023-10-11 23:45:54:634 action-translator LogManager.java:25 qattr [@-1,91:102='blockinterno',<0>,268:146].[@-1,104:109='blkint',<0>,268:159]
2023-10-11 23:45:54:634 action-translator LogManager.java:25 translate  
    $guct = sentencias.NewSentenciaGuard($GUARD.line, $GUARD.pos, $expr.e, $blockinterno.blkint)

2023-10-11 23:45:54:634 action-translator LogManager.java:25 attr [@-1,8:11='guct',<0>,275:5]
2023-10-11 23:45:54:634 action-translator LogManager.java:25 qattr [@-1,45:49='GUARD',<0>,275:42].[@-1,51:54='line',<0>,275:48]
2023-10-11 23:45:54:635 action-translator LogManager.java:25 qattr [@-1,58:62='GUARD',<0>,275:55].[@-1,64:66='pos',<0>,275:61]
2023-10-11 23:45:54:635 action-translator LogManager.java:25 qattr [@-1,70:73='expr',<0>,275:67].[@-1,75:75='e',<0>,275:72]
2023-10-11 23:45:54:635 action-translator LogManager.java:25 qattr [@-1,79:90='blockinterno',<0>,275:76].[@-1,92:97='blkint',<0>,275:89]
2023-10-11 23:45:54:635 action-translator LogManager.java:25 translate $coct = sentencias.NewTransferenciaContinue($CONTINUE.line, $CONTINUE.pos)
2023-10-11 23:45:54:635 action-translator LogManager.java:25 attr [@-1,1:4='coct',<0>,281:12]
2023-10-11 23:45:54:635 action-translator LogManager.java:25 qattr [@-1,45:52='CONTINUE',<0>,281:56].[@-1,54:57='line',<0>,281:65]
2023-10-11 23:45:54:635 action-translator LogManager.java:25 qattr [@-1,61:68='CONTINUE',<0>,281:72].[@-1,70:72='pos',<0>,281:81]
2023-10-11 23:45:54:635 action-translator LogManager.java:25 translate  $brkct = sentencias.NewTransferenciaBreak($BREAK.line, $BREAK.pos)
2023-10-11 23:45:54:635 action-translator LogManager.java:25 attr [@-1,2:6='brkct',<0>,285:10]
2023-10-11 23:45:54:636 action-translator LogManager.java:25 qattr [@-1,44:48='BREAK',<0>,285:52].[@-1,50:53='line',<0>,285:58]
2023-10-11 23:45:54:636 action-translator LogManager.java:25 qattr [@-1,57:61='BREAK',<0>,285:65].[@-1,63:65='pos',<0>,285:71]
2023-10-11 23:45:54:636 action-translator LogManager.java:25 translate 
    $rect = sentencias.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e);

2023-10-11 23:45:54:636 action-translator LogManager.java:25 setAttr [@-1,7:10='rect',<0>,291:5] [@-1,13:83=' sentencias.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e)',<0>,291:11]
2023-10-11 23:45:54:636 action-translator LogManager.java:25 translate  sentencias.NewTransferenciaReturnExp($RETURN.line, $RETURN.pos, $op.e)
2023-10-11 23:45:54:636 action-translator LogManager.java:25 qattr [@-1,39:44='RETURN',<0>,290:39].[@-1,46:49='line',<0>,290:46]
2023-10-11 23:45:54:636 action-translator LogManager.java:25 qattr [@-1,53:58='RETURN',<0>,290:53].[@-1,60:62='pos',<0>,290:60]
2023-10-11 23:45:54:636 action-translator LogManager.java:25 qattr [@-1,66:67='op',<0>,290:66].[@-1,69:69='e',<0>,290:69]
2023-10-11 23:45:54:636 action-translator LogManager.java:25 translate 
    $rect = sentencias.NewTransferenciaReturn($RETURN.line, $RETURN.pos);

2023-10-11 23:45:54:636 action-translator LogManager.java:25 setAttr [@-1,7:10='rect',<0>,295:5] [@-1,13:73=' sentencias.NewTransferenciaReturn($RETURN.line, $RETURN.pos)',<0>,295:11]
2023-10-11 23:45:54:636 action-translator LogManager.java:25 translate  sentencias.NewTransferenciaReturn($RETURN.line, $RETURN.pos)
2023-10-11 23:45:54:636 action-translator LogManager.java:25 qattr [@-1,36:41='RETURN',<0>,294:36].[@-1,43:46='line',<0>,294:43]
2023-10-11 23:45:54:637 action-translator LogManager.java:25 qattr [@-1,50:55='RETURN',<0>,294:50].[@-1,57:59='pos',<0>,294:57]
2023-10-11 23:45:54:637 action-translator LogManager.java:25 translate  $vect = datoscompuestos.NewArregloDeclaracionLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo, $blockparams.blkpar)
2023-10-11 23:45:54:637 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,302:89]
2023-10-11 23:45:54:637 action-translator LogManager.java:25 qattr [@-1,53:55='VAR',<0>,302:140].[@-1,57:60='line',<0>,302:144]
2023-10-11 23:45:54:637 action-translator LogManager.java:25 qattr [@-1,64:66='VAR',<0>,302:151].[@-1,68:70='pos',<0>,302:155]
2023-10-11 23:45:54:637 action-translator LogManager.java:25 qattr [@-1,74:82='ID_VALIDO',<0>,302:161].[@-1,84:87='text',<0>,302:171]
2023-10-11 23:45:54:637 action-translator LogManager.java:25 qattr [@-1,92:99='tipodato',<0>,302:179].[@-1,101:104='tipo',<0>,302:188]
2023-10-11 23:45:54:637 action-translator LogManager.java:25 qattr [@-1,108:118='blockparams',<0>,302:195].[@-1,120:125='blkpar',<0>,302:207]
2023-10-11 23:45:54:637 action-translator LogManager.java:25 translate  $vect = datoscompuestos.NewArregloDeclaracionSinLista($VAR.line ,$VAR.pos, $ID_VALIDO.text , $tipodato.tipo)
2023-10-11 23:45:54:637 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,303:77]
2023-10-11 23:45:54:637 action-translator LogManager.java:25 qattr [@-1,56:58='VAR',<0>,303:131].[@-1,60:63='line',<0>,303:135]
2023-10-11 23:45:54:638 action-translator LogManager.java:25 qattr [@-1,67:69='VAR',<0>,303:142].[@-1,71:73='pos',<0>,303:146]
2023-10-11 23:45:54:638 action-translator LogManager.java:25 qattr [@-1,77:85='ID_VALIDO',<0>,303:152].[@-1,87:90='text',<0>,303:162]
2023-10-11 23:45:54:638 action-translator LogManager.java:25 qattr [@-1,95:102='tipodato',<0>,303:170].[@-1,104:107='tipo',<0>,303:179]
2023-10-11 23:45:54:638 action-translator LogManager.java:25 translate  $vect = datoscompuestos.NewArregloDeclaracionId($VAR.line ,$VAR.pos, $prin.text , $tipodato.tipo, $secu.text)
2023-10-11 23:45:54:638 action-translator LogManager.java:25 attr [@-1,2:5='vect',<0>,304:79]
2023-10-11 23:45:54:638 action-translator LogManager.java:25 qattr [@-1,50:52='VAR',<0>,304:127].[@-1,54:57='line',<0>,304:131]
2023-10-11 23:45:54:638 action-translator LogManager.java:25 qattr [@-1,61:63='VAR',<0>,304:138].[@-1,65:67='pos',<0>,304:142]
2023-10-11 23:45:54:638 action-translator LogManager.java:25 qattr [@-1,71:74='prin',<0>,304:148].[@-1,76:79='text',<0>,304:153]
2023-10-11 23:45:54:638 action-translator LogManager.java:25 qattr [@-1,84:91='tipodato',<0>,304:161].[@-1,93:96='tipo',<0>,304:170]
2023-10-11 23:45:54:638 action-translator LogManager.java:25 qattr [@-1,100:103='secu',<0>,304:177].[@-1,105:108='text',<0>,304:182]
2023-10-11 23:45:54:638 action-translator LogManager.java:25 translate 
    $blkpar = []interface{}{}
    var listInt []IBloqueparamsContext

2023-10-11 23:45:54:638 action-translator LogManager.java:25 attr [@-1,7:12='blkpar',<0>,309:5]
2023-10-11 23:45:54:639 action-translator LogManager.java:25 translate 
    listInt = localctx.(*BlockparamsContext).GetBlopas()
    for _, e := range listInt {
        $blkpar = append($blkpar, e.GetBlopas())
    }

2023-10-11 23:45:54:639 action-translator LogManager.java:25 attr [@-1,102:107='blkpar',<0>,316:9]
2023-10-11 23:45:54:639 action-translator LogManager.java:25 attr [@-1,119:124='blkpar',<0>,316:26]
2023-10-11 23:45:54:639 action-translator LogManager.java:25 translate 
    $blopas = datoscompuestos.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)

2023-10-11 23:45:54:639 action-translator LogManager.java:25 attr [@-1,7:12='blopas',<0>,324:5]
2023-10-11 23:45:54:639 action-translator LogManager.java:25 qattr [@-1,54:57='COMA',<0>,324:52].[@-1,59:62='line',<0>,324:57]
2023-10-11 23:45:54:640 action-translator LogManager.java:25 qattr [@-1,66:69='COMA',<0>,324:64].[@-1,71:73='pos',<0>,324:69]
2023-10-11 23:45:54:640 action-translator LogManager.java:25 qattr [@-1,77:80='expr',<0>,324:75].[@-1,82:82='e',<0>,324:80]
2023-10-11 23:45:54:640 action-translator LogManager.java:25 translate 
    $blopas = datoscompuestos.NewArregloParametro($expr.e)

2023-10-11 23:45:54:640 action-translator LogManager.java:25 attr [@-1,7:12='blopas',<0>,328:5]
2023-10-11 23:45:54:640 action-translator LogManager.java:25 qattr [@-1,53:56='expr',<0>,328:51].[@-1,58:58='e',<0>,328:56]
2023-10-11 23:45:54:640 action-translator LogManager.java:25 translate  $veadct = datoscompuestos.NewArregloAppend($ID_VALIDO.text , $expr.e)
2023-10-11 23:45:54:640 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,332:46]
2023-10-11 23:45:54:640 action-translator LogManager.java:25 qattr [@-1,45:53='ID_VALIDO',<0>,332:89].[@-1,55:58='text',<0>,332:99]
2023-10-11 23:45:54:641 action-translator LogManager.java:25 qattr [@-1,63:66='expr',<0>,332:107].[@-1,68:68='e',<0>,332:112]
2023-10-11 23:45:54:641 action-translator LogManager.java:25 translate  $veadct = datoscompuestos.NewArregloAppendArreglo($prin.text , $pop.e, $secu.text, $sop.e)
2023-10-11 23:45:54:641 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,333:91]
2023-10-11 23:45:54:641 action-translator LogManager.java:25 qattr [@-1,52:55='prin',<0>,333:141].[@-1,57:60='text',<0>,333:146]
2023-10-11 23:45:54:641 action-translator LogManager.java:25 qattr [@-1,65:67='pop',<0>,333:154].[@-1,69:69='e',<0>,333:158]
2023-10-11 23:45:54:642 action-translator LogManager.java:25 qattr [@-1,73:76='secu',<0>,333:162].[@-1,78:81='text',<0>,333:167]
2023-10-11 23:45:54:642 action-translator LogManager.java:25 qattr [@-1,85:87='sop',<0>,333:174].[@-1,89:89='e',<0>,333:178]
2023-10-11 23:45:54:642 action-translator LogManager.java:25 translate  $veadct = datoscompuestos.NewMatrizAsignacionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas, $op3.e) 
2023-10-11 23:45:54:642 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,335:2]
2023-10-11 23:45:54:642 action-translator LogManager.java:25 qattr [@-1,52:60='ID_VALIDO',<0>,335:52].[@-1,62:65='text',<0>,335:62]
2023-10-11 23:45:54:642 action-translator LogManager.java:25 qattr [@-1,69:71='op1',<0>,335:69].[@-1,73:73='e',<0>,335:73]
2023-10-11 23:45:54:642 action-translator LogManager.java:25 qattr [@-1,77:79='op2',<0>,335:77].[@-1,81:81='e',<0>,335:81]
2023-10-11 23:45:54:642 action-translator LogManager.java:25 qattr [@-1,85:102='listamatrizaddsubs',<0>,335:85].[@-1,104:113='blklimatas',<0>,335:104]
2023-10-11 23:45:54:642 action-translator LogManager.java:25 qattr [@-1,117:119='op3',<0>,335:117].[@-1,121:121='e',<0>,335:121]
2023-10-11 23:45:54:642 action-translator LogManager.java:25 translate  $veadct = datoscompuestos.NewMatrizAsignacion($ID_VALIDO.text, $op1.e, $op2.e, $op3.e) 
2023-10-11 23:45:54:642 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,337:2]
2023-10-11 23:45:54:642 action-translator LogManager.java:25 qattr [@-1,48:56='ID_VALIDO',<0>,337:48].[@-1,58:61='text',<0>,337:58]
2023-10-11 23:45:54:642 action-translator LogManager.java:25 qattr [@-1,65:67='op1',<0>,337:65].[@-1,69:69='e',<0>,337:69]
2023-10-11 23:45:54:642 action-translator LogManager.java:25 qattr [@-1,73:75='op2',<0>,337:73].[@-1,77:77='e',<0>,337:77]
2023-10-11 23:45:54:642 action-translator LogManager.java:25 qattr [@-1,81:83='op3',<0>,337:81].[@-1,85:85='e',<0>,337:85]
2023-10-11 23:45:54:642 action-translator LogManager.java:25 translate  $veadct = datoscompuestos.NewArregloAppendExp($ID_VALIDO.text , $pop.e, $sop.e)
2023-10-11 23:45:54:642 action-translator LogManager.java:25 attr [@-1,2:7='veadct',<0>,338:52]
2023-10-11 23:45:54:642 action-translator LogManager.java:25 qattr [@-1,48:56='ID_VALIDO',<0>,338:98].[@-1,58:61='text',<0>,338:108]
2023-10-11 23:45:54:643 action-translator LogManager.java:25 qattr [@-1,66:68='pop',<0>,338:116].[@-1,70:70='e',<0>,338:120]
2023-10-11 23:45:54:643 action-translator LogManager.java:25 qattr [@-1,74:76='sop',<0>,338:124].[@-1,78:78='e',<0>,338:128]
2023-10-11 23:45:54:643 action-translator LogManager.java:25 translate  $vermct = datoscompuestos.NewArregloRemoveLast($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-10-11 23:45:54:643 action-translator LogManager.java:25 attr [@-1,2:7='vermct',<0>,342:46]
2023-10-11 23:45:54:643 action-translator LogManager.java:25 qattr [@-1,49:53='PUNTO',<0>,342:93].[@-1,55:58='line',<0>,342:99]
2023-10-11 23:45:54:643 action-translator LogManager.java:25 qattr [@-1,62:66='PUNTO',<0>,342:106].[@-1,68:70='pos',<0>,342:112]
2023-10-11 23:45:54:643 action-translator LogManager.java:25 qattr [@-1,74:82='ID_VALIDO',<0>,342:118].[@-1,84:87='text',<0>,342:128]
2023-10-11 23:45:54:643 action-translator LogManager.java:25 translate  $vermct = datoscompuestos.NewArregloRemovePos($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text, $expr.e)
2023-10-11 23:45:54:643 action-translator LogManager.java:25 attr [@-1,2:7='vermct',<0>,343:60]
2023-10-11 23:45:54:643 action-translator LogManager.java:25 qattr [@-1,48:52='PUNTO',<0>,343:106].[@-1,54:57='line',<0>,343:112]
2023-10-11 23:45:54:643 action-translator LogManager.java:25 qattr [@-1,61:65='PUNTO',<0>,343:119].[@-1,67:69='pos',<0>,343:125]
2023-10-11 23:45:54:643 action-translator LogManager.java:25 qattr [@-1,73:81='ID_VALIDO',<0>,343:131].[@-1,83:86='text',<0>,343:141]
2023-10-11 23:45:54:643 action-translator LogManager.java:25 qattr [@-1,90:93='expr',<0>,343:148].[@-1,95:95='e',<0>,343:153]
2023-10-11 23:45:54:643 action-translator LogManager.java:25 translate  $veemct = datoscompuestos.NewArregloIsEmpty($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-10-11 23:45:54:643 action-translator LogManager.java:25 attr [@-1,2:7='veemct',<0>,347:28]
2023-10-11 23:45:54:643 action-translator LogManager.java:25 qattr [@-1,46:50='PUNTO',<0>,347:72].[@-1,52:55='line',<0>,347:78]
2023-10-11 23:45:54:643 action-translator LogManager.java:25 qattr [@-1,59:63='PUNTO',<0>,347:85].[@-1,65:67='pos',<0>,347:91]
2023-10-11 23:45:54:643 action-translator LogManager.java:25 qattr [@-1,71:79='ID_VALIDO',<0>,347:97].[@-1,81:84='text',<0>,347:107]
2023-10-11 23:45:54:644 action-translator LogManager.java:25 translate  $vecnct = datoscompuestos.NewArregloCount($PUNTO.line, $PUNTO.pos, $ID_VALIDO.text)
2023-10-11 23:45:54:644 action-translator LogManager.java:25 attr [@-1,2:7='vecnct',<0>,350:26]
2023-10-11 23:45:54:644 action-translator LogManager.java:25 qattr [@-1,44:48='PUNTO',<0>,350:68].[@-1,50:53='line',<0>,350:74]
2023-10-11 23:45:54:644 action-translator LogManager.java:25 qattr [@-1,57:61='PUNTO',<0>,350:81].[@-1,63:65='pos',<0>,350:87]
2023-10-11 23:45:54:644 action-translator LogManager.java:25 qattr [@-1,69:77='ID_VALIDO',<0>,350:93].[@-1,79:82='text',<0>,350:103]
2023-10-11 23:45:54:644 action-translator LogManager.java:25 translate  $vepposct = datoscompuestos.NewMatrizObtencionList($ID_VALIDO.text, $op1.e, $op2.e, $listamatrizaddsubs.blklimatas) 
2023-10-11 23:45:54:645 action-translator LogManager.java:25 attr [@-1,2:9='vepposct',<0>,354:2]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,53:61='ID_VALIDO',<0>,354:53].[@-1,63:66='text',<0>,354:63]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,70:72='op1',<0>,354:70].[@-1,74:74='e',<0>,354:74]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,78:80='op2',<0>,354:78].[@-1,82:82='e',<0>,354:82]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,86:103='listamatrizaddsubs',<0>,354:86].[@-1,105:114='blklimatas',<0>,354:105]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 translate  $vepposct = datoscompuestos.NewMatrizObtencion($ID_VALIDO.text, $op1.e, $op2.e) 
2023-10-11 23:45:54:645 action-translator LogManager.java:25 attr [@-1,2:9='vepposct',<0>,356:2]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,49:57='ID_VALIDO',<0>,356:49].[@-1,59:62='text',<0>,356:59]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,66:68='op1',<0>,356:66].[@-1,70:70='e',<0>,356:70]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,74:76='op2',<0>,356:74].[@-1,78:78='e',<0>,356:78]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 translate  $vepposct = datoscompuestos.NewArregloAccess($CORCHDER.line, $CORCHDER.pos, $ID_VALIDO.text, $expr.e)
2023-10-11 23:45:54:645 action-translator LogManager.java:25 attr [@-1,2:9='vepposct',<0>,357:37]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,47:54='CORCHDER',<0>,357:82].[@-1,56:59='line',<0>,357:91]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,63:70='CORCHDER',<0>,357:98].[@-1,72:74='pos',<0>,357:107]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,78:86='ID_VALIDO',<0>,357:113].[@-1,88:91='text',<0>,357:123]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,95:98='expr',<0>,357:130].[@-1,100:100='e',<0>,357:135]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 translate 
    if ($DOS_PUNTOS != nil) {
        $matct = datoscompuestos.NewMatrizDeclaracion($VAR.line, $VAR.pos, $ID_VALIDO.text ,$tipomatriz.tipomat, $defmatriz.defmat)
    } else {
        fmt.Println("Nada")
        //$matct = datoscompuestos.NewMatrizDeclaracionSinTipo($VAR.line, $VAR.pos, $ID_VALIDO.text , $defmatriz.defmat)
    }

2023-10-11 23:45:54:645 action-translator LogManager.java:25 attr [@-1,11:20='DOS_PUNTOS',<0>,364:9]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 attr [@-1,42:46='matct',<0>,365:9]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,88:90='VAR',<0>,365:55].[@-1,92:95='line',<0>,365:59]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,99:101='VAR',<0>,365:66].[@-1,103:105='pos',<0>,365:70]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,109:117='ID_VALIDO',<0>,365:76].[@-1,119:122='text',<0>,365:86]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,126:135='tipomatriz',<0>,365:93].[@-1,137:143='tipomat',<0>,365:104]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,147:155='defmatriz',<0>,365:114].[@-1,157:162='defmat',<0>,365:124]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 attr [@-1,220:224='matct',<0>,368:11]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,273:275='VAR',<0>,368:64].[@-1,277:280='line',<0>,368:68]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,284:286='VAR',<0>,368:75].[@-1,288:290='pos',<0>,368:79]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,294:302='ID_VALIDO',<0>,368:85].[@-1,304:307='text',<0>,368:95]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,312:320='defmatriz',<0>,368:103].[@-1,322:327='defmat',<0>,368:113]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 translate  
    $tipomat = datoscompuestos.NewMatrizDimension($CORCHIZQ.line, $CORCHIZQ.pos, $tipomatriz.tipomat)

2023-10-11 23:45:54:645 action-translator LogManager.java:25 attr [@-1,8:14='tipomat',<0>,376:5]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,54:61='CORCHIZQ',<0>,376:51].[@-1,63:66='line',<0>,376:60]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,70:77='CORCHIZQ',<0>,376:67].[@-1,79:81='pos',<0>,376:76]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 qattr [@-1,85:94='tipomatriz',<0>,376:82].[@-1,96:102='tipomat',<0>,376:93]
2023-10-11 23:45:54:645 action-translator LogManager.java:25 translate  
    $tipomat = datoscompuestos.NewMatrizTipo($CORCHIZQ.line, $CORCHIZQ.pos, $tipodato.tipo)

2023-10-11 23:45:54:645 action-translator LogManager.java:25 attr [@-1,8:14='tipomat',<0>,380:5]
2023-10-11 23:45:54:646 action-translator LogManager.java:25 qattr [@-1,49:56='CORCHIZQ',<0>,380:46].[@-1,58:61='line',<0>,380:55]
2023-10-11 23:45:54:646 action-translator LogManager.java:25 qattr [@-1,65:72='CORCHIZQ',<0>,380:62].[@-1,74:76='pos',<0>,380:71]
2023-10-11 23:45:54:646 action-translator LogManager.java:25 qattr [@-1,80:87='tipodato',<0>,380:77].[@-1,89:92='tipo',<0>,380:86]
2023-10-11 23:45:54:646 action-translator LogManager.java:25 translate  $defmat = $listavaloresmat.listvlamat
2023-10-11 23:45:54:646 action-translator LogManager.java:25 attr [@-1,2:7='defmat',<0>,385:20]
2023-10-11 23:45:54:646 action-translator LogManager.java:25 qattr [@-1,12:26='listavaloresmat',<0>,385:30].[@-1,28:37='listvlamat',<0>,385:46]
2023-10-11 23:45:54:646 action-translator LogManager.java:25 translate  $listvlamat = $listavaloresmat2.mylisttmatt
2023-10-11 23:45:54:646 action-translator LogManager.java:25 attr [@-1,2:11='listvlamat',<0>,389:39]
2023-10-11 23:45:54:646 action-translator LogManager.java:25 qattr [@-1,16:31='listavaloresmat2',<0>,389:53].[@-1,33:43='mylisttmatt',<0>,389:70]
2023-10-11 23:45:54:646 action-translator LogManager.java:25 translate  $listvlamat = $simplematriz.simmat
2023-10-11 23:45:54:646 action-translator LogManager.java:25 attr [@-1,2:11='listvlamat',<0>,390:17]
2023-10-11 23:45:54:646 action-translator LogManager.java:25 qattr [@-1,16:27='simplematriz',<0>,390:31].[@-1,29:34='simmat',<0>,390:44]
2023-10-11 23:45:54:647 action-translator LogManager.java:25 translate 
2023-10-11 23:45:54:647 action-translator LogManager.java:25 translate  $mylisttmatt = datoscompuestos.NewMatrizListaNivel($listavaloresmat.listvlamat)
2023-10-11 23:45:54:647 action-translator LogManager.java:25 attr [@-1,2:12='mylisttmatt',<0>,2:48]
2023-10-11 23:45:54:647 action-translator LogManager.java:25 qattr [@-1,53:67='listavaloresmat',<0>,2:99].[@-1,69:78='listvlamat',<0>,2:115]
2023-10-11 23:45:54:647 action-translator LogManager.java:25 translate  $mylisttmatt = datoscompuestos.NewMatrizListaExpresion($listaexpresions.blkparf)
2023-10-11 23:45:54:647 action-translator LogManager.java:25 attr [@-1,2:12='mylisttmatt',<0>,3:45]
2023-10-11 23:45:54:647 action-translator LogManager.java:25 qattr [@-1,57:71='listaexpresions',<0>,3:100].[@-1,73:79='blkparf',<0>,3:116]
2023-10-11 23:45:54:647 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-11 23:45:54:647 action-translator LogManager.java:25 translate  $mylisttmatt = datoscompuestos.NewMatrizListaExpresionList($op.mylisttmatt, $listavaloresmat.listvlamat)
2023-10-11 23:45:54:647 action-translator LogManager.java:25 attr [@-1,2:12='mylisttmatt',<0>,6:115]
2023-10-11 23:45:54:647 action-translator LogManager.java:25 qattr [@-1,61:62='op',<0>,6:174].[@-1,64:74='mylisttmatt',<0>,6:177]
2023-10-11 23:45:54:647 action-translator LogManager.java:25 qattr [@-1,78:92='listavaloresmat',<0>,6:191].[@-1,94:103='listvlamat',<0>,6:207]
2023-10-11 23:45:54:647 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-10-11 23:45:54:647 action-translator LogManager.java:25 translate 
    $blkparf = []interface{}{}
    var listInt []IListaexpresionContext

2023-10-11 23:45:54:647 action-translator LogManager.java:25 attr [@-1,7:13='blkparf',<0>,401:5]
2023-10-11 23:45:54:648 action-translator LogManager.java:25 translate 
    listInt = localctx.(*ListaexpresionsContext).GetFunpar()
    for _, e := range listInt {
        $blkparf = append($blkparf, e.GetFunpar())
    }

2023-10-11 23:45:54:648 action-translator LogManager.java:25 attr [@-1,106:112='blkparf',<0>,408:9]
2023-10-11 23:45:54:648 action-translator LogManager.java:25 attr [@-1,124:130='blkparf',<0>,408:27]
2023-10-11 23:45:54:648 action-translator LogManager.java:25 translate 
    $funpar = datoscompuestos.NewArregloParametros($COMA.line ,$COMA.pos, $expr.e)

2023-10-11 23:45:54:648 action-translator LogManager.java:25 attr [@-1,7:12='funpar',<0>,416:5]
2023-10-11 23:45:54:648 action-translator LogManager.java:25 qattr [@-1,54:57='COMA',<0>,416:52].[@-1,59:62='line',<0>,416:57]
2023-10-11 23:45:54:648 action-translator LogManager.java:25 qattr [@-1,66:69='COMA',<0>,416:64].[@-1,71:73='pos',<0>,416:69]
2023-10-11 23:45:54:648 action-translator LogManager.java:25 qattr [@-1,77:80='expr',<0>,416:75].[@-1,82:82='e',<0>,416:80]
2023-10-11 23:45:54:648 action-translator LogManager.java:25 translate 
    $funpar = datoscompuestos.NewArregloParametro($expr.e)

2023-10-11 23:45:54:648 action-translator LogManager.java:25 attr [@-1,7:12='funpar',<0>,420:5]
2023-10-11 23:45:54:648 action-translator LogManager.java:25 qattr [@-1,53:56='expr',<0>,420:51].[@-1,58:58='e',<0>,420:56]
2023-10-11 23:45:54:648 action-translator LogManager.java:25 translate  $simmat = datoscompuestos.NewMatrizSimpleUno($tipomatriz.tipomat, $op.simmat, $NUMBER.text, $NUMBER.line,$NUMBER.pos)
2023-10-11 23:45:54:648 action-translator LogManager.java:25 attr [@-1,2:7='simmat',<0>,426:2]
2023-10-11 23:45:54:648 action-translator LogManager.java:25 qattr [@-1,47:56='tipomatriz',<0>,426:47].[@-1,58:64='tipomat',<0>,426:58]
2023-10-11 23:45:54:648 action-translator LogManager.java:25 qattr [@-1,68:69='op',<0>,426:68].[@-1,71:76='simmat',<0>,426:71]
2023-10-11 23:45:54:648 action-translator LogManager.java:25 qattr [@-1,80:85='NUMBER',<0>,426:80].[@-1,87:90='text',<0>,426:87]
2023-10-11 23:45:54:648 action-translator LogManager.java:25 qattr [@-1,94:99='NUMBER',<0>,426:94].[@-1,101:104='line',<0>,426:101]
2023-10-11 23:45:54:649 action-translator LogManager.java:25 qattr [@-1,107:112='NUMBER',<0>,426:107].[@-1,114:116='pos',<0>,426:114]
2023-10-11 23:45:54:649 action-translator LogManager.java:25 translate  $simmat = datoscompuestos.NewMatrizSimpleDos($tipomatriz.tipomat, $expr.e, $NUMBER.text, $NUMBER.line,$NUMBER.pos)
2023-10-11 23:45:54:649 action-translator LogManager.java:25 attr [@-1,2:7='simmat',<0>,428:2]
2023-10-11 23:45:54:649 action-translator LogManager.java:25 qattr [@-1,47:56='tipomatriz',<0>,428:47].[@-1,58:64='tipomat',<0>,428:58]
2023-10-11 23:45:54:649 action-translator LogManager.java:25 qattr [@-1,68:71='expr',<0>,428:68].[@-1,73:73='e',<0>,428:73]
2023-10-11 23:45:54:649 action-translator LogManager.java:25 qattr [@-1,77:82='NUMBER',<0>,428:77].[@-1,84:87='text',<0>,428:84]
2023-10-11 23:45:54:649 action-translator LogManager.java:25 qattr [@-1,91:96='NUMBER',<0>,428:91].[@-1,98:101='line',<0>,428:98]
2023-10-11 23:45:54:649 action-translator LogManager.java:25 qattr [@-1,104:109='NUMBER',<0>,428:104].[@-1,111:113='pos',<0>,428:111]
2023-10-11 23:45:54:649 action-translator LogManager.java:25 translate 
    $blklimatas = []interface{}{}
    var listInt []IListamatrizaddsubContext

2023-10-11 23:45:54:649 action-translator LogManager.java:25 attr [@-1,7:16='blklimatas',<0>,433:5]
2023-10-11 23:45:54:649 action-translator LogManager.java:25 translate 
    listInt = localctx.(*ListamatrizaddsubsContext).GetLmas()
    for _, e := range listInt {
        $blklimatas = append($blklimatas, e.GetLmas())
    }

2023-10-11 23:45:54:649 action-translator LogManager.java:25 attr [@-1,107:116='blklimatas',<0>,440:9]
2023-10-11 23:45:54:649 action-translator LogManager.java:25 attr [@-1,128:137='blklimatas',<0>,440:30]
2023-10-11 23:45:54:649 action-translator LogManager.java:25 translate 
    $lmas = datoscompuestos.NewArregloParametros($CORCHIZQ.line ,$CORCHIZQ.pos, $expr.e)

2023-10-11 23:45:54:649 action-translator LogManager.java:25 attr [@-1,7:10='lmas',<0>,448:5]
2023-10-11 23:45:54:649 action-translator LogManager.java:25 qattr [@-1,52:59='CORCHIZQ',<0>,448:50].[@-1,61:64='line',<0>,448:59]
2023-10-11 23:45:54:649 action-translator LogManager.java:25 qattr [@-1,68:75='CORCHIZQ',<0>,448:66].[@-1,77:79='pos',<0>,448:75]
2023-10-11 23:45:54:650 action-translator LogManager.java:25 qattr [@-1,83:86='expr',<0>,448:81].[@-1,88:88='e',<0>,448:86]
2023-10-11 23:45:54:650 action-translator LogManager.java:25 translate 
    $fdc = funciones.NewFuncionesDeclaracionR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $tipodato.tipo, $blockinterno.blkint)

2023-10-11 23:45:54:650 action-translator LogManager.java:25 attr [@-1,7:9='fdc',<0>,573:5]
2023-10-11 23:45:54:650 action-translator LogManager.java:25 qattr [@-1,49:57='ID_VALIDO',<0>,573:47].[@-1,59:62='line',<0>,573:57]
2023-10-11 23:45:54:650 action-translator LogManager.java:25 qattr [@-1,66:74='ID_VALIDO',<0>,573:64].[@-1,76:78='pos',<0>,573:74]
2023-10-11 23:45:54:650 action-translator LogManager.java:25 qattr [@-1,82:90='ID_VALIDO',<0>,573:80].[@-1,92:95='text',<0>,573:90]
2023-10-11 23:45:54:650 action-translator LogManager.java:25 qattr [@-1,99:106='tipodato',<0>,573:97].[@-1,108:111='tipo',<0>,573:106]
2023-10-11 23:45:54:650 action-translator LogManager.java:25 qattr [@-1,115:126='blockinterno',<0>,573:113].[@-1,128:133='blkint',<0>,573:126]
2023-10-11 23:45:54:650 action-translator LogManager.java:25 translate 
    $fdc = funciones.NewFuncionesDeclaracion($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text, $blockinterno.blkint)

2023-10-11 23:45:54:650 action-translator LogManager.java:25 attr [@-1,7:9='fdc',<0>,581:5]
2023-10-11 23:45:54:650 action-translator LogManager.java:25 qattr [@-1,48:56='ID_VALIDO',<0>,581:46].[@-1,58:61='line',<0>,581:56]
2023-10-11 23:45:54:650 action-translator LogManager.java:25 qattr [@-1,65:73='ID_VALIDO',<0>,581:63].[@-1,75:77='pos',<0>,581:73]
2023-10-11 23:45:54:650 action-translator LogManager.java:25 qattr [@-1,81:89='ID_VALIDO',<0>,581:79].[@-1,91:94='text',<0>,581:89]
2023-10-11 23:45:54:650 action-translator LogManager.java:25 qattr [@-1,98:109='blockinterno',<0>,581:96].[@-1,111:116='blkint',<0>,581:109]
2023-10-11 23:45:54:650 action-translator LogManager.java:25 translate 
    $flctl = funciones.NewFuncionesControl($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )

2023-10-11 23:45:54:650 action-translator LogManager.java:25 attr [@-1,7:11='flctl',<0>,628:5]
2023-10-11 23:45:54:651 action-translator LogManager.java:25 qattr [@-1,46:54='ID_VALIDO',<0>,628:44].[@-1,56:59='line',<0>,628:54]
2023-10-11 23:45:54:651 action-translator LogManager.java:25 qattr [@-1,63:71='ID_VALIDO',<0>,628:61].[@-1,73:75='pos',<0>,628:71]
2023-10-11 23:45:54:651 action-translator LogManager.java:25 qattr [@-1,79:87='ID_VALIDO',<0>,628:77].[@-1,89:92='text',<0>,628:87]
2023-10-11 23:45:54:651 action-translator LogManager.java:25 translate 
    $flctlret = funciones.NewFuncionesControlR($ID_VALIDO.line, $ID_VALIDO.pos, $ID_VALIDO.text )

2023-10-11 23:45:54:651 action-translator LogManager.java:25 attr [@-1,7:14='flctlret',<0>,639:5]
2023-10-11 23:45:54:651 action-translator LogManager.java:25 qattr [@-1,50:58='ID_VALIDO',<0>,639:48].[@-1,60:63='line',<0>,639:58]
2023-10-11 23:45:54:651 action-translator LogManager.java:25 qattr [@-1,67:75='ID_VALIDO',<0>,639:65].[@-1,77:79='pos',<0>,639:75]
2023-10-11 23:45:54:651 action-translator LogManager.java:25 qattr [@-1,83:91='ID_VALIDO',<0>,639:81].[@-1,93:96='text',<0>,639:91]
2023-10-11 23:45:54:651 action-translator LogManager.java:25 translate  $prnt = funciones.NewPrint($PRINT.line,$PRINT.pos,$listaexpresions.blkparf)
2023-10-11 23:45:54:651 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,675:40]
2023-10-11 23:45:54:651 action-translator LogManager.java:25 qattr [@-1,29:33='PRINT',<0>,675:67].[@-1,35:38='line',<0>,675:73]
2023-10-11 23:45:54:651 action-translator LogManager.java:25 qattr [@-1,41:45='PRINT',<0>,675:79].[@-1,47:49='pos',<0>,675:85]
2023-10-11 23:45:54:651 action-translator LogManager.java:25 qattr [@-1,52:66='listaexpresions',<0>,675:90].[@-1,68:74='blkparf',<0>,675:106]
2023-10-11 23:45:54:651 action-translator LogManager.java:25 translate  $intemb = funciones.NewFuncionIntEmbebida($expr.e)
2023-10-11 23:45:54:651 action-translator LogManager.java:25 attr [@-1,2:7='intemb',<0>,678:27]
2023-10-11 23:45:54:651 action-translator LogManager.java:25 qattr [@-1,44:47='expr',<0>,678:69].[@-1,49:49='e',<0>,678:74]
2023-10-11 23:45:54:652 action-translator LogManager.java:25 translate  $floemb = funciones.NewFuncionFloatEmbebida($expr.e)
2023-10-11 23:45:54:652 action-translator LogManager.java:25 attr [@-1,2:7='floemb',<0>,681:29]
2023-10-11 23:45:54:652 action-translator LogManager.java:25 qattr [@-1,46:49='expr',<0>,681:73].[@-1,51:51='e',<0>,681:78]
2023-10-11 23:45:54:652 action-translator LogManager.java:25 translate  $stremb = funciones.NewFuncionStringEmbebida($expr.e)
2023-10-11 23:45:54:652 action-translator LogManager.java:25 attr [@-1,2:7='stremb',<0>,684:30]
2023-10-11 23:45:54:652 action-translator LogManager.java:25 qattr [@-1,47:50='expr',<0>,684:75].[@-1,52:52='e',<0>,684:80]
2023-10-11 23:45:55:000 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"
   

2023-10-11 23:45:55:000 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"
   

2023-10-11 23:45:55:170 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"
   

2023-10-11 23:45:55:170 action-translator LogManager.java:25 translate 
    import "Backend/interfaces"
    import "Backend/environment"
    import "Backend/expressions"
    import "Backend/instructions/datoscompuestos"
    import "Backend/instructions/datosprimitivos"
    import "Backend/instructions/funciones"
    import "Backend/instructions/sentencias"
    import "strings"
   

